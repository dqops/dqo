---
swagger: "2.0"
info:
  description: "DQOps Cloud API"
  version: "v1"
  title: "DQOps Cloud"
  termsOfService: "https://dqops.com/terms-of-service"
  contact:
    name: "DQOps Cloud Support"
    url: "https://dqops.com/"
    email: "support@dqops.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.dqops.com"
basePath: "/"
tags:
- name: "AccessTokenIssue"
- name: "AccountUsers"
- name: "ApiKeyRequest"
- name: "DataDomains"
- name: "LookerStudioKeyRequest"
- name: "RefreshTokenIssue"
- name: "TenantDataWarehouse"
schemes:
- "https"
paths:
  /api/v1/accesstokenissue/ro/query:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueTenantDataROQueryAccessToken"
      description: "Issues a read-only Google access token used by the DQO Looker\
        \ Studio Community Connector to query the tenant's data quality data warehouse."
      operationId: "issueTenantDataROQueryAccessToken"
      parameters:
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantQueryAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/check_results:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketCheckResultsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with rule results"
      operationId: "issueBucketCheckResultsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/checks:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketChecksRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with custom check definitions"
      operationId: "issueBucketChecksRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/credentials:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketCredentialsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with credentials (.credentials folder)"
      operationId: "issueBucketCredentialsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/dictionaries:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketDictionariesRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with custom term dictionaries (dictionaries folder)"
      operationId: "issueBucketDictionariesRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/error_samples:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketErrorSamplesRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with error samples"
      operationId: "issueBucketErrorSamplesRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/errors:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketErrorsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with errors"
      operationId: "issueBucketErrorsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/incidents:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketIncidentsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with incidents"
      operationId: "issueBucketIncidentsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/patterns:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketPatternsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with the configuration of default checks as check patterns (patterns\
        \ folder)"
      operationId: "issueBucketPatternsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/rules:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketRulesRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with custom rule definitions"
      operationId: "issueBucketRulesRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/sensor_readouts:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketSensorReadoutsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with sensor readouts"
      operationId: "issueBucketSensorReadoutsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/sensors:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketSensorsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with custom sensor definitions"
      operationId: "issueBucketSensorsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/settings:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketSettingsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with settings"
      operationId: "issueBucketSettingsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/sources:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketSourcesRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with sources and the data quality check configuration"
      operationId: "issueBucketSourcesRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/accesstokenissue/rw/statistics:
    get:
      tags:
      - "AccessTokenIssue"
      summary: "issueBucketStatisticsRWAccessToken"
      description: "Issues a Google Storage access token for accessing the tenant's\
        \ folder with statistics"
      operationId: "issueBucketStatisticsRWAccessToken"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TenantAccessTokenModel"
      security:
      - api_key: []
  /api/v1/apikey/issueapikey:
    post:
      tags:
      - "ApiKeyRequest"
      summary: "issueApiKey"
      description: "Issues an API Key by the DQO Cloud UI, this operation can also\
        \ generate a new fresh API key."
      operationId: "issueApiKey"
      consumes:
      - "text/plain"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - api_key: []
      - firebase_auth: []
  /api/v1/apikey/request:
    post:
      tags:
      - "ApiKeyRequest"
      summary: "requestApiKey"
      description: "Initiates an API Key generation request, generating the most recent\
        \ API Key version."
      operationId: "requestApiKey"
      produces:
      - "text/plain"
      parameters:
      - name: "challenge"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /api/v1/apikey/request/{apiKeyRequest}:
    get:
      tags:
      - "ApiKeyRequest"
      summary: "pickApiKey"
      description: "Retrieves a previously generated API Key given an API Key generation\
        \ request."
      operationId: "pickApiKey"
      produces:
      - "text/plain"
      parameters:
      - name: "apiKeyRequest"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /api/v1/apikey/request/{version}:
    post:
      tags:
      - "ApiKeyRequest"
      summary: "requestApiKeyVersion"
      description: "Initiates an API KEY generation process, asking for a specific\
        \ version of the API key."
      operationId: "requestApiKeyVersion"
      produces:
      - "text/plain"
      parameters:
      - name: "challenge"
        in: "query"
        required: false
        type: "string"
      - name: "version"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
  /api/v1/datadomains:
    get:
      tags:
      - "DataDomains"
      summary: "getDataDomainsList"
      description: "Returns a list of data domains. Only a user with an ADMIN role\
        \ can call this operation."
      operationId: "getDataDomainsList"
      parameters:
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DataDomainModel"
      security:
      - api_key: []
  /api/v1/datadomains/{dataDomain}:
    post:
      tags:
      - "DataDomains"
      summary: "createDataDomain"
      description: "Adds a new data domain. Only accounts onan ENTERPRISE license\
        \ can add new data domains."
      operationId: "createDataDomain"
      parameters:
      - name: "dataDomain"
        in: "path"
        description: "Data domain name"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DataDomainModel"
      security:
      - api_key: []
    delete:
      tags:
      - "DataDomains"
      summary: "deleteDataDomain"
      description: "Deletes a data domain. Only a user with an ADMIN right for an\
        \ ENTERPRISE edition can perform this operation. A deleted data domain cannot\
        \ be recreated under the same name."
      operationId: "deleteDataDomain"
      parameters:
      - name: "dataDomain"
        in: "path"
        description: "Data domain name"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
  /api/v1/lookerstudiokey/issue:
    get:
      tags:
      - "LookerStudioKeyRequest"
      summary: "issueLookerStudioApiKey"
      description: "Issues an API key for accessing DQOps data quality dashboards\
        \ from Looker Studio"
      operationId: "issueLookerStudioApiKey"
      produces:
      - "text/plain"
      parameters:
      - name: "dataDomain"
        in: "query"
        description: "The name of the data domain"
        required: false
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - api_key: []
  /api/v1/refreshtokens/login_tgt:
    post:
      tags:
      - "RefreshTokenIssue"
      summary: "issueLoginTicketGrantingTicketToken"
      description: "Issues a ticket granting ticket that authorizes DQOps Cloud to\
        \ issue a DQOps instance refresh token for a user that logs into DQOps Cloud."
      operationId: "issueLoginTicketGrantingTicketToken"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        description: "tgtRequest"
        required: false
        schema:
          $ref: "#/definitions/UserLoginTicketGrantingTicketRequest"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - api_key: []
  /api/v1/tenantdatawarehouse/refresh/table:
    post:
      tags:
      - "TenantDataWarehouse"
      summary: "refreshNativeTable"
      description: "Refreshes a native table."
      operationId: "refreshNativeTable"
      parameters:
      - in: "body"
        name: "body"
        description: "refreshTableRequest"
        required: false
        schema:
          $ref: "#/definitions/RefreshTableRequest"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      - name: "table"
        in: "query"
        description: "Table"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      security:
      - api_key: []
  /api/v1/users:
    get:
      tags:
      - "AccountUsers"
      summary: "listAccountUsers"
      description: "Returns a list of users for the current account. Only a user with\
        \ an ADMIN role can call this operation."
      operationId: "listAccountUsers"
      parameters:
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DqoUserModel"
      security:
      - api_key: []
    post:
      tags:
      - "AccountUsers"
      summary: "createAccountUser"
      description: "Adds a new user to a multi-user account. Only accounts on a TEAM\
        \ or ENTERPRISE license can add new users."
      operationId: "createAccountUser"
      parameters:
      - in: "body"
        name: "body"
        description: "New user model"
        required: false
        schema:
          $ref: "#/definitions/DqoUserModel"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
  /api/v1/users/{email}:
    get:
      tags:
      - "AccountUsers"
      summary: "getAccountUser"
      description: "Returns the information about a single user."
      operationId: "getAccountUser"
      parameters:
      - name: "email"
        in: "path"
        description: "User's email"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DqoUserModel"
      security:
      - api_key: []
    put:
      tags:
      - "AccountUsers"
      summary: "updateAccountUser"
      description: "Updates a new user in a multi-user account. Supports changing\
        \ the account role and/or updating the password. For a free user account,\
        \ only the password is changed if it is provided."
      operationId: "updateAccountUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user model with a new role and possibly a new password"
        required: false
        schema:
          $ref: "#/definitions/DqoUserModel"
      - name: "email"
        in: "path"
        description: "User's email"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
    delete:
      tags:
      - "AccountUsers"
      summary: "deleteAccountUser"
      description: "Deletes a user from a multi-user account. Only a user with an\
        \ ADMIN right for a multi-user account (TEAM or ENTERPRISE edition) can perform\
        \ this operation."
      operationId: "deleteAccountUser"
      parameters:
      - name: "email"
        in: "path"
        description: "User's email"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
  /api/v1/users/{email}/password:
    post:
      tags:
      - "AccountUsers"
      summary: "changeAccountUserPassword"
      description: "Changes the password of the given user. The user can change his\
        \ own password."
      operationId: "changeAccountUserPassword"
      parameters:
      - in: "body"
        name: "body"
        description: "New password"
        required: false
        schema:
          type: "string"
      - name: "email"
        in: "path"
        description: "User's email"
        required: true
        type: "string"
      - name: "owner"
        in: "query"
        description: "The email of account's owner"
        required: false
        type: "string"
      - name: "tenantId"
        in: "query"
        description: "The tenant id"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "APIKey"
    in: "header"
  basic:
    type: "basic"
  firebase_auth:
    type: "oauth2"
    authorizationUrl: ""
    flow: "implicit"
definitions:
  DataDomainModel:
    type: "object"
    properties:
      dataDomainName:
        type: "string"
        description: "Data domain name (technical name)"
      displayName:
        type: "string"
        description: "Data domain display name, returns (default) for the default\
          \ data domain that is identified by an empty string"
      createdAt:
        type: "string"
        format: "date-time"
        description: "The data domain creation timestamp."
    description: "DQOps Cloud data domain model that describes a data domain that\
      \ was created in an ENTERPRISE DQOps Cloud account."
  DqoUserModel:
    type: "object"
    properties:
      email:
        type: "string"
        description: "Email that identifies the user."
      accountRole:
        type: "string"
        description: "Global account role assigned to the user."
        enum:
        - "admin"
        - "editor"
        - "operator"
        - "viewer"
        - "none"
      newPassword:
        type: "string"
        description: "Write-only property used to update the password. This field\
          \ does not return the current password."
      dataDomainRoles:
        type: "object"
        description: "Dictionary of roles assigned at a data domain level."
        additionalProperties:
          type: "string"
          enum:
          - "admin"
          - "editor"
          - "operator"
          - "viewer"
          - "none"
    description: "DQOps Cloud user model that describes a user in multi-user SaaS\
      \ deployments."
  RefreshTableRequest:
    type: "object"
    properties:
      dataDomain:
        type: "string"
        description: "Data domain name for ENTERPRISE accounts that support multiple\
          \ data domain."
      table:
        type: "string"
        description: "Target table to be refreshed."
        enum:
        - "sensor_readouts"
        - "check_results"
        - "errors"
        - "error_samples"
        - "statistics"
        - "incidents"
        - "sources"
        - "sensors"
        - "rules"
        - "checks"
        - "settings"
        - "credentials"
        - "dictionaries"
        - "patterns"
      connections:
        type: "array"
        description: "Optional list of connection names that were modified and the\
          \ data should be refreshed."
        items:
          type: "string"
      tables:
        type: "array"
        description: "Optional list of full table names (schema.table) that were modified\
          \ and the data should be refreshed."
        items:
          type: "string"
      months:
        type: "array"
        description: "Optional list of dates of the first day of the month (for example:\
          \ '2023-02-01') that were modified and the data should be refreshed."
        items:
          type: "string"
          format: "date"
      partitions:
        type: "array"
        description: "Optional list of partitions that should be loaded from parquet\
          \ files to the native tables in the data warehouse."
        items:
          $ref: "#/definitions/RefreshedPartitionModel"
    description: "Request object for refreshing a native table in the data quality\
      \ data warehouse."
  RefreshedPartitionModel:
    type: "object"
    properties:
      connection:
        type: "string"
        description: "Connection name that should be refreshed."
      schemaTableName:
        type: "string"
        description: "Full table name (schema.table) that should be refreshed."
      month:
        type: "string"
        format: "date"
        description: "The date of the first day of the month that should be refreshed. "
    description: "Identifies a partition that should be refreshed."
  TenantAccessTokenModel:
    type: "object"
    properties:
      accessToken:
        type: "string"
        description: "Google cloud access token."
      tenantId:
        type: "string"
        description: "Tenant (customer) id."
      bucketName:
        type: "string"
        description: "Google Cloud Storage bucket name for the tenant."
      bucketPathPrefix:
        type: "string"
        description: "Object name prefix (path) inside the bucket to store the data."
      expiresAt:
        type: "string"
        description: "Access token expiration time (UTC)."
      billingProjectId:
        type: "string"
        description: "GCP project id holding the data of the tenant."
    description: "Model returned by the DQOps Cloud with an AccessToken for accessing\
      \ a folder within the landing zone of the tenant's data quality data warehouse."
  TenantQueryAccessTokenModel:
    type: "object"
    properties:
      accessToken:
        type: "string"
      tenantId:
        type: "string"
      expiresAt:
        type: "string"
      billingProjectId:
        type: "string"
      dataSetName:
        type: "string"
      sensorReadoutsTableName:
        type: "string"
      checkResultsTableName:
        type: "string"
      errorsTableName:
        type: "string"
      statisticsTableName:
        type: "string"
      incidentsTableName:
        type: "string"
    description: "Model that returns an AccessToken used by Looker Studio to query\
      \ the data warehouse."
  UserLoginTicketGrantingTicketRequest:
    type: "object"
    properties:
      tid:
        type: "string"
        description: "Tenant id."
      tg:
        type: "integer"
        format: "int32"
        description: "Tenant group."
      url:
        type: "string"
        description: "The base return url that is authorized."
      cs:
        type: "string"
        description: "Client secret - a passcode used to sign and verify the token\
          \ by the DQO instance, encoded with Base64 encodig."
