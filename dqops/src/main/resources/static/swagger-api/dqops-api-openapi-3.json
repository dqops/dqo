{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "DQOps",
    "description" : "DQOps REST API",
    "termsOfService" : "https://dqops.com/terms-of-service",
    "contact" : {
      "name" : "DQOps Support",
      "url" : "https://dqops.com/",
      "email" : "support@dqops.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html",
      "extensions" : { }
    },
    "version" : "v1",
    "extensions" : { }
  },
  "servers" : [ {
    "url" : "http://localhost:8888/"
  } ],
  "tags" : [ {
    "name" : "CheckResults",
    "description" : "Returns the complete results of executed checks on tables and columns.",
    "extensions" : { }
  }, {
    "name" : "CheckResultsOverview",
    "description" : "Returns the overview of the recently executed checks on tables and columns.",
    "extensions" : { }
  }, {
    "name" : "Checks",
    "description" : "Data quality check definition management",
    "extensions" : { }
  }, {
    "name" : "Columns",
    "description" : "Manages columns inside a table",
    "extensions" : { }
  }, {
    "name" : "Connections",
    "description" : "Manages connections to monitored data sources",
    "extensions" : { }
  }, {
    "name" : "Dashboards",
    "description" : "Provides access to data quality dashboards",
    "extensions" : { }
  }, {
    "name" : "DataGroupingConfigurations",
    "description" : "Manages data grouping configurations on a table",
    "extensions" : { }
  }, {
    "name" : "DataSources",
    "description" : "Rest API controller that operates on data sources that are not yet imported, testing connections or retrieving the metadata (schemas and tables).",
    "extensions" : { }
  }, {
    "name" : "Defaults",
    "description" : "Default settings management for configuring the default data quality checks that are configured for all imported tables and columns.",
    "extensions" : { }
  }, {
    "name" : "Environment",
    "description" : "DQOps environment and configuration controller, provides access to the DQOps configuration, current user's information and issue local API Keys for the calling user.",
    "extensions" : { }
  }, {
    "name" : "Errors",
    "description" : "Returns the errors related to check executions on tables and columns.",
    "extensions" : { }
  }, {
    "name" : "Healthcheck",
    "description" : "Health check service for checking if the DQOps service is up and operational.",
    "extensions" : { }
  }, {
    "name" : "Incidents",
    "description" : "Data quality incidents controller that supports loading incidents and changing the status of an incident.",
    "extensions" : { }
  }, {
    "name" : "Jobs",
    "description" : "Jobs management controller that supports starting new jobs, such as running selected data quality checks",
    "extensions" : { }
  }, {
    "name" : "LogShipping",
    "description" : "Log shipping controller that accepts logs sent from a web application or external tools and aggregates them in the local DQOps instance logs.",
    "extensions" : { }
  }, {
    "name" : "Rules",
    "description" : "Rule management",
    "extensions" : { }
  }, {
    "name" : "Schemas",
    "description" : "Schema management",
    "extensions" : { }
  }, {
    "name" : "SensorReadouts",
    "description" : "Returns the complete sensor readouts of executed checks on tables and columns.",
    "extensions" : { }
  }, {
    "name" : "Sensors",
    "description" : "Sensors definition management",
    "extensions" : { }
  }, {
    "name" : "SharedCredentials",
    "description" : "Shared credentials management for managing credentials that are stored in the shared .credentials folder in the DQOps user's home folder.",
    "extensions" : { }
  }, {
    "name" : "TableComparisonResults",
    "description" : "Controller that returns the results of the most recent table comparison that was performed between the compared table and the reference table (the source of truth).",
    "extensions" : { }
  }, {
    "name" : "TableComparisons",
    "description" : "Manages the configuration of table comparisons between tables on the same or different data sources",
    "extensions" : { }
  }, {
    "name" : "Tables",
    "description" : "Manages tables inside a connection/schema",
    "extensions" : { }
  }, {
    "name" : "Timezones",
    "description" : "Timezone management",
    "extensions" : { }
  }, {
    "name" : "Users",
    "description" : "User management service",
    "extensions" : { }
  } ],
  "paths" : {
    "api/checks" : {
      "get" : {
        "tags" : [ "Checks" ],
        "summary" : "getAllChecks",
        "description" : "Returns a flat list of all checks available in DQOps, both built-in checks and user defined or customized checks.",
        "operationId" : "getAllChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckDefinitionListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/checks/{fullCheckName}" : {
      "get" : {
        "tags" : [ "Checks" ],
        "summary" : "getCheck",
        "description" : "Returns a check definition",
        "operationId" : "getCheck",
        "parameters" : [ {
          "name" : "fullCheckName",
          "in" : "path",
          "description" : "Full check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckDefinitionModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Checks" ],
        "summary" : "updateCheck",
        "description" : "Updates an existing check, making a custom check definition if it is not present",
        "operationId" : "updateCheck",
        "parameters" : [ {
          "name" : "fullCheckName",
          "in" : "path",
          "description" : "Full check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of check definitions",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckDefinitionModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Checks" ],
        "summary" : "createCheck",
        "description" : "Creates (adds) a new custom check that is a pair of a sensor name and a rule name.",
        "operationId" : "createCheck",
        "parameters" : [ {
          "name" : "fullCheckName",
          "in" : "path",
          "description" : "Full check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Check model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckDefinitionModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Checks" ],
        "summary" : "deleteCheck",
        "description" : "Deletes a custom check definition",
        "operationId" : "deleteCheck",
        "parameters" : [ {
          "name" : "fullCheckName",
          "in" : "path",
          "description" : "Full check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Custom check definition successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getAllConnections",
        "description" : "Returns a list of connections (data sources)",
        "operationId" : "getAllConnections",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ConnectionModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnection",
        "description" : "Return the full details of a connection given the connection name",
        "operationId" : "getConnection",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionSpecificationModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnection",
        "description" : "Updates an existing connection",
        "operationId" : "updateConnection",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Connection specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Connections" ],
        "summary" : "createConnection",
        "description" : "Creates a new connection",
        "operationId" : "createConnection",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Connection specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Connections" ],
        "summary" : "deleteConnection",
        "description" : "Deletes a connection",
        "operationId" : "deleteConnection",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoQueueJobId",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/basic" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionBasic",
        "description" : "Return the basic details of a connection given the connection name",
        "operationId" : "getConnectionBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection basic information returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionBasic",
        "description" : "Updates the basic information of a connection",
        "operationId" : "updateConnectionBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Connection basic details",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Connections" ],
        "summary" : "createConnectionBasic",
        "description" : "Creates a new connection given the basic information.",
        "operationId" : "createConnectionBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Basic connection model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/checks/{checkName}/bulkdisable" : {
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "bulkDisableConnectionChecks",
        "description" : "Disables a named check on this connection in the locations specified by filter",
        "operationId" : "bulkDisableConnectionChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Check search filters and table/column selectors.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkCheckDisableParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/checks/{checkName}/bulkenable" : {
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "bulkEnableConnectionChecks",
        "description" : "Enables a named check on this connection in the locations specified by filter",
        "operationId" : "bulkEnableConnectionChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Check search filters and rules configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AllChecksPatchParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/comments" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionComments",
        "description" : "Return the comments for a connection",
        "operationId" : "getConnectionComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection's comments returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CommentSpec",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionComments",
        "description" : "Updates (replaces) the list of comments of a connection",
        "operationId" : "updateConnectionComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of comments",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "$ref" : "#/components/schemas/CommentSpec",
                  "extensions" : { },
                  "exampleSetFlag" : false
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/commoncolumns" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionCommonColumns",
        "description" : "Finds common column names that are used on one or more tables. The list of columns is sorted in descending order by column name.",
        "operationId" : "getConnectionCommonColumns",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of common columns within a connection returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CommonColumnModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/defaultgroupingconfiguration" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionDefaultGroupingConfiguration",
        "description" : "Return the default data grouping configuration for a connection",
        "operationId" : "getConnectionDefaultGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection's default data grouping configuration returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionDefaultGroupingConfiguration",
        "description" : "Updates the default data grouping connection of a connection",
        "operationId" : "updateConnectionDefaultGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Default data grouping configuration to be assigned to a connection",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/incidentgrouping" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionIncidentGrouping",
        "description" : "Retrieves the configuration of data quality incident grouping and incident notifications",
        "operationId" : "getConnectionIncidentGrouping",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection's incident grouping configuration returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionIncidentGroupingSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionIncidentGrouping",
        "description" : "Updates (replaces) configuration of incident grouping and notifications on a connection (data source) level.",
        "operationId" : "updateConnectionIncidentGrouping",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Incident grouping and notification configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionIncidentGroupingSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/labels" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionLabels",
        "description" : "Return the labels for a connection",
        "operationId" : "getConnectionLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection's labels returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "type" : "string",
                    "extensions" : { },
                    "exampleSetFlag" : false,
                    "types" : [ "string" ]
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionLabels",
        "description" : "Updates the list of labels of a connection",
        "operationId" : "updateConnectionLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of labels",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "type" : "string",
                  "extensions" : { },
                  "exampleSetFlag" : false,
                  "types" : [ "string" ]
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schedules/{schedulingGroup}" : {
      "get" : {
        "tags" : [ "Connections" ],
        "summary" : "getConnectionSchedulingGroup",
        "description" : "Return the schedule for a connection for a scheduling group",
        "operationId" : "getConnectionSchedulingGroup",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection's schedule returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Connections" ],
        "summary" : "updateConnectionSchedulingGroup",
        "description" : "Updates the schedule of a connection for a scheduling group (named schedule for checks with a similar time series configuration)",
        "operationId" : "updateConnectionSchedulingGroup",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Monitoring schedule definition to store",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemas",
        "description" : "Returns a list of schemas inside a connection",
        "operationId" : "getSchemas",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SchemaModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/bulkenable/monitoring/{timeScale}" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaMonitoringChecksTemplates",
        "description" : "Return available data quality checks on a requested schema.",
        "operationId" : "getSchemaMonitoringChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/bulkenable/partitioned/{timeScale}" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaPartitionedChecksTemplates",
        "description" : "Return available data quality checks on a requested schema.",
        "operationId" : "getSchemaPartitionedChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/bulkenable/profiling" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaProfilingChecksTemplates",
        "description" : "Return available data quality checks on a requested schema.",
        "operationId" : "getSchemaProfilingChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/monitoring/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaMonitoringChecksModel",
        "description" : "Return a UI friendly model of configurations for data quality monitoring checks on a schema",
        "operationId" : "getSchemaMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Check time-scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "tableNamePattern",
          "in" : "query",
          "description" : "Table name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of data quality monitoring checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/partitioned/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaPartitionedChecksModel",
        "description" : "Return a UI friendly model of configurations for data quality partitioned checks on a schema",
        "operationId" : "getSchemaPartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Check time-scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "tableNamePattern",
          "in" : "query",
          "description" : "Table name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of data quality partitioned checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/profiling/model" : {
      "get" : {
        "tags" : [ "Schemas" ],
        "summary" : "getSchemaProfilingChecksModel",
        "description" : "Return a flat list of configurations for profiling checks on a schema",
        "operationId" : "getSchemaProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableNamePattern",
          "in" : "query",
          "description" : "Table name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkTarget",
          "in" : "query",
          "description" : "Check target",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of profiling checks configurations on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTables",
        "description" : "Returns a list of tables inside a connection/schema",
        "operationId" : "getTables",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/TableListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTable",
        "description" : "Return the table specification",
        "operationId" : "getTable",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table full specification returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTable",
        "description" : "Updates an existing table specification, changing all the fields",
        "operationId" : "updateTable",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Full table specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Tables" ],
        "summary" : "createTable",
        "description" : "Creates a new table (adds a table metadata)",
        "operationId" : "createTable",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Tables" ],
        "summary" : "deleteTable",
        "description" : "Deletes a table",
        "operationId" : "deleteTable",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoQueueJobId",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/basic" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableBasic",
        "description" : "Return the basic table information",
        "operationId" : "getTableBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table basic information returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableBasic",
        "description" : "Updates the basic field of an existing table, changing only the most important fields.",
        "operationId" : "updateTableBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table basic model with the updated settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableListModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/bulkenable/monitoring/{timeScale}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksTemplates",
        "description" : "Return available data quality checks on a requested table.",
        "operationId" : "getTableMonitoringChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/bulkenable/partitioned/{timeScale}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksTemplates",
        "description" : "Return available data quality checks on a requested table.",
        "operationId" : "getTablePartitionedChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/bulkenable/profiling" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableProfilingChecksTemplates",
        "description" : "Return available data quality checks on a requested table.",
        "operationId" : "getTableProfilingChecksTemplates",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Potential data quality checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckTemplate",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columnchecks/monitoring/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableColumnsMonitoringChecksModel",
        "description" : "Return a UI friendly model of configurations for column-level data quality monitoring checks on a table",
        "operationId" : "getTableColumnsMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Check time-scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of data quality monitoring checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columnchecks/partitioned/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableColumnsPartitionedChecksModel",
        "description" : "Return a UI friendly model of configurations for column-level data quality partitioned checks on a table",
        "operationId" : "getTableColumnsPartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Check time-scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of data quality partitioned checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columnchecks/profiling/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableColumnsProfilingChecksModel",
        "description" : "Return a UI friendly model of configurations for column-level data quality profiling checks on a table",
        "operationId" : "getTableColumnsProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnNamePattern",
          "in" : "query",
          "description" : "Column name pattern",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnDataType",
          "in" : "query",
          "description" : "Column data-type",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "query",
          "description" : "Check category",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkEnabled",
          "in" : "query",
          "description" : "Check enabled",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkConfigured",
          "in" : "query",
          "description" : "Check configured",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of data quality profiling checks on a schema returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumns",
        "description" : "Returns a list of columns inside a table",
        "operationId" : "getColumns",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ColumnListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/statistics" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnsStatistics",
        "description" : "Returns a list of columns inside a table with the metrics captured by the most recent statistics collection.",
        "operationId" : "getColumnsStatistics",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableColumnsStatisticsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumn",
        "description" : "Returns the full column specification",
        "operationId" : "getColumn",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumn",
        "description" : "Updates an existing column specification, changing all the fields (even the column level data quality checks).",
        "operationId" : "updateColumn",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Column specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Columns" ],
        "summary" : "createColumn",
        "description" : "Creates a new column (adds a column metadata to the table)",
        "operationId" : "createColumn",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Column specification",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Columns" ],
        "summary" : "deleteColumn",
        "description" : "Deletes a column from the table",
        "operationId" : "deleteColumn",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoQueueJobId",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/basic" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnBasic",
        "description" : "Returns the column specification",
        "operationId" : "getColumnBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column basic details returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnBasic",
        "description" : "Updates an existing column, changing only the basic information like the expected data type (the data type snapshot).",
        "operationId" : "updateColumnBasic",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Basic column information to store",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnListModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/comments" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnComments",
        "description" : "Return the list of comments assigned to a column",
        "operationId" : "getColumnComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of comments assigned to a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CommentSpec",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnComments",
        "description" : "Updates the list of comments assigned to a column.",
        "operationId" : "updateColumnComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of comments to stored (replaced) on the column or an empty object to clear the list of assigned comments on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "$ref" : "#/components/schemas/CommentSpec",
                  "extensions" : { },
                  "exampleSetFlag" : false
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/labels" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnLabels",
        "description" : "Return the list of labels assigned to a column",
        "operationId" : "getColumnLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of labels assigned to a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "type" : "string",
                    "extensions" : { },
                    "exampleSetFlag" : false,
                    "types" : [ "string" ]
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnLabels",
        "description" : "Updates the list of labels assigned to a column.",
        "operationId" : "updateColumnLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of labels to stored (replaced) on the column or an empty object to clear the list of assigned labels on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "type" : "string",
                  "extensions" : { },
                  "exampleSetFlag" : false,
                  "types" : [ "string" ]
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/daily" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnMonitoringChecksDaily",
        "description" : "Return the configuration of daily column level data quality monitoring on a column",
        "operationId" : "getColumnMonitoringChecksDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of daily column level data quality monitoring on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnDailyMonitoringCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnMonitoringChecksDaily",
        "description" : "Updates configuration of daily column level data quality monitoring on a column.",
        "operationId" : "updateColumnMonitoringChecksDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of daily column level data quality monitoring to configure on a column or an empty object to clear the list of assigned daily data quality monitoring on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnDailyMonitoringCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/monthly" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnMonitoringChecksMonthly",
        "description" : "Return the configuration of monthly column level data quality monitoring on a column",
        "operationId" : "getColumnMonitoringChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of monthly column level data quality monitoring on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnMonthlyMonitoringCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnMonitoringChecksMonthly",
        "description" : "Updates configuration of monthly column level data quality monitoring checks on a column.",
        "operationId" : "updateColumnMonitoringChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of monthly column level data quality monitoring to configure on a column or an empty object to clear the list of assigned monthly data quality monitoring on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnMonthlyMonitoringCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getColumnMonitoringErrors",
        "description" : "Returns errors related to the recent column level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getColumnMonitoringErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of errors for the monitoring at a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnMonitoringChecksModel",
        "description" : "Return a UI friendly model of column level data quality monitoring on a column",
        "operationId" : "getColumnMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality monitoring on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnMonitoringChecksModel",
        "description" : "Updates configuration of column level data quality monitoring on a column, for a given time scale, from a UI friendly model.",
        "operationId" : "updateColumnMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality monitoring configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/model/basic" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnMonitoringChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of column level data quality monitoring on a column",
        "operationId" : "getColumnMonitoringChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Simplistic model of column level data quality monitoring on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnMonitoringChecksModelFilter",
        "description" : "Return a UI friendly model of column level data quality monitoring on a column filtered by category and check name",
        "operationId" : "getColumnMonitoringChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality monitoring on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getColumnMonitoringChecksOverview",
        "description" : "Returns an overview of the most recent column level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getColumnMonitoringChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "An overview of the most recent monitoring executions for the monitoring at a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getColumnMonitoringSensorReadouts",
        "description" : "Returns a complete view of the sensor readouts for recent column level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getColumnMonitoringSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of the sensor readouts of recent monitoring executions for the monitoring at a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/monitoring/{timeScale}/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getColumnMonitoringChecksResults",
        "description" : "Returns a complete view of the recent column level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getColumnMonitoringChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of the recent monitoring executions for the monitoring at a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/daily" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnPartitionedChecksDaily",
        "description" : "Return the configuration of daily column level data quality partitioned checks on a column",
        "operationId" : "getColumnPartitionedChecksDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of daily column level data quality partitioned checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnDailyPartitionedCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnPartitionedChecksDaily",
        "description" : "Updates configuration of daily column level data quality partitioned checks on a column.",
        "operationId" : "updateColumnPartitionedChecksDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of daily column level data quality partitioned checks to configure on a column or an empty object to clear the list of assigned data quality partitioned checks on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnDailyPartitionedCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/monthly" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnPartitionedChecksMonthly",
        "description" : "Return the configuration of monthly column level data quality partitioned checks on a column",
        "operationId" : "getColumnPartitionedChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of monthly column level data quality partitioned checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnMonthlyPartitionedCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnPartitionedChecksMonthly",
        "description" : "Updates configuration of monthly column level data quality partitioned checks on a column.",
        "operationId" : "updateColumnPartitionedChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of monthly column level data quality partitioned checks to configure on a column or an empty object to clear the list of assigned data quality partitioned checks on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnMonthlyPartitionedCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getColumnPartitionedErrors",
        "description" : "Returns the errors related to the recent column level partitioned checks executions for a requested time scale",
        "operationId" : "getColumnPartitionedErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of errors related to the recent partitioned check executions for a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnPartitionedChecksModel",
        "description" : "Return a UI friendly model of column level data quality partitioned checks on a column",
        "operationId" : "getColumnPartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality partitioned checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnPartitionedChecksModel",
        "description" : "Updates configuration of column level data quality partitioned checks on a column, for a given time scale, from a UI friendly model.",
        "operationId" : "updateColumnPartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality partitioned checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/model/basic" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnPartitionedChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of column level data quality partitioned checks on a column",
        "operationId" : "getColumnPartitionedChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Simplistic model of column level data quality partitioned checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnPartitionedChecksModelFilter",
        "description" : "Return a UI friendly model of column level data quality partitioned checks on a column, filtered by category and check name",
        "operationId" : "getColumnPartitionedChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality partitioned checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getColumnPartitionedChecksOverview",
        "description" : "Returns an overview of the most recent column level partitioned checks executions for a requested time scale",
        "operationId" : "getColumnPartitionedChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "An overview of the most recent partitioned check executions for a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getColumnPartitionedSensorReadouts",
        "description" : "Returns a view of the sensor readouts for recent column level partitioned checks executions for a requested time scale",
        "operationId" : "getColumnPartitionedSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of the sensor readouts for recent partitioned check executions for a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/partitioned/{timeScale}/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getColumnPartitionedChecksResults",
        "description" : "Returns an overview of the most recent column level partitioned checks executions for a requested time scale",
        "operationId" : "getColumnPartitionedChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "View of the recent partitioned check executions for a requested time scale on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnProfilingChecks",
        "description" : "Return the configuration of column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnProfilingCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnProfilingChecks",
        "description" : "Updates configuration of column level data quality profiling checks on a column.",
        "operationId" : "updateColumnProfilingChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of column level data quality profiling checks to configure on a column or an empty object to clear the list of assigned data quality profiling checks on the column",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ColumnProfilingCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getColumnProfilingErrors",
        "description" : "Returns the errors related to the recent check executions for all column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Errors related to the most recent check runs for column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/model" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnProfilingChecksModel",
        "description" : "Return a UI friendly model of data quality profiling checks on a column",
        "operationId" : "getColumnProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Columns" ],
        "summary" : "updateColumnProfilingChecksModel",
        "description" : "Updates configuration of column level data quality profiling checks on a column from a UI friendly model.",
        "operationId" : "updateColumnProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality profiling checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/model/basic" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnProfilingChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Simplistic model of column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnProfilingChecksModelFilter",
        "description" : "Return a UI friendly model of data quality profiling checks on a column filtered by category and check name",
        "operationId" : "getColumnProfilingChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Model of column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getColumnProfilingChecksOverview",
        "description" : "Returns an overview of the most recent check executions for all column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Overview of the most recent check runs for column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getColumnProfilingSensorReadouts",
        "description" : "Returns sensor results of the recent check executions for all column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view sensor readouts of recent check runs for column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/profiling/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getColumnProfilingChecksResults",
        "description" : "Returns an overview of the most recent check executions for all column level data quality profiling checks on a column",
        "operationId" : "getColumnProfilingChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view of the most recent check runs for column level data quality profiling checks on a column returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/statistics" : {
      "get" : {
        "tags" : [ "Columns" ],
        "summary" : "getColumnStatistics",
        "description" : "Returns the column specification with the metrics captured by the most recent statistics collection.",
        "operationId" : "getColumnStatistics",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "columnName",
          "in" : "path",
          "description" : "Column name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Column statistics returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ColumnStatisticsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/comments" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableComments",
        "description" : "Return the list of comments added to a table",
        "operationId" : "getTableComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of comments on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CommentSpec",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableComments",
        "description" : "Updates the list of comments on an existing table.",
        "operationId" : "updateTableComments",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of comments to attach (replace) on a table or an empty object to clear the list of comments on a table",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "$ref" : "#/components/schemas/CommentSpec",
                  "extensions" : { },
                  "exampleSetFlag" : false
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/defaultgroupingconfiguration" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableDefaultGroupingConfiguration",
        "description" : "Return the default data grouping configuration for a table.",
        "operationId" : "getTableDefaultGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Default data grouping configuration for a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableDefaultGroupingConfiguration",
        "description" : "Updates the default data grouping configuration at a table level.",
        "operationId" : "updateTableDefaultGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Default data grouping configuration to store or an empty object to clear the data grouping configuration on a table level",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/groupings" : {
      "get" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "getTableGroupingConfigurations",
        "description" : "Returns the list of data grouping configurations on a table",
        "operationId" : "getTableGroupingConfigurations",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/DataGroupingConfigurationListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "post" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "createTableGroupingConfiguration",
        "description" : "Creates a new data grouping configuration on a table level",
        "operationId" : "createTableGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Data grouping configuration simplified model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataGroupingConfigurationTrimmedModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/groupings/setdefault" : {
      "patch" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "setTableDefaultGroupingConfiguration",
        "description" : "Sets a table's grouping configuration as the default or disables data grouping",
        "operationId" : "setTableDefaultGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroupingConfigurationName",
          "in" : "query",
          "description" : "Data grouping configuration name or empty to disable data grouping",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/groupings/{dataGroupingConfigurationName}" : {
      "put" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "updateTableGroupingConfiguration",
        "description" : "Updates a data grouping configuration according to the provided model",
        "operationId" : "updateTableGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroupingConfigurationName",
          "in" : "path",
          "description" : "Data grouping configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Data grouping configuration simplified model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DataGroupingConfigurationTrimmedModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "deleteTableGroupingConfiguration",
        "description" : "Deletes a data grouping configuration from a table",
        "operationId" : "deleteTableGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroupingConfigurationName",
          "in" : "path",
          "description" : "Data grouping configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/groupings/{groupingConfigurationName}" : {
      "get" : {
        "tags" : [ "DataGroupingConfigurations" ],
        "summary" : "getTableGroupingConfiguration",
        "description" : "Returns a model of the data grouping configuration",
        "operationId" : "getTableGroupingConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "groupingConfigurationName",
          "in" : "path",
          "description" : "Data grouping configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataGroupingConfigurationModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/incidentgrouping" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableIncidentGrouping",
        "description" : "Return the configuration of incident grouping on a table",
        "operationId" : "getTableIncidentGrouping",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table's incident grouping configuration returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableIncidentGroupingSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableIncidentGrouping",
        "description" : "Updates the configuration of incident grouping on a table.",
        "operationId" : "updateTableIncidentGrouping",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "New configuration of the table's incident grouping",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableIncidentGroupingSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/labels" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableLabels",
        "description" : "Return the list of labels assigned to a table",
        "operationId" : "getTableLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of labels on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "type" : "string",
                    "extensions" : { },
                    "exampleSetFlag" : false,
                    "types" : [ "string" ]
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableLabels",
        "description" : "Updates the list of assigned labels of an existing table.",
        "operationId" : "updateTableLabels",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of labels to attach (replace) on a table or an empty object to clear the list of labels on a table",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "exampleSetFlag" : false,
                "items" : {
                  "type" : "string",
                  "extensions" : { },
                  "exampleSetFlag" : false,
                  "types" : [ "string" ]
                },
                "types" : [ "array" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/daily" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksDaily",
        "description" : "Return the configuration of daily table level data quality monitoring on a table",
        "operationId" : "getTableDailyMonitoringChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of daily table level data quality monitoring on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableDailyMonitoringCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableMonitoringChecksDaily",
        "description" : "Updates the list of daily table level data quality monitoring on an existing table.",
        "operationId" : "updateTableDailyMonitoringChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of daily table level data quality monitoring to store or an empty object to remove all data quality monitoring on the table level (column level monitoring are preserved).",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableDailyMonitoringCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/monthly" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksMonthly",
        "description" : "Return the configuration of monthly table level data quality monitoring on a table",
        "operationId" : "getTableMonitoringChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of monthly table level data quality monitoring on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableMonthlyMonitoringCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableMonitoringChecksMonthly",
        "description" : "Updates the list of monthly table level data quality monitoring on an existing table.",
        "operationId" : "updateTableMonitoringChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of monthly table level data quality monitoring to store or an empty object to remove all data quality monitoring on the table level (column level monitoring are preserved).",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableMonthlyMonitoringCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/comparisons/{tableComparisonConfigurationName}/results" : {
      "get" : {
        "tags" : [ "TableComparisonResults" ],
        "summary" : "getTableComparisonMonitoringResults",
        "description" : "Retrieves the results of the most table comparison performed using the monitoring comparison checks.",
        "operationId" : "getTableComparisonMonitoringResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The results of the most recent table comparison using the monitoring checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonResultsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getTableMonitoringErrors",
        "description" : "Returns the errors related to the most recent table level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getTableMonitoringErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Errors related to the most recent monitoring executions for the monitoring at a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksModel",
        "description" : "Return a UI friendly model of configurations for table level data quality monitoring on a table for a given time scale",
        "operationId" : "getTableMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level {timeScale} data quality monitoring on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableMonitoringChecksModel",
        "description" : "Updates the data quality monitoring from a model that contains a patch with changes.",
        "operationId" : "updateTableMonitoringChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality monitoring configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/model/basic" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of table level data quality monitoring on a table for a given time scale",
        "operationId" : "getTableMonitoringChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table level {timeScale} data quality monitoring on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableMonitoringChecksModelFilter",
        "description" : "Return a UI friendly model of configurations for table level data quality monitoring on a table for a given time scale, filtered by category and check name.",
        "operationId" : "getTableMonitoringChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level {timeScale} data quality monitoring on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getTableMonitoringChecksOverview",
        "description" : "Returns an overview of the most recent table level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getTableMonitoringChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "An overview of the most recent monitoring executions for the monitoring at a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getTableMonitoringSensorReadouts",
        "description" : "Returns the complete results of the most recent table level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getTableMonitoringSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view of the most recent monitoring executions for the monitoring at a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/monitoring/{timeScale}/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getTableMonitoringChecksResults",
        "description" : "Returns the complete results of the most recent table level monitoring executions for the monitoring at a requested time scale",
        "operationId" : "getTableMonitoringChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view of the most recent monitoring executions for the monitoring at a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/daily" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksDaily",
        "description" : "Return the configuration of daily table level data quality partitioned checks on a table",
        "operationId" : "getTableDailyPartitionedChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level data quality partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableDailyPartitionedCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTablePartitionedChecksDaily",
        "description" : "Updates the list of daily table level data quality partitioned checks on an existing table.",
        "operationId" : "updateTablePartitionedChecksDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of daily table level data quality partitioned checks to store or an empty object to remove all data quality partitioned checks on the table level (column level partitioned checks are preserved).",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableDailyPartitionedCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/monthly" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksMonthly",
        "description" : "Return the configuration of monthly table level data quality partitioned checks on a table",
        "operationId" : "getTablePartitionedChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level data quality partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableMonthlyPartitionedCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTablePartitionedChecksMonthly",
        "description" : "Updates the list of monthly table level data quality partitioned checks on an existing table.",
        "operationId" : "updateTablePartitionedChecksMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of monthly table level data quality partitioned checks to store or an empty object to remove all data quality partitioned checks on the table level (column level partitioned checks are preserved).",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableMonthlyPartitionedCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/comparisons/{tableComparisonConfigurationName}/results" : {
      "get" : {
        "tags" : [ "TableComparisonResults" ],
        "summary" : "getTableComparisonPartitionedResults",
        "description" : "Retrieves the results of the most table comparison performed using the partitioned comparison checks, comparing days or months of data.",
        "operationId" : "getTableComparisonPartitionedResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The results of the most recent table comparison using the partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonResultsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getTablePartitionedErrors",
        "description" : "Returns errors related to the recent table level partitioned checks executions for a requested time scale",
        "operationId" : "getTablePartitionedErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The errors related to partitioned check executions for a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksModel",
        "description" : "Return a UI friendly model of configurations for table level data quality partitioned checks on a table for a given time scale",
        "operationId" : "getTablePartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level {timeScale} data quality partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTablePartitionedChecksModel",
        "description" : "Updates the data quality partitioned checks from a model that contains a patch with changes.",
        "operationId" : "updateTablePartitionedChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality partitioned checks configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoObject",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/model/basic" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of table level data quality partitioned checks on a table for a given time scale",
        "operationId" : "getTablePartitionedChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table level {timeScale} data quality partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitionedChecksModelFilter",
        "description" : "Return a UI friendly model of configurations for table level data quality partitioned checks on a table for a given time scale, filtered by category and check name.",
        "operationId" : "getTablePartitionedChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level {timeScale} data quality partitioned checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getTablePartitionedChecksOverview",
        "description" : "Returns an overview of the most recent table level partitioned checks executions for a requested time scale",
        "operationId" : "getTablePartitionedChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "An overview of the most recent partitioned check executions for a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getTablePartitionedSensorReadouts",
        "description" : "Returns a complete view of sensor readouts for recent table level partitioned checks executions for a requested time scale",
        "operationId" : "getTablePartitionedSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The complete view of the sensor readouts for recent partitioned check executions for a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioned/{timeScale}/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getTablePartitionedChecksResults",
        "description" : "Returns a complete view of the recent table level partitioned checks executions for a requested time scale",
        "operationId" : "getTablePartitionedChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "timeScale",
          "in" : "path",
          "description" : "Time scale",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The complete view of the most recent partitioned check executions for a requested time scale on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/partitioning" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTablePartitioning",
        "description" : "Return the table partitioning information",
        "operationId" : "getTablePartitioning",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Table partitioning information returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TablePartitioningModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTablePartitioning",
        "description" : "Updates the table partitioning configuration of an existing table.",
        "operationId" : "updateTablePartitioning",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table partitioning model with the updated settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TablePartitioningModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableProfilingChecks",
        "description" : "Return the configuration of table level data quality checks on a table",
        "operationId" : "getTableProfilingChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level data quality checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableProfilingCheckCategoriesSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableProfilingChecks",
        "description" : "Updates the list of table level data quality profiling checks on an existing table.",
        "operationId" : "updateTableProfilingChecks",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Configuration of table level data quality profiling checks to store or an empty object to remove all data quality profiling checks on the table level (column level profiling checks are preserved).",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableProfilingCheckCategoriesSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/comparisons/{tableComparisonConfigurationName}/results" : {
      "get" : {
        "tags" : [ "TableComparisonResults" ],
        "summary" : "getTableComparisonProfilingResults",
        "description" : "Retrieves the results of the most table comparison performed using the profiling checks comparison checks.",
        "operationId" : "getTableComparisonProfilingResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The results of the most recent table comparison using the profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonResultsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/errors" : {
      "get" : {
        "tags" : [ "Errors" ],
        "summary" : "getTableProfilingErrors",
        "description" : "Returns the errors related to the most recent check executions for all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingErrors",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Errors related to the most recent check runs for table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/ErrorsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/model" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableProfilingChecksModel",
        "description" : "Return a UI friendly model of configurations for all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableProfilingChecksModel",
        "description" : "Updates the data quality profiling checks from a model that contains a patch with changes.",
        "operationId" : "updateTableProfilingChecksModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality profiling checks configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/model/basic" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableProfilingChecksBasicModel",
        "description" : "Return a simplistic UI friendly model of all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingChecksBasicModel",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerListModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/model/filter/{checkCategory}/{checkName}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableProfilingChecksModelFilter",
        "description" : "Return a UI friendly model of configurations for all table level data quality profiling checks on a table passing a filter",
        "operationId" : "getTableProfilingChecksModelFilter",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkCategory",
          "in" : "path",
          "description" : "Check category",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "path",
          "description" : "Check name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Configuration of table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/overview" : {
      "get" : {
        "tags" : [ "CheckResultsOverview" ],
        "summary" : "getTableProfilingChecksOverview",
        "description" : "Returns an overview of the most recent check executions for all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingChecksOverview",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Overview of the most recent check runs for table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsOverviewDataModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/readouts" : {
      "get" : {
        "tags" : [ "SensorReadouts" ],
        "summary" : "getTableProfilingSensorReadouts",
        "description" : "Returns the complete results of the most recent check executions for all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingSensorReadouts",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view sensor readouts of recent check runs for table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorReadoutsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/profiling/results" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getTableProfilingChecksResults",
        "description" : "Returns the complete results of the most recent check executions for all table level data quality profiling checks on a table",
        "operationId" : "getTableProfilingChecksResults",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthStart",
          "in" : "query",
          "description" : "Month start boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "monthEnd",
          "in" : "query",
          "description" : "Month end boundary",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "maxResultsPerCheck",
          "in" : "query",
          "description" : "Maximum number of results per check, the default is 100",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Complete view of the most recent check runs for table level data quality profiling checks on a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultsListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/schedulesoverride/{schedulingGroup}" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableSchedulingGroupOverride",
        "description" : "Return the schedule override configuration for a table",
        "operationId" : "getTableSchedulingGroupOverride",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Overridden schedule configuration for a table returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Tables" ],
        "summary" : "updateTableSchedulingGroupOverride",
        "description" : "Updates the overridden schedule configuration of an existing table for a named schedule group (named schedule for checks using the same time scale).",
        "operationId" : "updateTableSchedulingGroupOverride",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table's overridden schedule configuration to store or an empty object to clear the schedule configuration on a table",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/statistics" : {
      "get" : {
        "tags" : [ "Tables" ],
        "summary" : "getTableStatistics",
        "description" : "Returns a list of the profiler (statistics) metrics on a chosen table captured during the most recent statistics collection.",
        "operationId" : "getTableStatistics",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableStatisticsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/status" : {
      "get" : {
        "tags" : [ "CheckResults" ],
        "summary" : "getTableDataQualityStatus",
        "description" : "Read the most recent results of executed data quality checks on the table and return the current table's data quality status - the number of failed data quality checks if the table has active data quality issues. Also returns the names of data quality checks that did not pass most recently. This operation verifies only the status of the most recently executed data quality checks. Previous data quality issues are not counted.",
        "operationId" : "getTableDataQualityStatus",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "months",
          "in" : "query",
          "description" : "Optional filter - the number of months to review the data quality check results. For partitioned checks, it is the number of months to analyze. The default value is 1 (which is the current month and 1 previous month).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Optional filter that accepts an UTC timestamp to read only data quality check results captured since that timestamp.",
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "profiling",
          "in" : "query",
          "description" : "Optional check type filter to detect the current status of the profiling checks results. The default value is false, excluding profiling checks from the current table status detection. If enabled, only the status of the most recent check result is retrieved.",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "monitoring",
          "in" : "query",
          "description" : "Optional check type filter to detect the current status of the monitoring checks results. The default value is true, including monitoring checks in the current table status detection. If enabled, only the status of the most recent check result is retrieved.",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "partitioned",
          "in" : "query",
          "description" : "Optional check type filter to detect the current status of the partitioned checks results. The default value is true, including partitioned checks in the current table status detection. Detection of the status of partitioned checks is different. When enabled, DQOps checks the highest severity status of all partitions since the **since** date or within the last **months**.",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkTimeScale",
          "in" : "query",
          "description" : "Optional time scale filter for monitoring and partitioned checks (values: daily or monthly).",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "dataGroup",
          "in" : "query",
          "description" : "Optional data group",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkName",
          "in" : "query",
          "description" : "Optional check name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Optional check category name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparison",
          "in" : "query",
          "description" : "Optional table comparison name",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "qualityDimension",
          "in" : "query",
          "description" : "Optional data quality dimension",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The most recent data quality status of the requested table",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableCurrentDataQualityStatusModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisonconfigurations" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonConfigurations",
        "description" : "Returns the list of table comparison configurations on a compared table",
        "operationId" : "getTableComparisonConfigurations",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "checkType",
          "in" : "query",
          "description" : "Optional check type filter (profiling, monitoring, partitioned).",
          "schema" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "checkTimeScale",
          "in" : "query",
          "description" : "Optional time scale filter for table comparisons specific to the monitoring and partitioned checks (values: daily or monthly).",
          "schema" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/TableComparisonConfigurationModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonConfiguration",
        "description" : "Creates a new table comparison configuration added to the compared table",
        "operationId" : "createTableComparisonConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonConfigurationModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisonconfigurations/{tableComparisonConfigurationName}" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonConfiguration",
        "description" : "Returns a model of the table comparison configuration",
        "operationId" : "getTableComparisonConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Reference table configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonConfigurationModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonConfiguration",
        "description" : "Updates a table configuration configuration",
        "operationId" : "updateTableComparisonConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison model with the configuration of the tables to compare",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonConfigurationModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "deleteTableComparisonConfiguration",
        "description" : "Deletes a table comparison configuration from a compared table",
        "operationId" : "deleteTableComparisonConfiguration",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Reference table configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/monitoring/daily" : {
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonMonitoringDaily",
        "description" : "Creates a table comparison configuration using daily monitoring checks",
        "operationId" : "createTableComparisonMonitoringDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/monitoring/daily/{tableComparisonConfigurationName}" : {
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonMonitoringDaily",
        "description" : "Updates a table comparison checks monitoring daily",
        "operationId" : "updateTableComparisonMonitoringDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/monitoring/monthly" : {
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonMonitoringMonthly",
        "description" : "Creates a table comparison configuration using monthly monitoring checks",
        "operationId" : "createTableComparisonMonitoringMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/monitoring/monthly/{tableComparisonConfigurationName}" : {
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonMonitoringMonthly",
        "description" : "Updates a table comparison checks monitoring monthly",
        "operationId" : "updateTableComparisonMonitoringMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/partitioned/daily" : {
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonPartitionedDaily",
        "description" : "Creates a table comparison configuration using daily partitioned checks",
        "operationId" : "createTableComparisonPartitionedDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/partitioned/daily/{tableComparisonConfigurationName}" : {
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonPartitionedDaily",
        "description" : "Updates a table comparison checks partitioned daily (comparing day to day)",
        "operationId" : "updateTableComparisonPartitionedDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/partitioned/monthly" : {
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonPartitionedMonthly",
        "description" : "Creates a table comparison configuration using monthly partitioned checks",
        "operationId" : "createTableComparisonPartitionedMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/partitioned/monthly/{tableComparisonConfigurationName}" : {
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonPartitionedMonthly",
        "description" : "Updates a table comparison checks partitioned monthly (comparing month to month)",
        "operationId" : "updateTableComparisonPartitionedMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/profiling" : {
      "post" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "createTableComparisonProfiling",
        "description" : "Creates a table comparison configuration using profiling checks",
        "operationId" : "createTableComparisonProfiling",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/profiling/{tableComparisonConfigurationName}" : {
      "put" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "updateTableComparisonProfiling",
        "description" : "Updates a table comparison profiling checks",
        "operationId" : "updateTableComparisonProfiling",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Table comparison configuration model with the selected checks to use for comparison",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TableComparisonModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/{tableComparisonConfigurationName}/monitoring/daily" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonMonitoringDaily",
        "description" : "Returns a model of the table comparison using daily monitoring checks (comparison once a day)",
        "operationId" : "getTableComparisonMonitoringDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/{tableComparisonConfigurationName}/monitoring/monthly" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonMonitoringMonthly",
        "description" : "Returns a model of the table comparison using monthly monitoring checks (comparison once a month)",
        "operationId" : "getTableComparisonMonitoringMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/{tableComparisonConfigurationName}/partitioned/daily" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonPartitionedDaily",
        "description" : "Returns a model of the table comparison using daily partition checks (comparing day to day)",
        "operationId" : "getTableComparisonPartitionedDaily",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/{tableComparisonConfigurationName}/partitioned/monthly" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonPartitionedMonthly",
        "description" : "Returns a model of the table comparison using monthly partition checks (comparing month to month)",
        "operationId" : "getTableComparisonPartitionedMonthly",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/connections/{connectionName}/schemas/{schemaName}/tables/{tableName}/tablecomparisons/{tableComparisonConfigurationName}/profiling" : {
      "get" : {
        "tags" : [ "TableComparisons" ],
        "summary" : "getTableComparisonProfiling",
        "description" : "Returns a model of the table comparison using profiling checks (comparison at any time)",
        "operationId" : "getTableComparisonProfiling",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableName",
          "in" : "path",
          "description" : "Table name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "tableComparisonConfigurationName",
          "in" : "path",
          "description" : "Table comparison configuration name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableComparisonModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/credential/{credentialName}" : {
      "put" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "updateSharedCredential",
        "description" : "Updates an existing shared credential, replacing the credential's file content.",
        "operationId" : "updateSharedCredential",
        "parameters" : [ {
          "name" : "credentialName",
          "in" : "path",
          "description" : "Credential file name that will be updated",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Shared credential model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SharedCredentialModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/credentials" : {
      "get" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "getAllSharedCredentials",
        "description" : "Returns a list of all shared credentials that are present in the DQOps user's home .credentials/ folder..",
        "operationId" : "getAllSharedCredentials",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SharedCredentialListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "post" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "createSharedCredential",
        "description" : "Creates (adds) a new shared credential, which creates a file in the DQOps user's home .credentials/ folder named as the credential and with the content that is provided in this call.",
        "operationId" : "createSharedCredential",
        "requestBody" : {
          "description" : "Shared credential model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SharedCredentialModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/credentials/{credentialName}" : {
      "get" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "getSharedCredential",
        "description" : "Returns a shared credential content",
        "operationId" : "getSharedCredential",
        "parameters" : [ {
          "name" : "credentialName",
          "in" : "path",
          "description" : "Shared credential file name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SharedCredentialModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "delete" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "deleteSharedCredential",
        "description" : "Deletes a shared credential file from the DQOps user's home .credentials/ folder.",
        "operationId" : "deleteSharedCredential",
        "parameters" : [ {
          "name" : "credentialName",
          "in" : "path",
          "description" : "Full shared credential name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Shared credential file successfully deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/credentials/{credentialName}/download" : {
      "get" : {
        "tags" : [ "SharedCredentials" ],
        "summary" : "downloadSharedCredential",
        "description" : "Downloads a shared credential's file",
        "operationId" : "downloadSharedCredential",
        "parameters" : [ {
          "name" : "credentialName",
          "in" : "path",
          "description" : "Shared credential file name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "pattern" : "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                    "type" : "string",
                    "format" : "byte",
                    "extensions" : { },
                    "exampleSetFlag" : false,
                    "types" : [ "string" ]
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getAllDashboards",
        "description" : "Returns a list of root folders with dashboards",
        "operationId" : "getAllDashboards",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/DashboardsFolderSpec",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards/{folder1}/{folder2}/{dashboardName}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getDashboardLevel2",
        "description" : "Returns a single dashboard in the tree of folders with a temporary authenticated url",
        "operationId" : "getDashboardLevel2",
        "parameters" : [ {
          "name" : "folder1",
          "in" : "path",
          "description" : "Root folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder2",
          "in" : "path",
          "description" : "Second level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dashboardName",
          "in" : "path",
          "description" : "Dashboard name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "windowLocationOrigin",
          "in" : "query",
          "description" : "Optional url of the DQOps instance, it should be the value of window.location.origin.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedDashboardModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards/{folder1}/{folder2}/{folder3}/{dashboardName}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getDashboardLevel3",
        "description" : "Returns a single dashboard in the tree of folders with a temporary authenticated url",
        "operationId" : "getDashboardLevel3",
        "parameters" : [ {
          "name" : "folder1",
          "in" : "path",
          "description" : "Root folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder2",
          "in" : "path",
          "description" : "Second level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder3",
          "in" : "path",
          "description" : "Third level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dashboardName",
          "in" : "path",
          "description" : "Dashboard name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "windowLocationOrigin",
          "in" : "query",
          "description" : "Optional url of the DQOps instance, it should be the value of window.location.origin.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedDashboardModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards/{folder1}/{folder2}/{folder3}/{folder4}/{dashboardName}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getDashboardLevel4",
        "description" : "Returns a single dashboard in the tree of folders with a temporary authenticated url",
        "operationId" : "getDashboardLevel4",
        "parameters" : [ {
          "name" : "folder1",
          "in" : "path",
          "description" : "Root folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder2",
          "in" : "path",
          "description" : "Second level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder3",
          "in" : "path",
          "description" : "Third level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder4",
          "in" : "path",
          "description" : "Fourth level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dashboardName",
          "in" : "path",
          "description" : "Dashboard name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "windowLocationOrigin",
          "in" : "query",
          "description" : "Optional url of the DQOps instance, it should be the value of window.location.origin.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedDashboardModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards/{folder1}/{folder2}/{folder3}/{folder4}/{folder5}/{dashboardName}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getDashboardLevel5",
        "description" : "Returns a single dashboard in the tree of folders with a temporary authenticated url",
        "operationId" : "getDashboardLevel5",
        "parameters" : [ {
          "name" : "folder1",
          "in" : "path",
          "description" : "Root folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder2",
          "in" : "path",
          "description" : "Second level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder3",
          "in" : "path",
          "description" : "Third level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder4",
          "in" : "path",
          "description" : "Fourth level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "folder5",
          "in" : "path",
          "description" : "Fifth level folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dashboardName",
          "in" : "path",
          "description" : "Dashboard name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "windowLocationOrigin",
          "in" : "query",
          "description" : "Optional url of the DQOps instance, it should be the value of window.location.origin.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedDashboardModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/dashboards/{folder}/{dashboardName}" : {
      "get" : {
        "tags" : [ "Dashboards" ],
        "summary" : "getDashboardLevel1",
        "description" : "Returns a single dashboard in the tree of folder with a temporary authenticated url",
        "operationId" : "getDashboardLevel1",
        "parameters" : [ {
          "name" : "folder",
          "in" : "path",
          "description" : "Root folder name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "dashboardName",
          "in" : "path",
          "description" : "Dashboard name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "windowLocationOrigin",
          "in" : "query",
          "description" : "Optional url of the DQOps instance, it should be the value of window.location.origin.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Dashboard returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedDashboardModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/datasource/connections/{connectionName}/schemas" : {
      "get" : {
        "tags" : [ "DataSources" ],
        "summary" : "getRemoteDataSourceSchemas",
        "description" : "Introspects a list of schemas inside a remote data source, identified by an already imported connection.",
        "operationId" : "getRemoteDataSourceSchemas",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of schemas on a remote data source was introspected and is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SchemaRemoteModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/datasource/connections/{connectionName}/schemas/{schemaName}/tables" : {
      "get" : {
        "tags" : [ "DataSources" ],
        "summary" : "getRemoteDataSourceTables",
        "description" : "Introspects the list of columns inside a schema on a remote data source that is identified by a connection that was added to DQOps.",
        "operationId" : "getRemoteDataSourceTables",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "schemaName",
          "in" : "path",
          "description" : "Schema name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of tables on a remote data source was introspected and is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RemoteTableListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/datasource/testconnection" : {
      "post" : {
        "tags" : [ "DataSources" ],
        "summary" : "testConnection",
        "description" : "Checks if the given remote connection could be opened and the credentials are valid",
        "operationId" : "testConnection",
        "parameters" : [ {
          "name" : "verifyNameUniqueness",
          "in" : "query",
          "description" : "Verify if the connection name is unique, the default value is true",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Basic connection model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectionModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "Connection was tested, check the status code to see the connection's test status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionTestModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/dataobservability/monitoring/daily/column" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultDataObservabilityDailyMonitoringColumnChecks",
        "description" : "Returns UI model to show and edit the default configuration of the daily monitoring (Data Observability and monitoring) checks that are configured for all imported columns on a column level.",
        "operationId" : "getDefaultDataObservabilityDailyMonitoringColumnChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultDataObservabilityDailyMonitoringColumnChecks",
        "description" : "New configuration of the default daily monitoring (data observability) checks on a column level. These checks will be applied on new columns.",
        "operationId" : "updateDefaultDataObservabilityDailyMonitoringColumnChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the default configuration of the data observability daily monitoring checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/dataobservability/monitoring/daily/table" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultDataObservabilityDailyMonitoringTableChecks",
        "description" : "Returns UI model to show and edit the default configuration of the daily monitoring (Data Observability and monitoring) checks that are configured for all imported tables on a table level.",
        "operationId" : "getDefaultDataObservabilityDailyMonitoringTableChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultDataObservabilityDailyMonitoringTableChecks",
        "description" : "New configuration of the default daily monitoring (data observability) checks on a table level. These checks will be applied on new tables.",
        "operationId" : "updateDefaultDataObservabilityDailyMonitoringTableChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the default configuration of the data observability daily monitoring checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/dataobservability/monitoring/monthly/column" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultDataObservabilityMonthlyMonitoringColumnChecks",
        "description" : "Returns UI model to show and edit the default configuration of the monthly monitoring (Data Observability end of month scores) checks that are configured for all imported columns on a column level.",
        "operationId" : "getDefaultDataObservabilityMonthlyMonitoringColumnChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultDataObservabilityMonthlyMonitoringColumnChecks",
        "description" : "New configuration of the default monthly monitoring checkpoints on a column level. These checks will be applied on new columns.",
        "operationId" : "updateDefaultDataObservabilityMonthlyMonitoringColumnChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the default configuration of the data observability monthly monitoring checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/dataobservability/monitoring/monthly/table" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultDataObservabilityMonthlyMonitoringTableChecks",
        "description" : "Returns UI model to show and edit the default configuration of the monthly monitoring (Data Observability end of month scores) checks that are configured for all imported tables on a table level.",
        "operationId" : "getDefaultDataObservabilityMonthlyMonitoringTableChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultDataObservabilityMonthlyMonitoringTableChecks",
        "description" : "New configuration of the default monthly monitoring checkpoints on a table level. These checks will be applied on new tables.",
        "operationId" : "updateDefaultDataObservabilityMonthlyMonitoringTableChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the default configuration of the data observability monthly monitoring checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/profiling/column" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultProfilingColumnChecks",
        "description" : "Returns UI model to show and edit the default configuration of the profiling checks that are configured for all imported column on a column level.",
        "operationId" : "getDefaultProfilingColumnChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultProfilingColumnChecks",
        "description" : "New configuration of the default profiling checks on a column level. These checks will be applied to new columns.",
        "operationId" : "updateDefaultProfilingColumnChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality profiling checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultchecks/profiling/table" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultProfilingTableChecks",
        "description" : "Returns UI model to show and edit the default configuration of the profiling checks that are configured for all imported tables on a table level.",
        "operationId" : "getDefaultProfilingTableChecks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckContainerModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultProfilingTableChecks",
        "description" : "New configuration of the default profiling checks on a table level. These checks will be applied to new tables.",
        "operationId" : "updateDefaultProfilingTableChecks",
        "requestBody" : {
          "description" : "Model with the changes to be applied to the data quality profiling checks configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CheckContainerModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultschedule/{schedulingGroup}" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultSchedules",
        "description" : "Returns spec to show and edit the default configuration of schedules.",
        "operationId" : "getDefaultSchedule",
        "parameters" : [ {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultSchedules",
        "description" : "New configuration of the default schedules.",
        "operationId" : "updateDefaultSchedules",
        "parameters" : [ {
          "name" : "schedulingGroup",
          "in" : "path",
          "description" : "Check scheduling group (named schedule)",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Spec with default schedules changes to be applied to the default configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MonitoringScheduleSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/defaults/defaultwebhooks" : {
      "get" : {
        "tags" : [ "Defaults" ],
        "summary" : "getDefaultWebhooks",
        "description" : "Returns spec to show and edit the default configuration of webhooks.",
        "operationId" : "getDefaultWebhooks",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentWebhookNotificationsSpec",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Defaults" ],
        "summary" : "updateDefaultWebhooks",
        "description" : "New configuration of the default webhooks.",
        "operationId" : "updateDefaultWebhooks",
        "requestBody" : {
          "description" : "Spec with default notification webhooks changes to be applied to the default configuration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IncidentWebhookNotificationsSpec",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/definitions/checks" : {
      "get" : {
        "tags" : [ "Checks" ],
        "summary" : "getCheckFolderTree",
        "description" : "Returns a tree of all checks available in DQOps, both built-in checks and user defined or customized checks.",
        "operationId" : "getCheckFolderTree",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CheckDefinitionFolderModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/definitions/rules" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "getRuleFolderTree",
        "description" : "Returns a tree of all rules available in DQOps, both built-in rules and user defined or customized rules.",
        "operationId" : "getRuleFolderTree",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleFolderModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/definitions/sensors" : {
      "get" : {
        "tags" : [ "Sensors" ],
        "summary" : "getSensorFolderTree",
        "description" : "Returns a tree of all sensors available in DQOps, both built-in sensors and user defined or customized sensors.",
        "operationId" : "getSensorFolderTree",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorFolderModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/environment/issueapikey" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "issueApiKey",
        "description" : "Issues a local API Key for the calling user. This API Key could be used to authenticate using the DQOps REST API client. This API Key should be passed in the \"Authorization\" HTTP header in the format \"Authorization: Bearer <api_key>\".",
        "operationId" : "issueApiKey",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "exampleSetFlag" : false,
                  "types" : [ "string" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/environment/profile" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "getUserProfile",
        "description" : "Returns the profile of the current user.",
        "operationId" : "getUserProfile",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoUserProfileModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/environment/settings" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "getDqoSettings",
        "description" : "Returns all effective DQOps configuration settings.",
        "operationId" : "getDqoSettings",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoSettingsModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "findRecentIncidentsOnConnection",
        "description" : "Returns a list of recent data quality incidents.",
        "operationId" : "findRecentIncidentsOnConnection",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "months",
          "in" : "query",
          "description" : "Number of recent months to load, the default is 3 months",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "open",
          "in" : "query",
          "description" : "Returns open incidents, when the parameter is missing, the default value is true",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "acknowledged",
          "in" : "query",
          "description" : "Returns acknowledged incidents, when the parameter is missing, the default value is true",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "resolved",
          "in" : "query",
          "description" : "Returns resolved incidents, when the parameter is missing, the default value is false",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "muted",
          "in" : "query",
          "description" : "Returns muted incidents, when the parameter is missing, the default value is false",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number, the first page is 1",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Page size, the default is 50 rows",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Optional full text search filter that supports *prefix, suffix* and nest*ed filter expressions",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Optional sort order, the default sort order is by the number of failed data quality checks",
          "schema" : {
            "$ref" : "#/components/schemas/IncidentSortOrder",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Optional sort direction, the default sort direction is ascending",
          "schema" : {
            "$ref" : "#/components/schemas/SortDirection",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/IncidentModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}/{year}/{month}/{incidentId}" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "getIncident",
        "description" : "Return a single data quality incident's details.",
        "operationId" : "getIncident",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "year",
          "in" : "path",
          "description" : "Year when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "Month when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Incident returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}/{year}/{month}/{incidentId}/histogram" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "getIncidentHistogram",
        "description" : "Generates histograms of data quality issues for each day, returning the number of data quality issues on that day. The other histograms are by a column name and by a check name.",
        "operationId" : "getIncidentHistogram",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "year",
          "in" : "path",
          "description" : "Year when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "Month when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Optional full text search filter that supports *prefix, suffix* and nest*ed filter expressions",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "Optional filter for a number of recent days to read the related issues",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Optional date filter",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Optional column name filter",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "check",
          "in" : "query",
          "description" : "Optional check name filter",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Incidents' histograms returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentIssueHistogramModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}/{year}/{month}/{incidentId}/issues" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "getIncidentIssues",
        "description" : "Return a paged list of failed data quality check results that are related to an incident.",
        "operationId" : "getIncidentIssues",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "year",
          "in" : "path",
          "description" : "Year when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "Month when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number, the first page is 1",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Page size, the default is 50 rows",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Optional filter",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "Optional filter for a number of recent days to read the related issues",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Optional filter to return data quality issues only for a given date. The date should be an ISO8601 formatted date, it is treated as the timezone of the DQOps server.",
          "schema" : {
            "type" : "string",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "column",
          "in" : "query",
          "description" : "Optional column name filter",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "check",
          "in" : "query",
          "description" : "Optional check name filter",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Optional sort order, the default sort order is by the execution date",
          "schema" : {
            "$ref" : "#/components/schemas/CheckResultSortOrder",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Optional sort direction, the default sort direction is ascending",
          "schema" : {
            "$ref" : "#/components/schemas/SortDirection",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Incident returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/CheckResultEntryModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}/{year}/{month}/{incidentId}/issueurl" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "setIncidentIssueUrl",
        "description" : "Changes the incident's issueUrl to a new status.",
        "operationId" : "setIncidentIssueUrl",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "year",
          "in" : "path",
          "description" : "Year when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "Month when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "issueUrl",
          "in" : "query",
          "description" : "New incident's issueUrl",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidents/{connectionName}/{year}/{month}/{incidentId}/status" : {
      "post" : {
        "tags" : [ "Incidents" ],
        "summary" : "setIncidentStatus",
        "description" : "Changes the incident's status to a new status.",
        "operationId" : "setIncidentStatus",
        "parameters" : [ {
          "name" : "connectionName",
          "in" : "path",
          "description" : "Connection name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "year",
          "in" : "path",
          "description" : "Year when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "Month when the incident was first seen",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        }, {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "New incident status, supported values: open, acknowledged, resolved, muted",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/IncidentStatus",
            "exampleSetFlag" : false
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/incidentstat" : {
      "get" : {
        "tags" : [ "Incidents" ],
        "summary" : "findConnectionIncidentStats",
        "description" : "Returns a list of connection names with incident statistics - the count of recent open incidents.",
        "operationId" : "findConnectionIncidentStats",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/IncidentsPerConnectionModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/ishealthy" : {
      "get" : {
        "tags" : [ "Healthcheck" ],
        "summary" : "isHealthy",
        "description" : "Checks if the DQOps instance is healthy and operational. Returns a text \"OK\" and a HTTP status code 200 when the service is active and can accept jobs,  or returns a text \"UNAVAILABLE\" and a HTTP status code 503 when the service is still starting or is shutting down.",
        "operationId" : "isHealthy",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "exampleSetFlag" : false,
                  "types" : [ "string" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/collectstatistics/table" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "collectStatisticsOnTable",
        "description" : "Starts a new background job that will run selected data statistics collectors on a whole table",
        "operationId" : "collectStatisticsOnTable",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the statistic collection job finishes to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the job is still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Data statistics collectors filter",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectStatisticsQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/jobs/collectstatistics/withgrouping" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "collectStatisticsOnDataGroups",
        "description" : "Starts a new background job that will run selected data statistics collectors on tables, calculating separate metric for each data grouping",
        "operationId" : "collectStatisticsOnDataGroups",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the statistic collection job finishes to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the job is still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Data statistics collectors filter",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectStatisticsQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/jobs/deletestoreddata" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "deleteStoredData",
        "description" : "Starts a new background job that will delete stored data about check results, sensor readouts etc.",
        "operationId" : "deleteStoredData",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the import tables job finishes to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the delete stored data job is still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Delete stored data job parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteStoredDataQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/jobs/importtables" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "importTables",
        "description" : "Starts a new background job that will import selected tables.",
        "operationId" : "importTables",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the import tables job finishes to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the import tables job is still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Import tables job parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportTablesQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/jobs/jobchangessince/{sequenceNumber}" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "getJobChangesSince",
        "description" : "Retrieves an incremental list of job changes (new jobs or job status changes)",
        "operationId" : "getJobChangesSince",
        "parameters" : [ {
          "name" : "sequenceNumber",
          "in" : "path",
          "description" : "Change sequence number to get job changes after that sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all queued and finished jobs returned. Call jobchangessince/{sequenceNumber} to receive incremental changes.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoJobQueueIncrementalSnapshotModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/jobs" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "getAllJobs",
        "description" : "Retrieves a list of all queued and recently finished jobs.",
        "operationId" : "getAllJobs",
        "responses" : {
          "200" : {
            "description" : "A list of all queued and finished jobs returned. Call jobchangessince/{changeSequence} to receive incremental changes.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoJobQueueInitialSnapshotModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/jobs/{jobId}" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "getJob",
        "description" : "Retrieves the current status of a single job, identified by a job id.",
        "operationId" : "getJob",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "Job id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieves the current status of a single job, identified by a job id.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "delete" : {
        "tags" : [ "Jobs" ],
        "summary" : "cancelJob",
        "description" : "Cancels a running job",
        "operationId" : "cancelJob",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "Job id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/jobs/{jobId}/wait" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "waitForJob",
        "description" : "Waits for a job to finish. Returns the status of a finished job or a current state of a job that is still running, but the wait timeout elapsed.",
        "operationId" : "waitForJob",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "Job id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the job is still running, the method returns the job model that is not yet finished and has no results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "The job status was returned. If the response is returned before the wait timeout, the response will contain information about a finished job. When the wait timeout has elapsed, the job status could be still queued or running.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/runchecks" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "runChecks",
        "description" : "Starts a new background job that will run selected data quality checks",
        "operationId" : "runChecks",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the checks finish to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the checks are still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Data quality check run configuration (target checks and an optional time range)",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RunChecksParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunChecksQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/jobs/runchecks/{jobId}/wait" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "waitForRunChecksJob",
        "description" : "Waits for a job to finish. Returns the status of a finished job or a current state of a job that is still running, but the wait timeout elapsed.",
        "operationId" : "waitForRunChecksJob",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "path",
          "description" : "Job id, it can be a job business key assigned to the job or a job id generated by DQOps",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the job is still running, the method returns the job model that is not yet finished and has no results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "Run checks job information returned. When the wait timeout has elapsed, the job status could be still queued or running and the result will be missing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunChecksQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/scheduler/isrunning" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "isCronSchedulerRunning",
        "description" : "Checks if the DQOps internal CRON scheduler is running and processing jobs scheduled using cron expressions.",
        "operationId" : "isCronSchedulerRunning",
        "responses" : {
          "200" : {
            "description" : "The cron scheduler status was checked and returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "exampleSetFlag" : false,
                  "types" : [ "boolean" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/scheduler/status/start" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "startCronScheduler",
        "description" : "Starts the job scheduler that runs monitoring jobs that are scheduled by assigning cron expressions.",
        "operationId" : "startCronScheduler",
        "responses" : {
          "200" : {
            "description" : "The cron scheduler was started or was already running",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/scheduler/status/stop" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "stopCronScheduler",
        "description" : "Stops the job scheduler that runs monitoring jobs that are scheduled by assigning cron expressions.",
        "operationId" : "stopCronScheduler",
        "responses" : {
          "200" : {
            "description" : "The cron scheduler was stopped or was already not running",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/jobs/synchronize" : {
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "synchronizeFolders",
        "description" : "Starts multiple file synchronization jobs that will synchronize files from selected DQOps User home folders to the DQOps Cloud. The default synchronization mode is a full synchronization (upload local files, download new files from the cloud).",
        "operationId" : "synchronizeFolders",
        "parameters" : [ {
          "name" : "jobBusinessKey",
          "in" : "query",
          "description" : "Optional job business key that is a user assigned unique job id, used to check the job status by looking up the job by a user assigned identifier, instead of the DQOps assigned job identifier.",
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "Wait until the synchronize multiple folders job finishes to run, the default value is false (queue a background job and return the job id)",
          "schema" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "extensions" : { }
        }, {
          "name" : "waitTimeout",
          "in" : "query",
          "description" : "The wait timeout in seconds, when the wait timeout elapses and the synchronization with the DQOps Cloud is still running, only the job id is returned without the results. The default timeout is 120 seconds, but could be reconfigured (see the 'dqo' cli command documentation).",
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Selection of folders that should be synchronized to the DQOps Cloud",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SynchronizeMultipleFoldersDqoQueueJobParameters",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SynchronizeMultipleFoldersQueueJobResult",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/logs/debug" : {
      "post" : {
        "tags" : [ "LogShipping" ],
        "summary" : "logDebug",
        "description" : "Logs an information message in the server's logs as a debug severity log entry.",
        "operationId" : "logDebug",
        "requestBody" : {
          "description" : "Log entry",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalLogEntry",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/logs/error" : {
      "post" : {
        "tags" : [ "LogShipping" ],
        "summary" : "logError",
        "description" : "Logs an information message in the server's logs as an error severity log entry.",
        "operationId" : "logError",
        "requestBody" : {
          "description" : "Log entry",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalLogEntry",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/logs/info" : {
      "post" : {
        "tags" : [ "LogShipping" ],
        "summary" : "logInfo",
        "description" : "Logs an information message in the server's logs as an info severity log entry.",
        "operationId" : "logInfo",
        "requestBody" : {
          "description" : "Log entry",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalLogEntry",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/logs/warn" : {
      "post" : {
        "tags" : [ "LogShipping" ],
        "summary" : "logWarn",
        "description" : "Logs an information message in the server's logs as a warn severity log entry.",
        "operationId" : "logWarn",
        "requestBody" : {
          "description" : "Log entry",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExternalLogEntry",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/mypassword" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "changeCallerPassword",
        "description" : "Changes the password of the calling user. When the user is identified by the DQOps local API key, it is the user whose email is stored in the DQOps API Key.",
        "operationId" : "changeCallerPassword",
        "requestBody" : {
          "description" : "New Password",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string",
                "exampleSetFlag" : false,
                "types" : [ "string" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/rules" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "getAllRules",
        "description" : "Returns a flat list of all rules available in DQOps, both built-in rules and user defined or customized rules.",
        "operationId" : "getAllRules",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/RuleListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/rules/{fullRuleName}" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "getRule",
        "description" : "Returns a rule definition",
        "operationId" : "getRule",
        "parameters" : [ {
          "name" : "fullRuleName",
          "in" : "path",
          "description" : "Full rule name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "updateRule",
        "description" : "Updates an existing rule, making a custom rule definition if it is not present",
        "operationId" : "updateRule",
        "parameters" : [ {
          "name" : "fullRuleName",
          "in" : "path",
          "description" : "Full rule name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "List of rule definitions",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Rules" ],
        "summary" : "createRule",
        "description" : "Creates (adds) a new custom rule given the rule definition.",
        "operationId" : "createRule",
        "parameters" : [ {
          "name" : "fullRuleName",
          "in" : "path",
          "description" : "Full rule name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Rule model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Rules" ],
        "summary" : "deleteRule",
        "description" : "Deletes a custom rule definition",
        "operationId" : "deleteRule",
        "parameters" : [ {
          "name" : "fullRuleName",
          "in" : "path",
          "description" : "Full rule name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/sensors" : {
      "get" : {
        "tags" : [ "Sensors" ],
        "summary" : "getAllSensors",
        "description" : "Returns a flat list of all sensors available in DQOps, both built-in sensors and user defined or customized sensors.",
        "operationId" : "getAllSensors",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/SensorListModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/sensors/{fullSensorName}" : {
      "get" : {
        "tags" : [ "Sensors" ],
        "summary" : "getSensor",
        "description" : "Returns a sensor model",
        "operationId" : "getSensor",
        "parameters" : [ {
          "name" : "fullSensorName",
          "in" : "path",
          "description" : "Full sensor name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Sensors" ],
        "summary" : "updateSensor",
        "description" : "Updates an existing sensor, making a custom sensor definition if it is not present. \nRemoves sensor if custom definition is same as Dqo Home sensor",
        "operationId" : "updateSensor",
        "parameters" : [ {
          "name" : "fullSensorName",
          "in" : "path",
          "description" : "Full sensor name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Dictionary of sensor definitions",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SensorModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "post" : {
        "tags" : [ "Sensors" ],
        "summary" : "createSensor",
        "description" : "Creates (adds) a new sensor given sensor information.",
        "operationId" : "createSensor",
        "parameters" : [ {
          "name" : "fullSensorName",
          "in" : "path",
          "description" : "Full sensor name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "Dictionary of sensor definitions",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SensorModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Sensors" ],
        "summary" : "deleteSensor",
        "description" : "Deletes a custom sensor definition",
        "operationId" : "deleteSensor",
        "parameters" : [ {
          "name" : "fullSensorName",
          "in" : "path",
          "description" : "Full sensor name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/timezones" : {
      "get" : {
        "tags" : [ "Timezones" ],
        "summary" : "getAvailableZoneIds",
        "description" : "Returns a list of available time zone ids",
        "operationId" : "getAvailableZoneIds",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "type" : "string",
                    "extensions" : { },
                    "exampleSetFlag" : false,
                    "types" : [ "string" ]
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "getAllUsers",
        "description" : "Returns a list of all users.",
        "operationId" : "getAllUsers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "exampleSetFlag" : false,
                  "items" : {
                    "$ref" : "#/components/schemas/DqoCloudUserModel",
                    "extensions" : { },
                    "exampleSetFlag" : false
                  },
                  "types" : [ "array" ]
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "createUser",
        "description" : "Creates (adds) a new user to a multi-user account.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "User model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DqoCloudUserModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    },
    "api/users/{email}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "getUser",
        "description" : "Returns the user model that describes the role of a user identified by an email",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "User's email",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DqoCloudUserModel",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "updateUser",
        "description" : "Updates a user in a multi-user account. The user's email cannot be changed.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "User's email",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "User model",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DqoCloudUserModel",
                "exampleSetFlag" : false
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "deleteUser",
        "description" : "Deletes a user from a multi-user account.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "User's email",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "responses" : {
          "200" : {
            "description" : "User deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : { }
      },
      "extensions" : { }
    },
    "api/users/{email}/password" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "changeUserPassword",
        "description" : "Changes the password of a user identified by the email.",
        "operationId" : "changeUserPassword",
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "description" : "User's email",
          "required" : true,
          "schema" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "extensions" : { }
        } ],
        "requestBody" : {
          "description" : "New Password",
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string",
                "exampleSetFlag" : false,
                "types" : [ "string" ]
              },
              "exampleSetFlag" : false
            }
          },
          "required" : false,
          "extensions" : { }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MonoVoid",
                  "exampleSetFlag" : false
                },
                "exampleSetFlag" : false
              }
            },
            "extensions" : { }
          }
        },
        "security" : [ {
          "authorization_bearer_api_key" : [ ]
        } ],
        "extensions" : {
          "x-codegen-request-body-name" : "body"
        }
      },
      "extensions" : { }
    }
  },
  "components" : {
    "schemas" : {
      "AllChecksPatchParameters" : {
        "type" : "object",
        "properties" : {
          "check_search_filters" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "check_model_patch" : {
            "$ref" : "#/components/schemas/CheckModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "selected_tables_to_columns" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "extensions" : { },
              "exampleSetFlag" : false,
              "items" : {
                "type" : "string",
                "extensions" : { },
                "exampleSetFlag" : false,
                "types" : [ "string" ]
              },
              "types" : [ "array" ]
            },
            "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end."
            }
          },
          "override_conflicts" : {
            "type" : "boolean",
            "description" : "Override existing configurations if they're present. If false, apply updates only to the fields for which no configuration exists.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Parameter object for creating pruned patch trees of all checks that fit the filters.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_search_filters" : {
              "description" : "Filters addressing basic tree search parameters. These filters takes precedence over other selectors.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "check_model_patch" : {
              "description" : "Sample configured check model which will pasted onto selected checks.",
              "$ref" : "#/components/schemas/CheckModel",
              "originalRef" : "#/components/schemas/CheckModel"
            },
            "selected_tables_to_columns" : {
              "type" : "object",
              "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end.",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "override_conflicts" : {
              "type" : "boolean",
              "description" : "Override existing configurations if they're present. If false, apply updates only to the fields for which no configuration exists."
            }
          },
          "description" : "Parameter object for creating pruned patch trees of all checks that fit the filters."
        }
      },
      "AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 30 periods (days, etc.), but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a 30 time periods (days, etc.) time window, but at least 10 readouts must exist to run the calculation."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverageRule01ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverageRule05ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AnomalyStationaryPercentileMovingAverageRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "anomaly_percent" : {
            "type" : "number",
            "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "anomaly_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Probability that the current sensor readout will achieve values within the mean according to the distribution of the previous values gathered within the time window. In other words, the inter-quantile range around the mean of the estimated normal distribution. Set the time window at the threshold level for all severity levels (warning, error, fatal) at once. The default is a time window of 90 periods (days, etc.), but at least 30 readouts must exist to run the calculation. You can change the default value by modifying prediction_time_window parameterin Definitions section."
            }
          }
        }
      },
      "AuthenticatedDashboardModel" : {
        "type" : "object",
        "properties" : {
          "folder_path" : {
            "type" : "string",
            "description" : "Folder path",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dashboard" : {
            "$ref" : "#/components/schemas/DashboardSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "authenticated_dashboard_url" : {
            "type" : "string",
            "description" : "Dashboard authenticated url with a short lived refresh token",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Describes a single authenticated dashboard.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folder_path" : {
              "type" : "string",
              "description" : "Folder path"
            },
            "dashboard" : {
              "description" : "Dashboard model with an unauthenticated url",
              "$ref" : "#/components/schemas/DashboardSpec",
              "originalRef" : "#/components/schemas/DashboardSpec"
            },
            "authenticated_dashboard_url" : {
              "type" : "string",
              "description" : "Dashboard authenticated url with a short lived refresh token"
            }
          },
          "description" : "Describes a single authenticated dashboard."
        }
      },
      "BetweenFloatsRuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "from" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "to" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "from" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            },
            "to" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "BigQueryParametersSpec" : {
        "type" : "object",
        "properties" : {
          "source_project_id" : {
            "type" : "string",
            "description" : "Source GCP project ID. This is the project that has datasets that will be imported.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "jobs_create_project" : {
            "$ref" : "#/components/schemas/BigQueryJobsCreateProject",
            "exampleSetFlag" : false
          },
          "billing_project_id" : {
            "type" : "string",
            "description" : "Billing GCP project ID. This is the project used as the default GCP project. The calling user must have a bigquery.jobs.create permission in this project.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "authentication_mode" : {
            "$ref" : "#/components/schemas/BigQueryAuthenticationMode",
            "exampleSetFlag" : false
          },
          "json_key_content" : {
            "type" : "string",
            "description" : "JSON key content. Use an environment variable that contains the content of the key as ${KEY_ENV} or a name of a secret in the GCP Secret Manager: ${sm://key-secret-name}. Requires the authentication-mode: json_key_content.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "json_key_path" : {
            "type" : "string",
            "description" : "A path to the JSON key file. Requires the authentication-mode: json_key_path.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "quota_project_id" : {
            "type" : "string",
            "description" : "Quota GCP project ID.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "source_project_id" : {
              "type" : "string",
              "description" : "Source GCP project ID. This is the project that has datasets that will be imported."
            },
            "jobs_create_project" : {
              "type" : "string",
              "description" : "Configures the way how to select the project that will be used to start BigQuery jobs and will be used for billing. The user/service identified by the credentials must have bigquery.jobs.create permission in that project.",
              "enum" : [ "create_jobs_in_source_project", "create_jobs_in_default_project_from_credentials", "create_jobs_in_selected_billing_project_id" ]
            },
            "billing_project_id" : {
              "type" : "string",
              "description" : "Billing GCP project ID. This is the project used as the default GCP project. The calling user must have a bigquery.jobs.create permission in this project."
            },
            "authentication_mode" : {
              "type" : "string",
              "description" : "Authentication mode to the Google Cloud.",
              "enum" : [ "google_application_credentials", "json_key_content", "json_key_path" ]
            },
            "json_key_content" : {
              "type" : "string",
              "description" : "JSON key content. Use an environment variable that contains the content of the key as ${KEY_ENV} or a name of a secret in the GCP Secret Manager: ${sm://key-secret-name}. Requires the authentication-mode: json_key_content."
            },
            "json_key_path" : {
              "type" : "string",
              "description" : "A path to the JSON key file. Requires the authentication-mode: json_key_path."
            },
            "quota_project_id" : {
              "type" : "string",
              "description" : "Quota GCP project ID."
            }
          }
        }
      },
      "BulkCheckDisableParameters" : {
        "type" : "object",
        "properties" : {
          "check_search_filters" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "selected_tables_to_columns" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "extensions" : { },
              "exampleSetFlag" : false,
              "items" : {
                "type" : "string",
                "extensions" : { },
                "exampleSetFlag" : false,
                "types" : [ "string" ]
              },
              "types" : [ "array" ]
            },
            "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end."
            }
          }
        },
        "description" : "Parameter object for disabling all checks that fit the filters.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_search_filters" : {
              "description" : "Filters addressing basic tree search parameters. These filters takes precedence over other selectors.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "selected_tables_to_columns" : {
              "type" : "object",
              "description" : "List of concrete table and column names which will be the target. Column mappings are ignored for table level checks. This filter is applied at the end.",
              "additionalProperties" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "description" : "Parameter object for disabling all checks that fit the filters."
        }
      },
      "ChangePercent1DayRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent1DayRule20ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent1DayRule50ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 1 day ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), the rule search for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 1 day. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent30DaysRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent30DaysRule20ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent30DaysRule50ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 30 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 30 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent7DaysRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent7DaysRule20ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercent7DaysRule50ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "exact_day" : {
            "type" : "boolean",
            "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to a readout 7 days ago (inclusive)."
            },
            "exact_day" : {
              "type" : "boolean",
              "description" : "When the exact_day parameter is unchecked (exact_day: false), rule searches for the most recent sensor readouts from the past 60 days and compares them. If the parameter is selected (exact_day: true), the rule compares only with the results from the past 7 days. If no results are found from that time, no results or errors will be generated."
            }
          }
        }
      },
      "ChangePercentRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to previous readout (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to previous readout (inclusive)."
            }
          }
        }
      },
      "ChangePercentRule20ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to previous readout (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to previous readout (inclusive)."
            }
          }
        }
      },
      "ChangePercentRule50ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Percentage of maximum accepted change compared to previous readout (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Percentage of maximum accepted change compared to previous readout (inclusive)."
            }
          }
        }
      },
      "CheckConfigurationModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schema_name" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_name" : {
            "type" : "string",
            "description" : "Table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_name" : {
            "type" : "string",
            "description" : "Column name, if the check is set up on a column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_target" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "check_time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "category_name" : {
            "type" : "string",
            "description" : "Category to which this check belongs.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_name" : {
            "type" : "string",
            "description" : "Check name that is used in YAML file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_parameters" : {
            "type" : "array",
            "description" : "List of fields for editing the sensor parameters.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/FieldModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "table_level_filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query for every check on this table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_level_filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query for this check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "warning" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Whether the check has been disabled.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "configured" : {
            "type" : "boolean",
            "description" : "Whether the check is configured (not null).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model containing fundamental configuration of a single data quality check.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schema_name" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "table_name" : {
              "type" : "string",
              "description" : "Table name."
            },
            "column_name" : {
              "type" : "string",
              "description" : "Column name, if the check is set up on a column."
            },
            "check_target" : {
              "type" : "string",
              "description" : "Check target (table or column).",
              "enum" : [ "table", "column" ]
            },
            "check_type" : {
              "type" : "string",
              "description" : "Check type (profiling, monitoring, partitioned).",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "check_time_scale" : {
              "type" : "string",
              "description" : "Check timescale (for monitoring and partitioned checks).",
              "enum" : [ "daily", "monthly" ]
            },
            "category_name" : {
              "type" : "string",
              "description" : "Category to which this check belongs."
            },
            "check_name" : {
              "type" : "string",
              "description" : "Check name that is used in YAML file."
            },
            "sensor_parameters" : {
              "type" : "array",
              "description" : "List of fields for editing the sensor parameters.",
              "items" : {
                "$ref" : "#/components/schemas/FieldModel",
                "originalRef" : "#/components/schemas/FieldModel"
              }
            },
            "table_level_filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query for every check on this table."
            },
            "sensor_level_filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query for this check."
            },
            "warning" : {
              "description" : "Rule parameters for the warning severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            },
            "error" : {
              "description" : "Rule parameters for the error severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            },
            "fatal" : {
              "description" : "Rule parameters for the fatal severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Whether the check has been disabled."
            },
            "configured" : {
              "type" : "boolean",
              "description" : "Whether the check is configured (not null)."
            }
          },
          "description" : "Model containing fundamental configuration of a single data quality check."
        }
      },
      "CheckContainerListModel" : {
        "type" : "object",
        "properties" : {
          "checks" : {
            "type" : "array",
            "description" : "Simplistic list of all data quality checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CheckListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can edit the check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Simplistic model that returns the list of data quality checks, their names, categories and \"configured\" flag.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "checks" : {
              "type" : "array",
              "description" : "Simplistic list of all data quality checks.",
              "items" : {
                "$ref" : "#/components/schemas/CheckListModel",
                "originalRef" : "#/components/schemas/CheckListModel"
              }
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can edit the check."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Simplistic model that returns the list of data quality checks, their names, categories and \"configured\" flag."
        }
      },
      "CheckContainerModel" : {
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "description" : "List of all data quality categories that contain data quality checks inside.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/QualityCategoryModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "effective_schedule" : {
            "$ref" : "#/components/schemas/EffectiveScheduleModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "effective_schedule_enabled_status" : {
            "$ref" : "#/components/schemas/ScheduleEnabledStatusModel",
            "exampleSetFlag" : false
          },
          "partition_by_column" : {
            "type" : "string",
            "description" : "The name of the column that partitioned checks will use for the time period partitioning. Important only for partitioned checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can edit the check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that returns the form definition and the form data to edit all data quality checks divided by categories.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "categories" : {
              "type" : "array",
              "description" : "List of all data quality categories that contain data quality checks inside.",
              "items" : {
                "$ref" : "#/components/schemas/QualityCategoryModel",
                "originalRef" : "#/components/schemas/QualityCategoryModel"
              }
            },
            "effective_schedule" : {
              "description" : "Model of configured schedule enabled on the check container.",
              "$ref" : "#/components/schemas/EffectiveScheduleModel",
              "originalRef" : "#/components/schemas/EffectiveScheduleModel"
            },
            "effective_schedule_enabled_status" : {
              "type" : "string",
              "description" : "State of the effective scheduling on the check container.",
              "enum" : [ "enabled", "disabled", "not_configured", "overridden_by_checks" ]
            },
            "partition_by_column" : {
              "type" : "string",
              "description" : "The name of the column that partitioned checks will use for the time period partitioning. Important only for partitioned checks."
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to start the job.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this check container",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can edit the check."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Model that returns the form definition and the form data to edit all data quality checks divided by categories."
        }
      },
      "CheckContainerTypeModel" : {
        "type" : "object",
        "properties" : {
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "check_time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          }
        },
        "description" : "Model identifying the check type and timescale of checks belonging to a container.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_type" : {
              "type" : "string",
              "description" : "Check type.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "check_time_scale" : {
              "type" : "string",
              "description" : "Check timescale.",
              "enum" : [ "daily", "monthly" ]
            }
          },
          "description" : "Model identifying the check type and timescale of checks belonging to a container."
        }
      },
      "CheckCurrentDataQualityStatusModel" : {
        "type" : "object",
        "properties" : {
          "current_severity" : {
            "$ref" : "#/components/schemas/CheckResultStatus",
            "exampleSetFlag" : false
          },
          "highest_historical_severity" : {
            "$ref" : "#/components/schemas/RuleSeverityLevel",
            "exampleSetFlag" : false
          },
          "executed_at" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the check was recently executed.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "category" : {
            "type" : "string",
            "description" : "Check category name, such as nulls, schema, strings, volume.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Data quality dimension, such as Completeness, Uniqueness, Validity.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "The most recent data quality status for a single data quality check. If data grouping is enabled, the *current_severity* will be the highest data quality issue status from all data quality results for all data groups. For partitioned checks, it is the highest severity of all results for all partitions (time periods) in the analyzed time range.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "current_severity" : {
              "type" : "string",
              "description" : "The data quality issue severity for this data quality check. An additional value *execution_error* is used to tell that the check, sensor or rule failed to execute due to insufficient  permissions to the table or an error in the sensor's template or a Python rule. For partitioned checks, it is the highest severity of all results for all partitions (time periods) in the analyzed time range.",
              "enum" : [ "valid", "warning", "error", "fatal", "execution_error" ]
            },
            "highest_historical_severity" : {
              "type" : "string",
              "description" : "The highest severity of previous executions of this data quality issue in the analyzed time range. It can be different from the *current_severity* if the data quality issue was solved and the most recently data quality issue did not detect it anymore. For partitioned checks, this field returns the same value as the *current_severity*, because data quality issues in older partitions are still valid.",
              "enum" : [ "valid", "warning", "error", "fatal" ]
            },
            "executed_at" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the check was recently executed."
            },
            "check_type" : {
              "type" : "string",
              "description" : "The check type: profiling, monitoring, partitioned.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "time_scale" : {
              "type" : "string",
              "description" : "The check time scale for *monitoring* and *partitioned* check types. The time scales are *daily* and *monthly*. The profiling checks do not have a time scale.",
              "enum" : [ "daily", "monthly" ]
            },
            "category" : {
              "type" : "string",
              "description" : "Check category name, such as nulls, schema, strings, volume."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Data quality dimension, such as Completeness, Uniqueness, Validity."
            }
          },
          "description" : "The most recent data quality status for a single data quality check. If data grouping is enabled, the *current_severity* will be the highest data quality issue status from all data quality results for all data groups. For partitioned checks, it is the highest severity of all results for all partitions (time periods) in the analyzed time range."
        }
      },
      "CheckDefinitionFolderModel" : {
        "type" : "object",
        "properties" : {
          "folders" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CheckDefinitionFolderModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "A dictionary of nested folders with data quality checks. The keys are the folder names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with data quality checks. The keys are the folder names."
            }
          },
          "checks" : {
            "type" : "array",
            "description" : "List of data quality checks defined in this folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CheckDefinitionListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Check folder list model with a list of data quality checks in this folder or a list of nested folders.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folders" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with data quality checks. The keys are the folder names.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CheckDefinitionFolderModel",
                "originalRef" : "#/definitions/CheckDefinitionFolderModel"
              }
            },
            "checks" : {
              "type" : "array",
              "description" : "List of data quality checks defined in this folder.",
              "items" : {
                "$ref" : "#/components/schemas/CheckDefinitionListModel",
                "originalRef" : "#/components/schemas/CheckDefinitionListModel"
              }
            }
          },
          "description" : "Check folder list model with a list of data quality checks in this folder or a list of nested folders."
        }
      },
      "CheckDefinitionListModel" : {
        "type" : "object",
        "properties" : {
          "check_name" : {
            "type" : "string",
            "description" : "Check name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "full_check_name" : {
            "type" : "string",
            "description" : "Full check name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This check has is a custom check or was customized by the user.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This check is provided with DQOps as a built-in check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Data quality check definition list model.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_name" : {
              "type" : "string",
              "description" : "Check name"
            },
            "full_check_name" : {
              "type" : "string",
              "description" : "Full check name"
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This check has is a custom check or was customized by the user."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This check is provided with DQOps as a built-in check."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Data quality check definition list model."
        }
      },
      "CheckDefinitionModel" : {
        "type" : "object",
        "properties" : {
          "check_name" : {
            "type" : "string",
            "description" : "Check name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_name" : {
            "type" : "string",
            "description" : "Sensor name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "rule_name" : {
            "type" : "string",
            "description" : "Rule name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text that is shown in the check editor that describes the purpose and usage of the check",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This check has is a custom check or was customized by the user.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This check is provided with DQOps as a built-in check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Data quality check definition model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_name" : {
              "type" : "string",
              "description" : "Check name"
            },
            "sensor_name" : {
              "type" : "string",
              "description" : "Sensor name"
            },
            "rule_name" : {
              "type" : "string",
              "description" : "Rule name"
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text that is shown in the check editor that describes the purpose and usage of the check"
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This check has is a custom check or was customized by the user."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This check is provided with DQOps as a built-in check."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Data quality check definition model"
        }
      },
      "CheckListModel" : {
        "type" : "object",
        "properties" : {
          "check_category" : {
            "type" : "string",
            "description" : "Check category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_name" : {
            "type" : "string",
            "description" : "Data quality check name that is used in YAML.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text that describes the data quality check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "configured" : {
            "type" : "boolean",
            "description" : "True if the data quality check is configured (not null). When saving the data quality check configuration, set the flag to true for storing the check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Simplistic model that returns a single data quality check, its name and \"configured\" flag",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_category" : {
              "type" : "string",
              "description" : "Check category."
            },
            "check_name" : {
              "type" : "string",
              "description" : "Data quality check name that is used in YAML."
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text that describes the data quality check."
            },
            "configured" : {
              "type" : "boolean",
              "description" : "True if the data quality check is configured (not null). When saving the data quality check configuration, set the flag to true for storing the check."
            }
          },
          "description" : "Simplistic model that returns a single data quality check, its name and \"configured\" flag"
        }
      },
      "CheckModel" : {
        "type" : "object",
        "properties" : {
          "check_name" : {
            "type" : "string",
            "description" : "Data quality check name that is used in YAML.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text that describes the data quality check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_parameters" : {
            "type" : "array",
            "description" : "List of fields for editing the sensor parameters.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/FieldModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "sensor_name" : {
            "type" : "string",
            "description" : "Full sensor name. This field is for information purposes and could be used to create additional custom checks that are reusing the same data quality sensor.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Data quality dimension used for tagging the results of this data quality checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "rule" : {
            "$ref" : "#/components/schemas/RuleThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "supports_grouping" : {
            "type" : "boolean",
            "description" : "The data quality check supports a custom data grouping configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "data_grouping_override" : {
            "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "effective_schedule" : {
            "$ref" : "#/components/schemas/EffectiveScheduleModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schedule_enabled_status" : {
            "$ref" : "#/components/schemas/ScheduleEnabledStatusModel",
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled checks are executed. The sensor should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "configured" : {
            "type" : "boolean",
            "description" : "True if the data quality check is configured (not null). When saving the data quality check configuration, set the flag to true for storing the check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_grouping_configuration" : {
            "type" : "string",
            "description" : "The name of a data grouping configuration defined at a table that should be used for this check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_target" : {
            "$ref" : "#/components/schemas/CheckTargetModel",
            "exampleSetFlag" : false
          },
          "configuration_requirements_errors" : {
            "type" : "array",
            "description" : "List of configuration errors that must be fixed before the data quality check could be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "similar_checks" : {
            "type" : "array",
            "description" : "List of similar checks in other check types or in other time scales.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/SimilarCheckModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can edit the check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "check_hash" : {
            "type" : "integer",
            "description" : "The check hash code that identifies the check instance.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "description" : "Model that returns the form definition and the form data to edit a single data quality check.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_name" : {
              "type" : "string",
              "description" : "Data quality check name that is used in YAML."
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text that describes the data quality check."
            },
            "sensor_parameters" : {
              "type" : "array",
              "description" : "List of fields for editing the sensor parameters.",
              "items" : {
                "$ref" : "#/components/schemas/FieldModel",
                "originalRef" : "#/components/schemas/FieldModel"
              }
            },
            "sensor_name" : {
              "type" : "string",
              "description" : "Full sensor name. This field is for information purposes and could be used to create additional custom checks that are reusing the same data quality sensor."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Data quality dimension used for tagging the results of this data quality checks."
            },
            "rule" : {
              "description" : "Threshold (alerting) rules defined for a check.",
              "$ref" : "#/components/schemas/RuleThresholdsModel",
              "originalRef" : "#/components/schemas/RuleThresholdsModel"
            },
            "supports_grouping" : {
              "type" : "boolean",
              "description" : "The data quality check supports a custom data grouping configuration."
            },
            "data_grouping_override" : {
              "description" : "Data grouping configuration for this check. When a data grouping configuration is assigned at a check level, it overrides the data grouping configuration from the table level. Data grouping is configured in two cases: (1) the data in the table should be analyzed with a GROUP BY condition, to analyze different groups of rows using separate time series, for example a table contains data from multiple countries and there is a 'country' column used for partitioning. (2) a static data grouping configuration is assigned to a table, when the data is partitioned at a table level (similar tables store the same information, but for different countries, etc.). ",
              "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
              "originalRef" : "#/components/schemas/DataGroupingConfigurationSpec"
            },
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "effective_schedule" : {
              "description" : "Model of configured schedule enabled on the check level.",
              "$ref" : "#/components/schemas/EffectiveScheduleModel",
              "originalRef" : "#/components/schemas/EffectiveScheduleModel"
            },
            "schedule_enabled_status" : {
              "type" : "string",
              "description" : "State of the scheduling override for this check.",
              "enum" : [ "enabled", "disabled", "not_configured", "overridden_by_checks" ]
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled checks are executed. The sensor should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "configured" : {
              "type" : "boolean",
              "description" : "True if the data quality check is configured (not null). When saving the data quality check configuration, set the flag to true for storing the check."
            },
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to start the job.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this check.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "data_grouping_configuration" : {
              "type" : "string",
              "description" : "The name of a data grouping configuration defined at a table that should be used for this check."
            },
            "check_target" : {
              "type" : "string",
              "description" : "Type of the check's target (column, table).",
              "enum" : [ "table", "column" ]
            },
            "configuration_requirements_errors" : {
              "type" : "array",
              "description" : "List of configuration errors that must be fixed before the data quality check could be executed.",
              "items" : {
                "type" : "string"
              }
            },
            "similar_checks" : {
              "type" : "array",
              "description" : "List of similar checks in other check types or in other time scales.",
              "items" : {
                "$ref" : "#/components/schemas/SimilarCheckModel",
                "originalRef" : "#/components/schemas/SimilarCheckModel"
              }
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can edit the check."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            },
            "check_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The check hash code that identifies the check instance."
            }
          },
          "description" : "Model that returns the form definition and the form data to edit a single data quality check."
        }
      },
      "CheckResultEntryModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Check result ID.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkHash" : {
            "type" : "integer",
            "description" : "Check hash.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "Check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkDisplayName" : {
            "type" : "string",
            "description" : "Check display name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "Check type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "actualValue" : {
            "type" : "number",
            "description" : "Actual value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "expectedValue" : {
            "type" : "number",
            "description" : "Expected value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "warningLowerBound" : {
            "type" : "number",
            "description" : "Warning lower bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "warningUpperBound" : {
            "type" : "number",
            "description" : "Warning upper bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "errorLowerBound" : {
            "type" : "number",
            "description" : "Error lower bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "errorUpperBound" : {
            "type" : "number",
            "description" : "Error upper bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "fatalLowerBound" : {
            "type" : "number",
            "description" : "Fatal lower bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "fatalUpperBound" : {
            "type" : "number",
            "description" : "Fatal upper bound.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "severity" : {
            "type" : "integer",
            "description" : "Severity.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "columnName" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "durationMs" : {
            "type" : "integer",
            "description" : "Duration (ms).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "executedAt" : {
            "type" : "integer",
            "description" : "Executed at.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "timeGradient" : {
            "type" : "string",
            "description" : "Time gradient.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timePeriod" : {
            "type" : "string",
            "description" : "Time period.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "includeInKpi" : {
            "type" : "boolean",
            "description" : "Include in KPI.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "includeInSla" : {
            "type" : "boolean",
            "description" : "Include in SLA.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "provider" : {
            "type" : "string",
            "description" : "Provider.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "qualityDimension" : {
            "type" : "string",
            "description" : "Quality dimension.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "Sensor name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableComparison" : {
            "type" : "string",
            "description" : "Table comparison name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Check result ID."
            },
            "checkHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Check hash."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "Check category name."
            },
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "checkDisplayName" : {
              "type" : "string",
              "description" : "Check display name."
            },
            "checkType" : {
              "type" : "string",
              "description" : "Check type."
            },
            "actualValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Actual value."
            },
            "expectedValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Expected value."
            },
            "warningLowerBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Warning lower bound."
            },
            "warningUpperBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Warning upper bound."
            },
            "errorLowerBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Error lower bound."
            },
            "errorUpperBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Error upper bound."
            },
            "fatalLowerBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Fatal lower bound."
            },
            "fatalUpperBound" : {
              "type" : "number",
              "format" : "double",
              "description" : "Fatal upper bound."
            },
            "severity" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Severity."
            },
            "columnName" : {
              "type" : "string",
              "description" : "Column name."
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Data group."
            },
            "durationMs" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration (ms)."
            },
            "executedAt" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Executed at."
            },
            "timeGradient" : {
              "type" : "string",
              "description" : "Time gradient."
            },
            "timePeriod" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Time period."
            },
            "includeInKpi" : {
              "type" : "boolean",
              "description" : "Include in KPI."
            },
            "includeInSla" : {
              "type" : "boolean",
              "description" : "Include in SLA."
            },
            "provider" : {
              "type" : "string",
              "description" : "Provider."
            },
            "qualityDimension" : {
              "type" : "string",
              "description" : "Quality dimension."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "Sensor name."
            },
            "tableComparison" : {
              "type" : "string",
              "description" : "Table comparison name."
            }
          }
        }
      },
      "CheckResultsListModel" : {
        "type" : "object",
        "properties" : {
          "checkHash" : {
            "type" : "integer",
            "description" : "Check hash.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "Check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkDisplayName" : {
            "type" : "string",
            "description" : "Check display name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "Check type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroups" : {
            "type" : "array",
            "description" : "Data groups list.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Selected data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkResultEntries" : {
            "type" : "array",
            "description" : "Single check results",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CheckResultEntryModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "checkHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Check hash."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "Check category name."
            },
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "checkDisplayName" : {
              "type" : "string",
              "description" : "Check display name."
            },
            "checkType" : {
              "type" : "string",
              "description" : "Check type."
            },
            "dataGroups" : {
              "type" : "array",
              "description" : "Data groups list.",
              "items" : {
                "type" : "string"
              }
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Selected data group."
            },
            "checkResultEntries" : {
              "type" : "array",
              "description" : "Single check results",
              "items" : {
                "$ref" : "#/components/schemas/CheckResultEntryModel",
                "originalRef" : "#/components/schemas/CheckResultEntryModel"
              }
            }
          }
        }
      },
      "CheckResultsOverviewDataModel" : {
        "type" : "object",
        "properties" : {
          "checkHash" : {
            "type" : "integer",
            "description" : "Check hash.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "Check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "comparisonName" : {
            "type" : "string",
            "description" : "Optional table comparison name for table comparison checks only.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timePeriods" : {
            "type" : "array",
            "description" : "List of time periods for the results, returned as a local time, sorted from the newest to the oldest.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "format" : "date-time",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "timePeriodsUtc" : {
            "type" : "array",
            "description" : "List of time periods for the results, returned as absolute UTC time.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "types" : [ "array" ]
          },
          "executedAtTimestamps" : {
            "type" : "array",
            "description" : "List of absolute timestamp (UTC) when the check was executed or an error was raised.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "types" : [ "array" ]
          },
          "timePeriodDisplayTexts" : {
            "type" : "array",
            "description" : "List of time periods, sorted descending, returned as a text with a possible time zone.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "statuses" : {
            "type" : "array",
            "description" : "List of check severity levels or an error status, indexes with the severity levels match the time periods.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CheckResultStatus",
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "dataGroups" : {
            "type" : "array",
            "description" : "List of data group names. Identifies the data group with the highest severity or error result.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "results" : {
            "type" : "array",
            "description" : "List of sensor results. Returns the data quality result readout for the data group with the alert of the highest severity level.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "number",
              "format" : "double",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "number" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "checkHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Check hash."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "Check category name."
            },
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "comparisonName" : {
              "type" : "string",
              "description" : "Optional table comparison name for table comparison checks only."
            },
            "timePeriods" : {
              "type" : "array",
              "description" : "List of time periods for the results, returned as a local time, sorted from the newest to the oldest.",
              "items" : {
                "type" : "string",
                "format" : "date-time"
              }
            },
            "timePeriodsUtc" : {
              "type" : "array",
              "description" : "List of time periods for the results, returned as absolute UTC time.",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "executedAtTimestamps" : {
              "type" : "array",
              "description" : "List of absolute timestamp (UTC) when the check was executed or an error was raised.",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "timePeriodDisplayTexts" : {
              "type" : "array",
              "description" : "List of time periods, sorted descending, returned as a text with a possible time zone.",
              "items" : {
                "type" : "string"
              }
            },
            "statuses" : {
              "type" : "array",
              "description" : "List of check severity levels or an error status, indexes with the severity levels match the time periods.",
              "items" : {
                "type" : "string",
                "enum" : [ "valid", "warning", "error", "fatal", "execution_error" ]
              }
            },
            "dataGroups" : {
              "type" : "array",
              "description" : "List of data group names. Identifies the data group with the highest severity or error result.",
              "items" : {
                "type" : "string"
              }
            },
            "results" : {
              "type" : "array",
              "description" : "List of sensor results. Returns the data quality result readout for the data group with the alert of the highest severity level.",
              "items" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      },
      "CheckSearchFilters" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "The connection (data source) name. Supports search patterns in the format: 'source\\*', '\\*_prod', 'prefix\\*suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "fullTableName" : {
            "type" : "string",
            "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. The schema and table name accept patterns both in the schema name and table name parts. Sample patterns are: 'schema_name.tab_prefix_\\*', 'schema_name.*', '*.*', 'schema_name.\\*_customer', 'schema_name.tab_\\*_suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "A boolean flag to target enabled tables, columns or checks. When the value of this field is not set, the default value of this field is *true*, targeting only tables, columns and checks that are not implicitly disabled.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags assigned to the table. All tags must be present on a table to match. The tags can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The tags are assigned to the table on the data grouping screen when any of the data grouping hierarchy level is assigned a static value, which is a tag.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "labels" : {
            "type" : "array",
            "description" : "An array of labels assigned to the table. All labels must be present on a table to match. The labels can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The labels are assigned on the labels screen and stored in the *labels* node in the *.dqotable.yaml* file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "column" : {
            "type" : "string",
            "description" : "The column name. This field accepts search patterns in the format: 'fk_\\*', '\\*_id', 'prefix\\*suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "columnDataType" : {
            "type" : "string",
            "description" : "The column data type that was imported from the data source and is stored in the [columns -> column_name -> type_snapshot -> column_type](../../reference/yaml/TableYaml/#columntypesnapshotspec) field in the *.dqotable.yaml* file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "columnNullable" : {
            "type" : "boolean",
            "description" : "Optional filter to find only nullable (when the value is *true*) or not nullable (when the value is *false*) columns, based on the value of the [columns -> column_name -> type_snapshot -> nullable](../../reference/yaml/TableYaml/#columntypesnapshotspec) field in the *.dqotable.yaml* file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "checkTarget" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "checkType" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "timeScale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "The target check category, for example: *nulls*, *volume*, *anomaly*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableComparisonName" : {
            "type" : "string",
            "description" : "The name of a configured table comparison. When the table comparison is provided, DQOps will only perform table comparison checks that compare data between tables.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "The target check name to run only this named check. Uses the short check name which is the name of the deepest folder in the *checks* folder. This field supports search patterns such as: 'profiling_\\*', '\\*_count', 'profiling_\\*_percent'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "The target sensor name to run only data quality checks that are using this sensor. Uses the full sensor name which is the full folder path within the *sensors* folder. This field supports search patterns such as: 'table/volume/row_\\*', '\\*_count', 'table/volume/prefix_\\*_suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkHierarchyIdsModels" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/HierarchyIdModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Target data quality checks filter, identifies which checks on which tables and columns should be executed.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "The connection (data source) name. Supports search patterns in the format: 'source\\*', '\\*_prod', 'prefix\\*suffix'."
            },
            "fullTableName" : {
              "type" : "string",
              "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. The schema and table name accept patterns both in the schema name and table name parts. Sample patterns are: 'schema_name.tab_prefix_\\*', 'schema_name.*', '*.*', 'schema_name.\\*_customer', 'schema_name.tab_\\*_suffix'."
            },
            "enabled" : {
              "type" : "boolean",
              "description" : "A boolean flag to target enabled tables, columns or checks. When the value of this field is not set, the default value of this field is *true*, targeting only tables, columns and checks that are not implicitly disabled."
            },
            "tags" : {
              "type" : "array",
              "description" : "An array of tags assigned to the table. All tags must be present on a table to match. The tags can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The tags are assigned to the table on the data grouping screen when any of the data grouping hierarchy level is assigned a static value, which is a tag.",
              "items" : {
                "type" : "string"
              }
            },
            "labels" : {
              "type" : "array",
              "description" : "An array of labels assigned to the table. All labels must be present on a table to match. The labels can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The labels are assigned on the labels screen and stored in the *labels* node in the *.dqotable.yaml* file.",
              "items" : {
                "type" : "string"
              }
            },
            "column" : {
              "type" : "string",
              "description" : "The column name. This field accepts search patterns in the format: 'fk_\\*', '\\*_id', 'prefix\\*suffix'."
            },
            "columnDataType" : {
              "type" : "string",
              "description" : "The column data type that was imported from the data source and is stored in the [columns -> column_name -> type_snapshot -> column_type](../../reference/yaml/TableYaml/#columntypesnapshotspec) field in the *.dqotable.yaml* file."
            },
            "columnNullable" : {
              "type" : "boolean",
              "description" : "Optional filter to find only nullable (when the value is *true*) or not nullable (when the value is *false*) columns, based on the value of the [columns -> column_name -> type_snapshot -> nullable](../../reference/yaml/TableYaml/#columntypesnapshotspec) field in the *.dqotable.yaml* file."
            },
            "checkTarget" : {
              "type" : "string",
              "description" : "The target type of object to run checks. Supported values are: *table* to run only table level checks or *column* to run only column level checks.",
              "enum" : [ "table", "column" ]
            },
            "checkType" : {
              "type" : "string",
              "description" : "The target type of checks to run. Supported values are *profiling*, *monitoring* and *partitioned*.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "timeScale" : {
              "type" : "string",
              "description" : "The time scale of *monitoring* or *partitioned* checks to run. Supports running only *daily* or *monthly* checks. Daily monitoring checks will replace today's value for all captured check results.",
              "enum" : [ "daily", "monthly" ]
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "The target check category, for example: *nulls*, *volume*, *anomaly*."
            },
            "tableComparisonName" : {
              "type" : "string",
              "description" : "The name of a configured table comparison. When the table comparison is provided, DQOps will only perform table comparison checks that compare data between tables."
            },
            "checkName" : {
              "type" : "string",
              "description" : "The target check name to run only this named check. Uses the short check name which is the name of the deepest folder in the *checks* folder. This field supports search patterns such as: 'profiling_\\*', '\\*_count', 'profiling_\\*_percent'."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "The target sensor name to run only data quality checks that are using this sensor. Uses the full sensor name which is the full folder path within the *sensors* folder. This field supports search patterns such as: 'table/volume/row_\\*', '\\*_count', 'table/volume/prefix_\\*_suffix'."
            },
            "checkHierarchyIdsModels" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/HierarchyIdModel",
                "originalRef" : "#/components/schemas/HierarchyIdModel"
              }
            }
          },
          "description" : "Target data quality checks filter, identifies which checks on which tables and columns should be executed."
        }
      },
      "CheckTemplate" : {
        "type" : "object",
        "properties" : {
          "check_target" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "check_category" : {
            "type" : "string",
            "description" : "Data quality check category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_name" : {
            "type" : "string",
            "description" : "Data quality check name that is used in YAML.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text that describes the data quality check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_container_type" : {
            "$ref" : "#/components/schemas/CheckContainerTypeModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sensor_name" : {
            "type" : "string",
            "description" : "Full sensor name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_parameters_definitions" : {
            "type" : "array",
            "description" : "List of sensor parameter fields definitions.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ParameterDefinitionSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "rule_parameters_definitions" : {
            "type" : "array",
            "description" : "List of threshold (alerting) rule's parameters definitions (for a single rule, regardless of severity).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ParameterDefinitionSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Model depicting a named data quality check that can potentially be enabled, regardless to its position in hierarchy tree.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_target" : {
              "type" : "string",
              "description" : "Check target (table, column)",
              "enum" : [ "table", "column" ]
            },
            "check_category" : {
              "type" : "string",
              "description" : "Data quality check category."
            },
            "check_name" : {
              "type" : "string",
              "description" : "Data quality check name that is used in YAML."
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text that describes the data quality check."
            },
            "check_container_type" : {
              "description" : "Check type with time-scale.",
              "$ref" : "#/components/schemas/CheckContainerTypeModel",
              "originalRef" : "#/components/schemas/CheckContainerTypeModel"
            },
            "sensor_name" : {
              "type" : "string",
              "description" : "Full sensor name."
            },
            "sensor_parameters_definitions" : {
              "type" : "array",
              "description" : "List of sensor parameter fields definitions.",
              "items" : {
                "$ref" : "#/components/schemas/ParameterDefinitionSpec",
                "originalRef" : "#/components/schemas/ParameterDefinitionSpec"
              }
            },
            "rule_parameters_definitions" : {
              "type" : "array",
              "description" : "List of threshold (alerting) rule's parameters definitions (for a single rule, regardless of severity).",
              "items" : {
                "$ref" : "#/components/schemas/ParameterDefinitionSpec",
                "originalRef" : "#/components/schemas/ParameterDefinitionSpec"
              }
            }
          },
          "description" : "Model depicting a named data quality check that can potentially be enabled, regardless to its position in hierarchy tree."
        }
      },
      "CloudSynchronizationFoldersStatusModel" : {
        "type" : "object",
        "properties" : {
          "sources" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "sensors" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "rules" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "checks" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "settings" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "credentials" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "data_sensor_readouts" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "data_check_results" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "data_statistics" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "data_errors" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          },
          "data_incidents" : {
            "$ref" : "#/components/schemas/FolderSynchronizationStatus",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "sources" : {
              "type" : "string",
              "description" : "The synchronization status of the \"sources\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "sensors" : {
              "type" : "string",
              "description" : "The synchronization status of the \"sensors\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "rules" : {
              "type" : "string",
              "description" : "The synchronization status of the \"rules\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "checks" : {
              "type" : "string",
              "description" : "The synchronization status of the \"checks\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "settings" : {
              "type" : "string",
              "description" : "The synchronization status of the \"settings\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "credentials" : {
              "type" : "string",
              "description" : "The synchronization status of the \".credentials\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "data_sensor_readouts" : {
              "type" : "string",
              "description" : "The synchronization status of the \".data/sensor_readouts\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "data_check_results" : {
              "type" : "string",
              "description" : "The synchronization status of the \".data/check_results\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "data_statistics" : {
              "type" : "string",
              "description" : "The synchronization status of the \".data/statistics\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "data_errors" : {
              "type" : "string",
              "description" : "The synchronization status of the \".data/errors\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            },
            "data_incidents" : {
              "type" : "string",
              "description" : "The synchronization status of the \".data/incidents\" folder.",
              "enum" : [ "unchanged", "changed", "synchronizing" ]
            }
          }
        }
      },
      "CollectStatisticsOnTableQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "The name of the target connection.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_jobs_per_connection" : {
            "type" : "integer",
            "description" : "The maximum number of concurrent 'run checks on table' jobs that could be run on this connection. Limits the number of concurrent jobs.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statistics_collector_search_filters" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_scope" : {
            "$ref" : "#/components/schemas/StatisticsDataScope",
            "exampleSetFlag" : false
          },
          "dummy_sensor_execution" : {
            "type" : "boolean",
            "description" : "Boolean flag that enables a dummy statistics collection (sensors are executed, but the statistics results are not written to the parquet files).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "collect_statistics_result" : {
            "$ref" : "#/components/schemas/CollectStatisticsResult",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "The name of the target connection."
            },
            "max_jobs_per_connection" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The maximum number of concurrent 'run checks on table' jobs that could be run on this connection. Limits the number of concurrent jobs."
            },
            "table" : {
              "description" : "The full physical name (schema.table) of the target table.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "statistics_collector_search_filters" : {
              "description" : "Statistics collectors search filters that identify the type of statistics collector to run.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "data_scope" : {
              "type" : "string",
              "description" : "The target scope of collecting statistics. Statistics could be collected on a whole table or for each data grouping separately.",
              "enum" : [ "table", "data_group" ]
            },
            "dummy_sensor_execution" : {
              "type" : "boolean",
              "description" : "Boolean flag that enables a dummy statistics collection (sensors are executed, but the statistics results are not written to the parquet files)."
            },
            "collect_statistics_result" : {
              "description" : "The summary of the statistics collection job after if finished. Returns the number of collectors analyzed, columns analyzed, statistics results captured.",
              "$ref" : "#/components/schemas/CollectStatisticsResult",
              "originalRef" : "#/components/schemas/CollectStatisticsResult"
            }
          }
        }
      },
      "CollectStatisticsQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "statistics_collector_search_filters" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_scope" : {
            "$ref" : "#/components/schemas/StatisticsDataScope",
            "exampleSetFlag" : false
          },
          "dummy_sensor_execution" : {
            "type" : "boolean",
            "description" : "Boolean flag that enables a dummy statistics collection (sensors are executed, but the statistics results are not written to the parquet files).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "collect_statistics_result" : {
            "$ref" : "#/components/schemas/CollectStatisticsResult",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "statistics_collector_search_filters" : {
              "description" : "Statistics collectors search filters that identify the type of statistics collector to run.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "data_scope" : {
              "type" : "string",
              "description" : "The target scope of collecting statistics. Statistics could be collected on a whole table or for each data grouping separately.",
              "enum" : [ "table", "data_group" ]
            },
            "dummy_sensor_execution" : {
              "type" : "boolean",
              "description" : "Boolean flag that enables a dummy statistics collection (sensors are executed, but the statistics results are not written to the parquet files)."
            },
            "collect_statistics_result" : {
              "description" : "The summary of the statistics collection job after if finished. Returns the number of collectors analyzed, columns analyzed, statistics results captured.",
              "$ref" : "#/components/schemas/CollectStatisticsResult",
              "originalRef" : "#/components/schemas/CollectStatisticsResult"
            }
          }
        }
      },
      "CollectStatisticsQueueJobResult" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "result" : {
            "$ref" : "#/components/schemas/CollectStatisticsResult",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          }
        },
        "description" : "Object returned from the operation that queues a \"collect statistics\" job. The result contains the job id that was started and optionally can also contain the result of collecting the statistics  if the operation was started with wait=true parameter to wait for the \"collect statistics\" job to finish.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "description" : "Job id that identifies a job that was started on the DQOps job queue.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "result" : {
              "description" : "Optional result object that is returned only when the wait parameter was true and the \"collect statistics\" job has finished. Contains the summary result of collecting basic statistics, including the number of statistics collectors (queries) that managed to capture metrics about the table(s). ",
              "$ref" : "#/components/schemas/CollectStatisticsResult",
              "originalRef" : "#/components/schemas/CollectStatisticsResult"
            },
            "status" : {
              "type" : "string",
              "description" : "Job status",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            }
          },
          "description" : "Object returned from the operation that queues a \"collect statistics\" job. The result contains the job id that was started and optionally can also contain the result of collecting the statistics  if the operation was started with wait=true parameter to wait for the \"collect statistics\" job to finish."
        }
      },
      "CollectStatisticsResult" : {
        "type" : "object",
        "properties" : {
          "executed_statistics_collectors" : {
            "type" : "integer",
            "description" : "The total count of all executed statistics collectors.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "total_collectors_executed" : {
            "type" : "integer",
            "description" : "The count of executed statistics collectors.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "columns_analyzed" : {
            "type" : "integer",
            "description" : "The count of columns for which DQOps executed a collector and tried to read the statistics.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "columns_successfully_analyzed" : {
            "type" : "integer",
            "description" : "The count of columns for which DQOps managed to obtain statistics.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "total_collectors_failed" : {
            "type" : "integer",
            "description" : "The count of statistics collectors that failed to execute.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "total_collected_results" : {
            "type" : "integer",
            "description" : "The total number of results that were collected.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "description" : "Returns the result with the summary of the statistics collected.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "executed_statistics_collectors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all executed statistics collectors."
            },
            "total_collectors_executed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The count of executed statistics collectors."
            },
            "columns_analyzed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The count of columns for which DQOps executed a collector and tried to read the statistics."
            },
            "columns_successfully_analyzed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The count of columns for which DQOps managed to obtain statistics."
            },
            "total_collectors_failed" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The count of statistics collectors that failed to execute."
            },
            "total_collected_results" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of results that were collected."
            }
          },
          "description" : "Returns the result with the summary of the statistics collected."
        }
      },
      "ColumnAccuracyDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_total_sum_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_total_min_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_total_max_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_total_average_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_total_not_null_count_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_total_sum_match_percent" : {
              "description" : "Verifies that the percentage of difference in total sum of a column in a table and total sum of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec"
            },
            "daily_total_min_match_percent" : {
              "description" : "Verifies that the percentage of difference in total min of a column in a table and total min of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec"
            },
            "daily_total_max_match_percent" : {
              "description" : "Verifies that the percentage of difference in total max of a column in a table and total max of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec"
            },
            "daily_total_average_match_percent" : {
              "description" : "Verifies that the percentage of difference in total average of a column in a table and total average of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec"
            },
            "daily_total_not_null_count_match_percent" : {
              "description" : "Verifies that the percentage of difference in total not null count of a column in a table and total not null count of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnAccuracyDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            }
          }
        }
      },
      "ColumnAccuracyMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_total_sum_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_total_min_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_total_max_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_total_average_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_total_not_null_count_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_total_sum_match_percent" : {
              "description" : "Verifies that the percentage of difference in total sum of a column in a table and total sum of a column of another table does not exceed the set number. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec"
            },
            "monthly_total_min_match_percent" : {
              "description" : "Verifies that the percentage of difference in total min of a column in a table and total min of a column of another table does not exceed the set number. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec"
            },
            "monthly_total_max_match_percent" : {
              "description" : "Verifies that the percentage of difference in total max of a column in a table and total max of a column of another table does not exceed the set number. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec"
            },
            "monthly_total_average_match_percent" : {
              "description" : "Verifies that the percentage of difference in total average of a column in a table and total average of a column of another table does not exceed the set number. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec"
            },
            "monthly_total_not_null_count_match_percent" : {
              "description" : "Verifies that the percentage of difference in total not null count of a column in a table and total not null count of a column of another table does not exceed the set number. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnAccuracyMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            }
          }
        }
      },
      "ColumnAccuracyProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_total_sum_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_total_min_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_total_max_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_total_average_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_total_not_null_count_match_percent" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_total_sum_match_percent" : {
              "description" : "Verifies that percentage of the difference in total sum of a column in a table and total sum of a column of another table does not exceed the set number.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentCheckSpec"
            },
            "profile_total_min_match_percent" : {
              "description" : "Verifies that the percentage of difference in total min of a column in a table and total min of a column of another table does not exceed the set number.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentCheckSpec"
            },
            "profile_total_max_match_percent" : {
              "description" : "Verifies that the percentage of difference in total max of a column in a table and total max of a column of another table does not exceed the set number.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentCheckSpec"
            },
            "profile_total_average_match_percent" : {
              "description" : "Verifies that the percentage of difference in total average of a column in a table and total average of a column of another table does not exceed the set number.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentCheckSpec"
            },
            "profile_total_not_null_count_match_percent" : {
              "description" : "Verifies that the percentage of difference in total not null count of a column in a table and total not null count of a column of another table does not exceed the set number. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalAverageMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalAverageMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of average of a table column and of a average of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalAverageMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "referenced_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnAccuracyTotalMaxMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMaxMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of max of a table column and of a max of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalMaxMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "referenced_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnAccuracyTotalMinMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalMinMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of min of a table column and of a min of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalMinMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "referenced_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnAccuracyTotalNotNullCountMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalNotNullCountMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of row count of a table column and of a row count of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalNotNullCountMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "referenced_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnAccuracyTotalSumMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyTotalSumMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of sum of a table column and of a sum of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnAccuracyTotalSumMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "referenced_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnAnomalyDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_mean_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_change" : {
            "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_anomaly_differencing_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_anomaly_differencing" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_mean_change" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanCheckSpec"
            },
            "daily_mean_change_yesterday" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec"
            },
            "daily_median_change" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianCheckSpec"
            },
            "daily_median_change_yesterday" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec"
            },
            "daily_sum_change" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumCheckSpec"
            },
            "daily_sum_change_yesterday" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec"
            },
            "daily_mean_anomaly_stationary_30_days" : {
              "description" : "Verifies that the mean value in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec"
            },
            "daily_mean_anomaly_stationary" : {
              "description" : "Verifies that the mean value in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec"
            },
            "daily_median_anomaly_stationary_30_days" : {
              "description" : "Verifies that the median in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec"
            },
            "daily_median_anomaly_stationary" : {
              "description" : "Verifies that the median in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec"
            },
            "daily_sum_anomaly_differencing_30_days" : {
              "description" : "Verifies that the sum in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec"
            },
            "daily_sum_anomaly_differencing" : {
              "description" : "Verifies that the sum in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec"
            },
            "daily_mean_change_7_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec"
            },
            "daily_mean_change_30_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec"
            },
            "daily_median_change_7_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec"
            },
            "daily_median_change_30_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec"
            },
            "daily_sum_change_7_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec"
            },
            "daily_sum_change_30_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnAnomalyDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_mean_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_change" : {
            "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionSum30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_mean_change" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanCheckSpec"
            },
            "daily_partition_mean_change_yesterday" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec"
            },
            "daily_partition_median_change" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianCheckSpec"
            },
            "daily_partition_median_change_yesterday" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec"
            },
            "daily_partition_sum_change" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumCheckSpec"
            },
            "daily_partition_sum_change_yesterday" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec"
            },
            "daily_partition_mean_anomaly_stationary_30_days" : {
              "description" : "Verifies that the mean value in a column is within a percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec"
            },
            "daily_partition_mean_anomaly_stationary" : {
              "description" : "Verifies that the mean value in a column is within a percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec"
            },
            "daily_partition_median_anomaly_stationary_30_days" : {
              "description" : "Verifies that the median in a column is within a percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec"
            },
            "daily_partition_median_anomaly_stationary" : {
              "description" : "Verifies that the median in a column is within a percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec"
            },
            "daily_partition_sum_anomaly_stationary_30_days" : {
              "description" : "Verifies that the sum in a column is within a percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionSum30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionSum30DaysCheckSpec"
            },
            "daily_partition_sum_anomaly_stationary" : {
              "description" : "Verifies that the sum in a column is within a percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionSumCheckSpec"
            },
            "daily_partition_mean_change_7_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec"
            },
            "daily_partition_mean_change_30_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec"
            },
            "daily_partition_median_change_7_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec"
            },
            "daily_partition_median_change_30_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec"
            },
            "daily_partition_sum_change_7_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec"
            },
            "daily_partition_sum_change_30_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyDifferencingDistinctCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyDifferencingSum30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyDifferencingSumCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_mean_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_median_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sum_change" : {
            "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_mean_change" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanCheckSpec"
            },
            "monthly_median_change" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianCheckSpec"
            },
            "monthly_sum_change" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumCheckSpec"
            }
          }
        }
      },
      "ColumnAnomalyMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_mean_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_median_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sum_change" : {
            "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_mean_change" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanCheckSpec"
            },
            "monthly_partition_median_change" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianCheckSpec"
            },
            "monthly_partition_sum_change" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumCheckSpec"
            }
          }
        }
      },
      "ColumnAnomalyProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_mean_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_change" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_change" : {
            "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_anomaly_differencing_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_anomaly_differencing" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_mean_change" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanCheckSpec"
            },
            "profile_mean_change_yesterday" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSinceYesterdayCheckSpec"
            },
            "profile_median_change" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianCheckSpec"
            },
            "profile_median_change_yesterday" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSinceYesterdayCheckSpec"
            },
            "profile_sum_change" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumCheckSpec"
            },
            "profile_sum_change_yesterday" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSinceYesterdayCheckSpec"
            },
            "profile_mean_anomaly_stationary_30_days" : {
              "description" : "Verifies that the mean value in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMean30DaysCheckSpec"
            },
            "profile_mean_anomaly_stationary" : {
              "description" : "Verifies that the mean value in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMeanCheckSpec"
            },
            "profile_median_anomaly_stationary_30_days" : {
              "description" : "Verifies that the median in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedian30DaysCheckSpec"
            },
            "profile_median_anomaly_stationary" : {
              "description" : "Verifies that the median in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryMedianCheckSpec"
            },
            "profile_sum_anomaly_differencing_30_days" : {
              "description" : "Verifies that the sum in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingSum30DaysCheckSpec"
            },
            "profile_sum_anomaly_differencing" : {
              "description" : "Verifies that the sum in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingSumCheckSpec"
            },
            "profile_mean_change_7_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince7DaysCheckSpec"
            },
            "profile_mean_change_30_days" : {
              "description" : "Verifies that the mean value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMeanSince30DaysCheckSpec"
            },
            "profile_median_change_7_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince7DaysCheckSpec"
            },
            "profile_median_change_30_days" : {
              "description" : "Verifies that the median in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeMedianSince30DaysCheckSpec"
            },
            "profile_sum_change_7_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince7DaysCheckSpec"
            },
            "profile_sum_change_30_days" : {
              "description" : "Verifies that the sum in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeSumSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryDistinctPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryMean30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryMeanCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryMedian30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryMedianCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryNullPercent30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryNullPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryPartitionDistinctCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryPartitionSum30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnAnomalyStationaryPartitionSumCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "ColumnBoolDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_true_percent" : {
            "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_false_percent" : {
            "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_true_percent" : {
              "description" : "Verifies that the percentage of true values in a column does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnTruePercentCheckSpec"
            },
            "daily_false_percent" : {
              "description" : "Verifies that the percentage of false values in a column does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnFalsePercentCheckSpec"
            }
          }
        }
      },
      "ColumnBoolDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_true_percent" : {
            "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_false_percent" : {
            "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_true_percent" : {
              "description" : "Verifies that the percentage of true values in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnTruePercentCheckSpec"
            },
            "daily_partition_false_percent" : {
              "description" : "Verifies that the percentage of false values in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnFalsePercentCheckSpec"
            }
          }
        }
      },
      "ColumnBoolFalsePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnBoolMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_true_percent" : {
            "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_false_percent" : {
            "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_true_percent" : {
              "description" : "Verifies that the percentage of true values in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnTruePercentCheckSpec"
            },
            "monthly_false_percent" : {
              "description" : "Verifies that the percentage of false values in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnFalsePercentCheckSpec"
            }
          }
        }
      },
      "ColumnBoolMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_true_percent" : {
            "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_false_percent" : {
            "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_true_percent" : {
              "description" : "Verifies that the percentage of true values in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnTruePercentCheckSpec"
            },
            "monthly_partition_false_percent" : {
              "description" : "Verifies that the percentage of false values in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnFalsePercentCheckSpec"
            }
          }
        }
      },
      "ColumnBoolProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_true_percent" : {
            "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_false_percent" : {
            "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_true_percent" : {
              "description" : "Verifies that the percentage of true values in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnTruePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnTruePercentCheckSpec"
            },
            "profile_false_percent" : {
              "description" : "Verifies that the percentage of false values in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnFalsePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnFalsePercentCheckSpec"
            }
          }
        }
      },
      "ColumnBoolTruePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnChangeDistinctCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctCountSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctCountSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctCountSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctPercentSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctPercentSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeDistinctPercentSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMeanCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMeanSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMeanSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMeanSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMedianCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMedianSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMedianSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeMedianSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeNullPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeNullPercentSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeNullPercentSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeNullPercentSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeSumCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeSumSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeSumSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnChangeSumSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "ColumnColumnExistsSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnColumnTypeHashSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnComparisonDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "reference_column" : {
            "type" : "string",
            "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "daily_sum_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_min_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_max_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_not_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "reference_column" : {
              "type" : "string",
              "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to."
            },
            "daily_sum_match" : {
              "description" : "Verifies that percentage of the difference between the sum of values in a tested column in a parent table and the sum of a values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec"
            },
            "daily_min_match" : {
              "description" : "Verifies that percentage of the difference between the minimum value in a tested column in a parent table and the minimum value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec"
            },
            "daily_max_match" : {
              "description" : "Verifies that percentage of the difference between the maximum value in a tested column in a parent table and the maximum value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec"
            },
            "daily_mean_match" : {
              "description" : "Verifies that percentage of the difference between the mean (average) value in a tested column in a parent table and the mean (average) value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec"
            },
            "daily_not_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of not null values in a tested column in a parent table and the count of not null values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec"
            },
            "daily_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of null values in a tested column in a parent table and the count of null values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec"
            }
          }
        }
      },
      "ColumnComparisonDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "reference_column" : {
            "type" : "string",
            "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "daily_partition_sum_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_min_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_max_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_not_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "reference_column" : {
              "type" : "string",
              "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to."
            },
            "daily_partition_sum_match" : {
              "description" : "Verifies that percentage of the difference between the sum of values in a tested column in a parent table and the sum of a values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec"
            },
            "daily_partition_min_match" : {
              "description" : "Verifies that percentage of the difference between the minimum value in a tested column in a parent table and the minimum value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec"
            },
            "daily_partition_max_match" : {
              "description" : "Verifies that percentage of the difference between the maximum value in a tested column in a parent table and the maximum value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec"
            },
            "daily_partition_mean_match" : {
              "description" : "Verifies that percentage of the difference between the mean (average) value in a tested column in a parent table and the mean (average) value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec"
            },
            "daily_partition_not_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of not null values in a tested column in a parent table and the count of not null values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec"
            },
            "daily_partition_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of null values in a tested column in a parent table and the count of null values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each daily partition (each day of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec"
            }
          }
        }
      },
      "ColumnComparisonMaxMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the maximum values in the column in the parent table and the maximum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the maximum values in the column in the parent table and the maximum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the maximum values in the column in the parent table and the maximum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnComparisonMeanMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the mean (average) of the values in the column in the parent table and the mean (average) of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the mean (average) of the values in the column in the parent table and the mean (average) of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the mean (average) of the values in the column in the parent table and the mean (average) of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnComparisonMinMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMinSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNumericMinSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMinSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the minimum values in the column in the parent table and the minimum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the minimum values in the column in the parent table and the minimum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the minimum values in the column in the parent table and the minimum value in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnComparisonModel" : {
        "type" : "object",
        "properties" : {
          "compared_column_name" : {
            "type" : "string",
            "description" : "The name of the compared column in the compared table (the tested table). The REST API returns all columns defined in the metadata.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_column_name" : {
            "type" : "string",
            "description" : "The name of the reference column in the reference table (the source of truth). Set the name of the reference column to enable comparison between the compared and the reference columns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compare_min" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_max" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_sum" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_mean" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_null_count" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_not_null_count" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "The column to column comparison model used to select which measures (min, max, sum, mean, null count, not nul count) are compared for this column between the compared (tested) column and the reference column from the reference table.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "compared_column_name" : {
              "type" : "string",
              "description" : "The name of the compared column in the compared table (the tested table). The REST API returns all columns defined in the metadata."
            },
            "reference_column_name" : {
              "type" : "string",
              "description" : "The name of the reference column in the reference table (the source of truth). Set the name of the reference column to enable comparison between the compared and the reference columns."
            },
            "compare_min" : {
              "description" : "The column compare configuration for comparing the minimum value between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_max" : {
              "description" : "The column compare configuration for comparing the maximum value between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_sum" : {
              "description" : "The column compare configuration for comparing the sum of values between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_mean" : {
              "description" : "The column compare configuration for comparing the mean (average) value between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_null_count" : {
              "description" : "The column compare configuration for comparing the count of null values between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_not_null_count" : {
              "description" : "The column compare configuration for comparing the count of not null values between the compared (tested) column and the reference column. Leave null when the measure is not compared.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            }
          },
          "description" : "The column to column comparison model used to select which measures (min, max, sum, mean, null count, not nul count) are compared for this column between the compared (tested) column and the reference column from the reference table."
        }
      },
      "ColumnComparisonMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "reference_column" : {
            "type" : "string",
            "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "monthly_sum_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_min_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_max_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_mean_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_not_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "reference_column" : {
              "type" : "string",
              "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to."
            },
            "monthly_sum_match" : {
              "description" : "Verifies that percentage of the difference between the sum of values in a tested column in a parent table and the sum of a values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec"
            },
            "monthly_min_match" : {
              "description" : "Verifies that percentage of the difference between the minimum value in a tested column in a parent table and the minimum value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec"
            },
            "monthly_max_match" : {
              "description" : "Verifies that percentage of the difference between the maximum value in a tested column in a parent table and the maximum value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec"
            },
            "monthly_mean_match" : {
              "description" : "Verifies that percentage of the difference between the mean (average) value in a tested column in a parent table and the mean (average) value in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec"
            },
            "monthly_not_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of not null values in a tested column in a parent table and the count of not null values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec"
            },
            "monthly_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of null values in a tested column in a parent table and the count of null values in a column in the reference table. The difference must be below defined percentage thresholds. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec"
            }
          }
        }
      },
      "ColumnComparisonMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "reference_column" : {
            "type" : "string",
            "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "monthly_partition_sum_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_min_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_max_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_mean_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_not_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "reference_column" : {
              "type" : "string",
              "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to."
            },
            "monthly_partition_sum_match" : {
              "description" : "Verifies that percentage of the difference between the sum of values in a tested column in a parent table and the sum of a values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec"
            },
            "monthly_partition_min_match" : {
              "description" : "Verifies that percentage of the difference between the minimum value in a tested column in a parent table and the minimum value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec"
            },
            "monthly_partition_max_match" : {
              "description" : "Verifies that percentage of the difference between the maximum value in a tested column in a parent table and the maximum value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec"
            },
            "monthly_partition_mean_match" : {
              "description" : "Verifies that percentage of the difference between the mean (average) value in a tested column in a parent table and the mean (average) value in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec"
            },
            "monthly_partition_not_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of not null values in a tested column in a parent table and the count of not null values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec"
            },
            "monthly_partition_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of null values in a tested column in a parent table and the count of null values in a column in the reference table. The difference must be below defined percentage thresholds. Compares each monthly partition (each month of data) between the compared table and the reference table (the source of truth).",
              "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec"
            }
          }
        }
      },
      "ColumnComparisonNotNullCountMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the count of not null values in the column in the parent table and the count of not null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the count of not null values in the column in the parent table and the count of not null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the count of not null values in the column in the parent table and the count of not null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnComparisonNullCountMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the count of null values in the column in the parent table and the count of null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the count of null values in the column in the parent table and the count of null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the count of null values in the column in the parent table and the count of null values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnComparisonProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "reference_column" : {
            "type" : "string",
            "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "profile_sum_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_min_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_max_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_not_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_null_count_match" : {
            "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "reference_column" : {
              "type" : "string",
              "description" : "The name of the reference column name in the reference table. It is the column to which the current column is compared to."
            },
            "profile_sum_match" : {
              "description" : "Verifies that percentage of the difference between the sum of values in a tested column in a parent table and the sum of a values in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonSumMatchCheckSpec"
            },
            "profile_min_match" : {
              "description" : "Verifies that percentage of the difference between the minimum value in a tested column in a parent table and the minimum value in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMinMatchCheckSpec"
            },
            "profile_max_match" : {
              "description" : "Verifies that percentage of the difference between the maximum value in a tested column in a parent table and the maximum value in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMaxMatchCheckSpec"
            },
            "profile_mean_match" : {
              "description" : "Verifies that percentage of the difference between the mean (average) value in a tested column in a parent table and the mean (average) value in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonMeanMatchCheckSpec"
            },
            "profile_not_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of not null values in a tested column in a parent table and the count of not null values in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNotNullCountMatchCheckSpec"
            },
            "profile_null_count_match" : {
              "description" : "Verifies that percentage of the difference between the count of null values in a tested column in a parent table and the count of null values in a column in the reference table. The difference must be below defined percentage thresholds.",
              "$ref" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/ColumnComparisonNullCountMatchCheckSpec"
            }
          }
        }
      },
      "ColumnComparisonSumMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sum sensor parameters.",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the sum of the values in the column in the parent table and the sum of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the sum of the values in the column in the parent table and the sum of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the sum of the values in the column in the parent table and the sum of values in the compared column (in the reference table) do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnCurrentDataQualityStatusModel" : {
        "type" : "object",
        "properties" : {
          "highest_severity_level" : {
            "$ref" : "#/components/schemas/CheckResultStatus",
            "exampleSetFlag" : false
          },
          "last_check_executed_at" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the most recent data quality check was executed on the column.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "executed_checks" : {
            "type" : "integer",
            "description" : "The total number of most recent checks that were executed on the column. Table comparison checks that are comparing groups of data are counted as the number of compared data groups.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "valid_results" : {
            "type" : "integer",
            "description" : "The number of most recent valid data quality checks that passed without raising any issues.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "warnings" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising a warning severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "errors" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising an error severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "fatals" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising a fatal severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "execution_errors" : {
            "type" : "integer",
            "description" : "The number of data quality check execution errors that were reported due to access issues to the data source, invalid mapping in DQOps, invalid queries in data quality sensors or invalid python rules. When an execution error is reported, the configuration of a data quality check on a column must be updated.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CheckCurrentDataQualityStatusModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status."
            }
          }
        },
        "description" : "The column's most recent data quality status. It is a summary of the results of the most recently executed data quality checks on the column. Verify the value of the highest_severity_level to see if there are any data quality issues on the column. The values of severity levels are: 0 - all data quality checks passed, 1 - a warning was detected, 2 - an error was detected, 3 - a fatal data quality issue was detected.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "highest_severity_level" : {
              "type" : "string",
              "description" : "The severity of the highest identified data quality issue. This field will be null if no data quality checks were executed on the column.",
              "enum" : [ "valid", "warning", "error", "fatal", "execution_error" ]
            },
            "last_check_executed_at" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the most recent data quality check was executed on the column."
            },
            "executed_checks" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of most recent checks that were executed on the column. Table comparison checks that are comparing groups of data are counted as the number of compared data groups."
            },
            "valid_results" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent valid data quality checks that passed without raising any issues."
            },
            "warnings" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising a warning severity data quality issue."
            },
            "errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising an error severity data quality issue."
            },
            "fatals" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising a fatal severity data quality issue."
            },
            "execution_errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data quality check execution errors that were reported due to access issues to the data source, invalid mapping in DQOps, invalid queries in data quality sensors or invalid python rules. When an execution error is reported, the configuration of a data quality check on a column must be updated."
            },
            "checks" : {
              "type" : "object",
              "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CheckCurrentDataQualityStatusModel",
                "originalRef" : "#/definitions/CheckCurrentDataQualityStatusModel"
              }
            }
          },
          "description" : "The column's most recent data quality status. It is a summary of the results of the most recently executed data quality checks on the column. Verify the value of the highest_severity_level to see if there are any data quality issues on the column. The values of severity levels are: 0 - all data quality checks passed, 1 - a warning was detected, 2 - an error was detected, 3 - a fatal data quality issue was detected."
        }
      },
      "ColumnDailyMonitoringCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "numeric" : {
            "$ref" : "#/components/schemas/ColumnNumericDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datetime" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "pii" : {
            "$ref" : "#/components/schemas/ColumnPiiDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/ColumnSqlDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "bool" : {
            "$ref" : "#/components/schemas/ColumnBoolDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "integrity" : {
            "$ref" : "#/components/schemas/ColumnIntegrityDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/ColumnAccuracyDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datatype" : {
            "$ref" : "#/components/schemas/ColumnDatatypeDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "anomaly" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/ColumnSchemaDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnComparisonDailyMonitoringChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "nulls" : {
              "description" : "Daily monitoring checks of nulls in the column",
              "$ref" : "#/components/schemas/ColumnNullsDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNullsDailyMonitoringChecksSpec"
            },
            "numeric" : {
              "description" : "Daily monitoring checks of numeric in the column",
              "$ref" : "#/components/schemas/ColumnNumericDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNumericDailyMonitoringChecksSpec"
            },
            "strings" : {
              "description" : "Daily monitoring checks of strings in the column",
              "$ref" : "#/components/schemas/ColumnStringsDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnStringsDailyMonitoringChecksSpec"
            },
            "uniqueness" : {
              "description" : "Daily monitoring checks of uniqueness in the column",
              "$ref" : "#/components/schemas/ColumnUniquenessDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDailyMonitoringChecksSpec"
            },
            "datetime" : {
              "description" : "Daily monitoring checks of datetime in the column",
              "$ref" : "#/components/schemas/ColumnDatetimeDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDailyMonitoringChecksSpec"
            },
            "pii" : {
              "description" : "Daily monitoring checks of Personal Identifiable Information (PII) in the column",
              "$ref" : "#/components/schemas/ColumnPiiDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnPiiDailyMonitoringChecksSpec"
            },
            "sql" : {
              "description" : "Daily monitoring checks of custom SQL checks in the column",
              "$ref" : "#/components/schemas/ColumnSqlDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSqlDailyMonitoringChecksSpec"
            },
            "bool" : {
              "description" : "Daily monitoring checks of booleans in the column",
              "$ref" : "#/components/schemas/ColumnBoolDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnBoolDailyMonitoringChecksSpec"
            },
            "integrity" : {
              "description" : "Daily monitoring checks of integrity in the column",
              "$ref" : "#/components/schemas/ColumnIntegrityDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityDailyMonitoringChecksSpec"
            },
            "accuracy" : {
              "description" : "Daily monitoring checks of accuracy in the column",
              "$ref" : "#/components/schemas/ColumnAccuracyDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyDailyMonitoringChecksSpec"
            },
            "datatype" : {
              "description" : "Daily monitoring checks of datatype in the column",
              "$ref" : "#/components/schemas/ColumnDatatypeDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeDailyMonitoringChecksSpec"
            },
            "anomaly" : {
              "description" : "Daily monitoring checks of anomaly in the column",
              "$ref" : "#/components/schemas/ColumnAnomalyDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDailyMonitoringChecksSpec"
            },
            "schema" : {
              "description" : "Daily monitoring column schema checks",
              "$ref" : "#/components/schemas/ColumnSchemaDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaDailyMonitoringChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnComparisonDailyMonitoringChecksSpec",
                "originalRef" : "#/definitions/ColumnComparisonDailyMonitoringChecksSpec"
              }
            }
          }
        }
      },
      "ColumnDailyPartitionedCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "numeric" : {
            "$ref" : "#/components/schemas/ColumnNumericDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datetime" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "pii" : {
            "$ref" : "#/components/schemas/ColumnPiiDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/ColumnSqlDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "bool" : {
            "$ref" : "#/components/schemas/ColumnBoolDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "integrity" : {
            "$ref" : "#/components/schemas/ColumnIntegrityDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/ColumnAccuracyDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datatype" : {
            "$ref" : "#/components/schemas/ColumnDatatypeDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "anomaly" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnComparisonDailyPartitionedChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "nulls" : {
              "description" : "Daily partitioned checks of nulls in the column",
              "$ref" : "#/components/schemas/ColumnNullsDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNullsDailyPartitionedChecksSpec"
            },
            "numeric" : {
              "description" : "Daily partitioned checks of numeric in the column",
              "$ref" : "#/components/schemas/ColumnNumericDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNumericDailyPartitionedChecksSpec"
            },
            "strings" : {
              "description" : "Daily partitioned checks of strings in the column",
              "$ref" : "#/components/schemas/ColumnStringsDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnStringsDailyPartitionedChecksSpec"
            },
            "uniqueness" : {
              "description" : "Daily partitioned checks of uniqueness in the column",
              "$ref" : "#/components/schemas/ColumnUniquenessDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDailyPartitionedChecksSpec"
            },
            "datetime" : {
              "description" : "Daily partitioned checks of datetime in the column",
              "$ref" : "#/components/schemas/ColumnDatetimeDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDailyPartitionedChecksSpec"
            },
            "pii" : {
              "description" : "Daily partitioned checks of Personal Identifiable Information (PII) in the column",
              "$ref" : "#/components/schemas/ColumnPiiDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnPiiDailyPartitionedChecksSpec"
            },
            "sql" : {
              "description" : "Daily partitioned checks using custom SQL expressions evaluated on the column",
              "$ref" : "#/components/schemas/ColumnSqlDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSqlDailyPartitionedChecksSpec"
            },
            "bool" : {
              "description" : "Daily partitioned checks for booleans in the column",
              "$ref" : "#/components/schemas/ColumnBoolDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnBoolDailyPartitionedChecksSpec"
            },
            "integrity" : {
              "description" : "Daily partitioned checks for integrity in the column",
              "$ref" : "#/components/schemas/ColumnIntegrityDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityDailyPartitionedChecksSpec"
            },
            "accuracy" : {
              "description" : "Daily partitioned checks for accuracy in the column",
              "$ref" : "#/components/schemas/ColumnAccuracyDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyDailyPartitionedChecksSpec"
            },
            "datatype" : {
              "description" : "Daily partitioned checks for datatype in the column",
              "$ref" : "#/components/schemas/ColumnDatatypeDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeDailyPartitionedChecksSpec"
            },
            "anomaly" : {
              "description" : "Daily partitioned checks for anomaly in the column",
              "$ref" : "#/components/schemas/ColumnAnomalyDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDailyPartitionedChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnComparisonDailyPartitionedChecksSpec",
                "originalRef" : "#/definitions/ColumnComparisonDailyPartitionedChecksSpec"
              }
            }
          }
        }
      },
      "ColumnDatatypeDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_string_datatype_detected" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_datatype_changed" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_string_datatype_detected" : {
              "description" : "Detects the data type of text values stored in the column. The sensor returns the code of the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Raises a data quality issue when the detected data type does not match the expected data type. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec"
            },
            "daily_string_datatype_changed" : {
              "description" : "Detects that the data type of texts stored in a text column has changed since the last verification. The sensor returns the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnDatatypeDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_string_datatype_detected" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_datatype_changed" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_string_datatype_detected" : {
              "description" : "Detects the data type of text values stored in the column. The sensor returns the code of the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Raises a data quality issue when the detected data type does not match the expected data type. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec"
            },
            "daily_partition_string_datatype_changed" : {
              "description" : "Detects that the data type of texts stored in a text column has changed when compared to an earlier not empty partition. The sensor returns the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnDatatypeMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_string_datatype_detected" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_datatype_changed" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_string_datatype_detected" : {
              "description" : "Detects the data type of text values stored in the column. The sensor returns the code of the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Raises a data quality issue when the detected data type does not match the expected data type. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec"
            },
            "monthly_string_datatype_changed" : {
              "description" : "Detects that the data type of texts stored in a text column has changed since the last verification. The sensor returns the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnDatatypeMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_string_datatype_detected" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_datatype_changed" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_string_datatype_detected" : {
              "description" : "Detects the data type of text values stored in the column. The sensor returns the code of the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Raises a data quality issue when the detected data type does not match the expected data type. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec"
            },
            "monthly_partition_string_datatype_changed" : {
              "description" : "Detects that the data type of texts stored in a text column has changed when compared to an earlier not empty partition. The sensor returns the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnDatatypeProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_string_datatype_detected" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_datatype_changed" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_string_datatype_detected" : {
              "description" : "Detects the data type of text values stored in the column. The sensor returns the code of the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types. Raises a data quality issue when the detected data type does not match the expected data type.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectedCheckSpec"
            },
            "profile_string_datatype_changed" : {
              "description" : "Detects that the data type of texts stored in a text column has changed since the last verification. The sensor returns the detected data type of a column: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnDatatypeStringDatatypeChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "The sensor parameters for a sensor that returns a value that identifies the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check, detects that the data type of values stored in a column has changed since the last time it was evaluated or the data type in the current daily/monthly partition differs from the data type in the previous partition.",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert), detects that the data type of values stored in a column has changed since the last time it was evaluated or the data type in the current daily/monthly partition differs from the data type in the previous partition.",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem, detects that the data type of values stored in a column has changed since the last time it was evaluated or the data type in the current daily/monthly partition differs from the data type in the previous partition.",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "ColumnDatatypeStringDatatypeDetectSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnDatatypeStringDatatypeDetectedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "The sensor parameters for a sensor that returns a value that identifies the detected type of column data: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types.",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check, detects that the data type of values stored in a column matches an expected data type code (1..7).",
              "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
              "originalRef" : "#/components/schemas/DatatypeEqualsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert), detects that the data type of values stored in a column matches an expected data type code (1..7).",
              "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
              "originalRef" : "#/components/schemas/DatatypeEqualsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem, detects that the data type of values stored in a column matches an expected data type code (1..7).",
              "$ref" : "#/components/schemas/DatatypeEqualsRuleParametersSpec",
              "originalRef" : "#/components/schemas/DatatypeEqualsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnDateValuesInFuturePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateValuesInFuturePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnDatetimeDateValuesInFuturePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateValuesInFuturePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of date values in future in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnDatetimeDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_date_match_format_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_date_values_in_future_percent" : {
            "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_datetime_value_in_range_date_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_date_match_format_percent" : {
              "description" : "Verifies that the percentage of date values matching the given format in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily monitoring.",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec"
            },
            "daily_date_values_in_future_percent" : {
              "description" : "Verifies that the percentage of date values in future in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec"
            },
            "daily_datetime_value_in_range_date_percent" : {
              "description" : "Verifies that the percentage of date values in the range defined by the user in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec"
            }
          }
        }
      },
      "ColumnDatetimeDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_date_match_format_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_date_values_in_future_percent" : {
            "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_datetime_value_in_range_date_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_date_match_format_percent" : {
              "description" : "Verifies that the percentage of date values matching the given format in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec"
            },
            "daily_partition_date_values_in_future_percent" : {
              "description" : "Verifies that the percentage of date values in future in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec"
            },
            "daily_partition_datetime_value_in_range_date_percent" : {
              "description" : "Verifies that the percentage of date values in the range defined by the user in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec"
            }
          }
        }
      },
      "ColumnDatetimeDateMatchFormatPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with matching date format in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnDatetimeDateMatchFormatPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "date_formats" : {
            "$ref" : "#/components/schemas/DatetimeBuiltInDateFormats",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "date_formats" : {
              "type" : "string",
              "description" : "Desired date format. Sensor will try to parse the column records and cast the data using this format.",
              "enum" : [ "DD/MM/YYYY", "DD-MM-YYYY", "DD.MM.YYYY", "YYYY-MM-DD" ]
            }
          }
        }
      },
      "ColumnDatetimeDateValuesInFuturePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnDatetimeMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_date_match_format_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_date_values_in_future_percent" : {
            "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_datetime_value_in_range_date_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_date_match_format_percent" : {
              "description" : "Verifies that the percentage of date values matching the given format in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly monitoring.",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec"
            },
            "monthly_date_values_in_future_percent" : {
              "description" : "Verifies that the percentage of date values in future in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec"
            },
            "monthly_datetime_value_in_range_date_percent" : {
              "description" : "Verifies that the percentage of date values in the range defined by the user in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec"
            }
          }
        }
      },
      "ColumnDatetimeMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_date_match_format_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_date_values_in_future_percent" : {
            "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_datetime_value_in_range_date_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_date_match_format_percent" : {
              "description" : "Verifies that the percentage of date values matching the given format in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec"
            },
            "monthly_partition_date_values_in_future_percent" : {
              "description" : "Verifies that the percentage of date values in future in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec"
            },
            "monthly_partition_datetime_value_in_range_date_percent" : {
              "description" : "Verifies that the percentage of date values in the range defined by the user in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec"
            }
          }
        }
      },
      "ColumnDatetimeProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_date_match_format_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_date_values_in_future_percent" : {
            "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_datetime_value_in_range_date_percent" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_date_match_format_percent" : {
              "description" : "Verifies that the percentage of date values matching the given format in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeDateMatchFormatPercentCheckSpec"
            },
            "profile_date_values_in_future_percent" : {
              "description" : "Verifies that the percentage of date values in future in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDateValuesInFuturePercentCheckSpec"
            },
            "profile_datetime_value_in_range_date_percent" : {
              "description" : "Verifies that the percentage of date values in the range defined by the user in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentCheckSpec"
            }
          }
        }
      },
      "ColumnDatetimeValueInRangeDatePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeValueInRangeDatePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of date values in the range defined by the user in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnDatetimeValueInRangeDatePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_value" : {
            "type" : "string",
            "description" : "Lower bound range variable.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_value" : {
            "type" : "string",
            "description" : "Upper bound range variable.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_value" : {
              "type" : "string",
              "format" : "date",
              "description" : "Lower bound range variable."
            },
            "max_value" : {
              "type" : "string",
              "format" : "date",
              "description" : "Upper bound range variable."
            }
          }
        }
      },
      "ColumnDistinctCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleWarningParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRule0ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleFatalParametersSpec"
            }
          }
        }
      },
      "ColumnDistinctPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with unique value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnDuplicateCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnDuplicatePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnExpectedNumbersInUseCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericExpectedNumbersInUseCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters that specify a list of expected numeric values that must be present in the column.",
              "$ref" : "#/components/schemas/ColumnNumericExpectedNumbersInUseCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericExpectedNumbersInUseCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule0ParametersSpec"
            },
            "error" : {
              "description" : "Alerting threshold that raises a data quality error when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a data quality fatal issue when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule2ParametersSpec"
            }
          }
        }
      },
      "ColumnExpectedStringsInTopValuesCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsExpectedStringsInTopValuesCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters that specify a list of expected most popular string values that should be found in the column. The second parameter is 'top', which is the limit of the most popular column values to find in the tested column.",
              "$ref" : "#/components/schemas/ColumnStringsExpectedStringsInTopValuesCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsExpectedStringsInTopValuesCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when too many expected values were not found among the TOP most popular values in the tested column.",
              "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule0ParametersSpec"
            },
            "error" : {
              "description" : "Alerting threshold that raises a data quality error when too many expected values were not found among the TOP most popular values in the tested column.",
              "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a data quality fatal issue when too many expected values were not found among the TOP most popular values in the tested column.",
              "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule2ParametersSpec"
            }
          }
        }
      },
      "ColumnExpectedStringsInUseCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsExpectedStringsInUseCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters that specify a list of expected string values that must be present in the column.",
              "$ref" : "#/components/schemas/ColumnStringsExpectedStringsInUseCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsExpectedStringsInUseCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule0ParametersSpec"
            },
            "error" : {
              "description" : "Alerting threshold that raises a data quality error when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a data quality fatal issue when too many expected values were not found in the column.",
              "$ref" : "#/components/schemas/MaxMissingRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxMissingRule2ParametersSpec"
            }
          }
        }
      },
      "ColumnFalsePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnBoolFalsePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnBoolFalsePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnBoolFalsePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of false value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnIntegrityDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_foreign_key_not_match_count" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_foreign_key_match_percent" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_foreign_key_not_match_count" : {
              "description" : "Verifies that the number of values in a column that does not match values in another table column does not exceed the set count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec"
            },
            "daily_foreign_key_match_percent" : {
              "description" : "Verifies that the percentage of values in a column that matches values in another table column does not exceed the set count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnIntegrityDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_foreign_key_not_match_count" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_foreign_key_match_percent" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_foreign_key_not_match_count" : {
              "description" : "Verifies that the number of values in a column that does not match values in another table column does not exceed the set count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec"
            },
            "daily_partition_foreign_key_match_percent" : {
              "description" : "Verifies that the percentage of values in a column that matches values in another table column does not exceed the set count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnIntegrityForeignKeyMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with values matching values in another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnIntegrityForeignKeyMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "foreign_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "foreign_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "foreign_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "foreign_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnIntegrityForeignKeyNotMatchCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with values not matching values in another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnIntegrityForeignKeyNotMatchCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "foreign_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "foreign_column" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "foreign_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            },
            "foreign_column" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the column to be compared to. In order to define the name of the column, user should write correct name as a String."
            }
          }
        }
      },
      "ColumnIntegrityMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_foreign_key_not_match_count" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_foreign_key_match_percent" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_foreign_key_not_match_count" : {
              "description" : "Verifies that the number of values in a column that does not match values in another table column does not exceed the set count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec"
            },
            "monthly_foreign_key_match_percent" : {
              "description" : "Verifies that the percentage of values in a column that matches values in another table column does not exceed the set count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnIntegrityMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_foreign_key_not_match_count" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_foreign_key_match_percent" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_foreign_key_not_match_count" : {
              "description" : "Verifies that the number of values in a column that does not match values in another table column does not exceed the set count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec"
            },
            "monthly_partition_foreign_key_match_percent" : {
              "description" : "Verifies that the percentage of values in a column that matches values in another table column does not exceed the set count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnIntegrityProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_foreign_key_not_match_count" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_foreign_key_match_percent" : {
            "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_foreign_key_not_match_count" : {
              "description" : "Verifies that the number of values in a column that does not match values in another table column does not exceed the set count.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyNotMatchCountCheckSpec"
            },
            "profile_foreign_key_match_percent" : {
              "description" : "Verifies that the percentage of values in a column that matches values in another table column does not exceed the set count.",
              "$ref" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityForeignKeyMatchPercentCheckSpec"
            }
          }
        }
      },
      "ColumnInvalidLatitudeCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericInvalidLatitudeCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericInvalidLatitudeCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericInvalidLatitudeCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with invalid latitude value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnInvalidLongitudeCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericInvalidLongitudeCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericInvalidLongitudeCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericInvalidLongitudeCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with invalid longitude value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnListModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "column_name" : {
            "type" : "string",
            "description" : "Column names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_expression" : {
            "type" : "string",
            "description" : "SQL expression.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_hash" : {
            "type" : "integer",
            "description" : "Column hash that identifies the column using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables all data quality checks on the column. Data quality checks will not be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_checks" : {
            "type" : "boolean",
            "description" : "True when the column has any checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_profiling_checks" : {
            "type" : "boolean",
            "description" : "True when the column has any profiling checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_monitoring_checks" : {
            "type" : "boolean",
            "description" : "True when the column has any monitoring checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_partition_checks" : {
            "type" : "boolean",
            "description" : "True when the column has any partition checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "type_snapshot" : {
            "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_profiling_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_monitoring_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_partition_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collect_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Column list model that returns the basic fields from a column specification, excluding nested nodes like a list of activated checks.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table" : {
              "description" : "Physical table name including the schema and table names.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "column_name" : {
              "type" : "string",
              "description" : "Column names."
            },
            "sql_expression" : {
              "type" : "string",
              "description" : "SQL expression."
            },
            "column_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Column hash that identifies the column using a unique hash code."
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables all data quality checks on the column. Data quality checks will not be executed."
            },
            "has_any_configured_checks" : {
              "type" : "boolean",
              "description" : "True when the column has any checks configured."
            },
            "has_any_configured_profiling_checks" : {
              "type" : "boolean",
              "description" : "True when the column has any profiling checks configured."
            },
            "has_any_configured_monitoring_checks" : {
              "type" : "boolean",
              "description" : "True when the column has any monitoring checks configured."
            },
            "has_any_configured_partition_checks" : {
              "type" : "boolean",
              "description" : "True when the column has any partition checks configured."
            },
            "type_snapshot" : {
              "description" : "Column data type that was retrieved when the table metadata was imported.",
              "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
              "originalRef" : "#/components/schemas/ColumnTypeSnapshotSpec"
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run all checks within this column.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_profiling_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run profiling checks within this column.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_monitoring_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run monitoring checks within this column.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_partition_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run partition partitioned checks within this column.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "collect_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collector within this column.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this column.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the column."
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Column list model that returns the basic fields from a column specification, excluding nested nodes like a list of activated checks."
        }
      },
      "ColumnMaxInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMaxSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximal values in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnMeanInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMeanSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a mean in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnMedianInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a median in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnMinInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMinSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericMinSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMinSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimal values in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "column_name" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_hash" : {
            "type" : "integer",
            "description" : "Column hash that identifies the column using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "spec" : {
            "$ref" : "#/components/schemas/ColumnSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Full column model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table" : {
              "description" : "Physical table name including the schema and table names.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "column_name" : {
              "type" : "string",
              "description" : "Column name."
            },
            "column_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Column hash that identifies the column using a unique hash code."
            },
            "spec" : {
              "description" : "Full column specification.",
              "$ref" : "#/components/schemas/ColumnSpec",
              "originalRef" : "#/components/schemas/ColumnSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Full column model"
        }
      },
      "ColumnMonitoringChecksRootSpec" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "$ref" : "#/components/schemas/ColumnDailyMonitoringCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly" : {
            "$ref" : "#/components/schemas/ColumnMonthlyMonitoringCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily" : {
              "description" : "Configuration of daily monitoring evaluated at a column level.",
              "$ref" : "#/components/schemas/ColumnDailyMonitoringCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnDailyMonitoringCheckCategoriesSpec"
            },
            "monthly" : {
              "description" : "Configuration of monthly monitoring evaluated at a column level.",
              "$ref" : "#/components/schemas/ColumnMonthlyMonitoringCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnMonthlyMonitoringCheckCategoriesSpec"
            }
          }
        }
      },
      "ColumnMonthlyMonitoringCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "numeric" : {
            "$ref" : "#/components/schemas/ColumnNumericMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datetime" : {
            "$ref" : "#/components/schemas/ColumnDatetimeMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "pii" : {
            "$ref" : "#/components/schemas/ColumnPiiMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/ColumnSqlMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "bool" : {
            "$ref" : "#/components/schemas/ColumnBoolMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "integrity" : {
            "$ref" : "#/components/schemas/ColumnIntegrityMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/ColumnAccuracyMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datatype" : {
            "$ref" : "#/components/schemas/ColumnDatatypeMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "anomaly" : {
            "$ref" : "#/components/schemas/ColumnAnomalyMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/ColumnSchemaMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnComparisonMonthlyMonitoringChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "nulls" : {
              "description" : "Monthly monitoring checks of nulls in the column",
              "$ref" : "#/components/schemas/ColumnNullsMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNullsMonthlyMonitoringChecksSpec"
            },
            "numeric" : {
              "description" : "Monthly monitoring checks of numeric in the column",
              "$ref" : "#/components/schemas/ColumnNumericMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMonthlyMonitoringChecksSpec"
            },
            "strings" : {
              "description" : "Monthly monitoring checks of strings in the column",
              "$ref" : "#/components/schemas/ColumnStringsMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnStringsMonthlyMonitoringChecksSpec"
            },
            "uniqueness" : {
              "description" : "Monthly monitoring checks of uniqueness in the column",
              "$ref" : "#/components/schemas/ColumnUniquenessMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessMonthlyMonitoringChecksSpec"
            },
            "datetime" : {
              "description" : "Monthly monitoring checks of datetime in the column",
              "$ref" : "#/components/schemas/ColumnDatetimeMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeMonthlyMonitoringChecksSpec"
            },
            "pii" : {
              "description" : "Monthly monitoring checks of Personal Identifiable Information (PII) in the column",
              "$ref" : "#/components/schemas/ColumnPiiMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnPiiMonthlyMonitoringChecksSpec"
            },
            "sql" : {
              "description" : "Monthly monitoring checks of custom SQL checks in the column",
              "$ref" : "#/components/schemas/ColumnSqlMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSqlMonthlyMonitoringChecksSpec"
            },
            "bool" : {
              "description" : "Monthly monitoring checks of booleans in the column",
              "$ref" : "#/components/schemas/ColumnBoolMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnBoolMonthlyMonitoringChecksSpec"
            },
            "integrity" : {
              "description" : "Monthly monitoring checks of integrity in the column",
              "$ref" : "#/components/schemas/ColumnIntegrityMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityMonthlyMonitoringChecksSpec"
            },
            "accuracy" : {
              "description" : "Monthly monitoring checks of accuracy in the column",
              "$ref" : "#/components/schemas/ColumnAccuracyMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyMonthlyMonitoringChecksSpec"
            },
            "datatype" : {
              "description" : "Monthly monitoring checks of datatype in the column",
              "$ref" : "#/components/schemas/ColumnDatatypeMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeMonthlyMonitoringChecksSpec"
            },
            "anomaly" : {
              "description" : "Monthly monitoring checks of anomaly in the column",
              "$ref" : "#/components/schemas/ColumnAnomalyMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyMonthlyMonitoringChecksSpec"
            },
            "schema" : {
              "description" : "Monthly monitoring column schema checks",
              "$ref" : "#/components/schemas/ColumnSchemaMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaMonthlyMonitoringChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnComparisonMonthlyMonitoringChecksSpec",
                "originalRef" : "#/definitions/ColumnComparisonMonthlyMonitoringChecksSpec"
              }
            }
          }
        }
      },
      "ColumnMonthlyPartitionedCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "numeric" : {
            "$ref" : "#/components/schemas/ColumnNumericMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datetime" : {
            "$ref" : "#/components/schemas/ColumnDatetimeMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "pii" : {
            "$ref" : "#/components/schemas/ColumnPiiMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/ColumnSqlMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "bool" : {
            "$ref" : "#/components/schemas/ColumnBoolMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "integrity" : {
            "$ref" : "#/components/schemas/ColumnIntegrityMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/ColumnAccuracyMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datatype" : {
            "$ref" : "#/components/schemas/ColumnDatatypeMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "anomaly" : {
            "$ref" : "#/components/schemas/ColumnAnomalyMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnComparisonMonthlyPartitionedChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "nulls" : {
              "description" : "Monthly partitioned checks of nulls values in the column",
              "$ref" : "#/components/schemas/ColumnNullsMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNullsMonthlyPartitionedChecksSpec"
            },
            "numeric" : {
              "description" : "Monthly partitioned checks of numeric values in the column",
              "$ref" : "#/components/schemas/ColumnNumericMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMonthlyPartitionedChecksSpec"
            },
            "strings" : {
              "description" : "Monthly partitioned checks of strings values in the column",
              "$ref" : "#/components/schemas/ColumnStringsMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnStringsMonthlyPartitionedChecksSpec"
            },
            "uniqueness" : {
              "description" : "Monthly partitioned checks of uniqueness values in the column",
              "$ref" : "#/components/schemas/ColumnUniquenessMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessMonthlyPartitionedChecksSpec"
            },
            "datetime" : {
              "description" : "Monthly partitioned checks of datetime values in the column",
              "$ref" : "#/components/schemas/ColumnDatetimeMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeMonthlyPartitionedChecksSpec"
            },
            "pii" : {
              "description" : "Monthly partitioned checks of Personal Identifiable Information (PII) in the column",
              "$ref" : "#/components/schemas/ColumnPiiMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnPiiMonthlyPartitionedChecksSpec"
            },
            "sql" : {
              "description" : "Monthly partitioned checks using custom SQL expressions and conditions on the column",
              "$ref" : "#/components/schemas/ColumnSqlMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSqlMonthlyPartitionedChecksSpec"
            },
            "bool" : {
              "description" : "Monthly partitioned checks for booleans in the column",
              "$ref" : "#/components/schemas/ColumnBoolMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnBoolMonthlyPartitionedChecksSpec"
            },
            "integrity" : {
              "description" : "Monthly partitioned checks for integrity in the column",
              "$ref" : "#/components/schemas/ColumnIntegrityMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityMonthlyPartitionedChecksSpec"
            },
            "accuracy" : {
              "description" : "Monthly partitioned checks for accuracy in the column",
              "$ref" : "#/components/schemas/ColumnAccuracyMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyMonthlyPartitionedChecksSpec"
            },
            "datatype" : {
              "description" : "Monthly partitioned checks for datatype in the column",
              "$ref" : "#/components/schemas/ColumnDatatypeMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeMonthlyPartitionedChecksSpec"
            },
            "anomaly" : {
              "description" : "Monthly partitioned checks for anomaly in the column",
              "$ref" : "#/components/schemas/ColumnAnomalyMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyMonthlyPartitionedChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnComparisonMonthlyPartitionedChecksSpec",
                "originalRef" : "#/definitions/ColumnComparisonMonthlyPartitionedChecksSpec"
              }
            }
          }
        }
      },
      "ColumnNegativeCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericNegativeCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericNegativeCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericNegativeCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnNegativePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericNegativePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericNegativePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericNegativePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnNonNegativeCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericNonNegativeCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericNonNegativeCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericNonNegativeCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with non-negative values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnNonNegativePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericNonNegativePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericNonNegativePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericNonNegativePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with non-negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnNotNullsCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with not null values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleWarningParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleFatalParametersSpec"
            }
          }
        }
      },
      "ColumnNotNullsPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with null values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnNullsCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with null values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnNullsDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_change" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_nulls_percent_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_nulls_count" : {
              "description" : "Verifies that the number of null values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsCountCheckSpec"
            },
            "daily_nulls_percent" : {
              "description" : "Verifies that the percentage of nulls in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsPercentCheckSpec"
            },
            "daily_nulls_percent_anomaly_stationary" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec"
            },
            "daily_nulls_percent_change" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentCheckSpec"
            },
            "daily_nulls_percent_change_yesterday" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec"
            },
            "daily_not_nulls_count" : {
              "description" : "Verifies that the number of not null values in a column does not fall below the minimum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsCountCheckSpec"
            },
            "daily_not_nulls_percent" : {
              "description" : "Verifies that the percentage of not nulls in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsPercentCheckSpec"
            },
            "daily_nulls_percent_anomaly_stationary_30_days" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec"
            },
            "daily_nulls_percent_change_7_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec"
            },
            "daily_nulls_percent_change_30_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnNullsDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_change" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_nulls_percent_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_nulls_count" : {
              "description" : "Verifies that the number of null values in a column does not exceed the set count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsCountCheckSpec"
            },
            "daily_partition_nulls_percent" : {
              "description" : "Verifies that the percentage of null values in a column does not exceed the set percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsPercentCheckSpec"
            },
            "daily_partition_nulls_percent_anomaly_stationary" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec"
            },
            "daily_partition_nulls_percent_change" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentCheckSpec"
            },
            "daily_partition_nulls_percent_change_yesterday" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec"
            },
            "daily_partition_not_nulls_count" : {
              "description" : "Verifies that the number of not null values in a column does not exceed the set count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsCountCheckSpec"
            },
            "daily_partition_not_nulls_percent" : {
              "description" : "Verifies that the percentage of not null values in a column does not exceed the set percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsPercentCheckSpec"
            },
            "daily_partition_nulls_percent_anomaly_stationary_30_days" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec"
            },
            "daily_partition_nulls_percent_change_7_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec"
            },
            "daily_partition_nulls_percent_change_30_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnNullsMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_nulls_count" : {
              "description" : "Verifies that the number of null values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsCountCheckSpec"
            },
            "monthly_nulls_percent" : {
              "description" : "Verifies that the percentage of null values in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsPercentCheckSpec"
            },
            "monthly_not_nulls_count" : {
              "description" : "Verifies that the number of not null values in a column does not fall below the minimum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsCountCheckSpec"
            },
            "monthly_not_nulls_percent" : {
              "description" : "Verifies that the percentage of not nulls in a column does not fall below the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsPercentCheckSpec"
            }
          }
        }
      },
      "ColumnNullsMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_nulls_count" : {
              "description" : "Verifies that the number of null values in a column does not exceed the set count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsCountCheckSpec"
            },
            "monthly_partition_nulls_percent" : {
              "description" : "Verifies that the percentage of null values in a column does not exceed the set percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsPercentCheckSpec"
            },
            "monthly_partition_not_nulls_count" : {
              "description" : "Verifies that the number of not null values in a column does not exceed the set count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsCountCheckSpec"
            },
            "monthly_partition_not_nulls_percent" : {
              "description" : "Verifies that the percentage of not null values in a column does not exceed the set percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsPercentCheckSpec"
            }
          }
        }
      },
      "ColumnNullsNotNullsCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNullsNotNullsCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsCountSensorParametersSpec"
            }
          }
        }
      },
      "ColumnNullsNotNullsPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNullsNotNullsPercentStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsPercentSensorParametersSpec"
            }
          }
        }
      },
      "ColumnNullsNullsCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNullsNullsCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsCountSensorParametersSpec"
            }
          }
        }
      },
      "ColumnNullsNullsPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNullsNullsPercentStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            }
          }
        }
      },
      "ColumnNullsPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with null values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnNullsProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_anomaly_stationary" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_change" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_change_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_change30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_change_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_nulls_percent_change_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_nulls_count" : {
              "description" : "Verifies that the number of null values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsCountCheckSpec"
            },
            "profile_nulls_percent" : {
              "description" : "Verifies that the percent of null values in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNullsPercentCheckSpec"
            },
            "profile_nulls_percent_anomaly_stationary" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercentCheckSpec"
            },
            "profile_nulls_percent_change" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentCheckSpec"
            },
            "profile_nulls_percent_change_yesterday" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSinceYesterdayCheckSpec"
            },
            "profile_not_nulls_count" : {
              "description" : "Verifies that the number of not null values in a column does not exceed the minimum accepted count.",
              "$ref" : "#/components/schemas/ColumnNotNullsCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsCountCheckSpec"
            },
            "profile_not_nulls_percent" : {
              "description" : "Verifies that the percent of not null values in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnNotNullsPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNotNullsPercentCheckSpec"
            },
            "profile_nulls_percent_change30_days" : {
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec"
            },
            "profile_nulls_percent_anomaly_stationary_30_days" : {
              "description" : "Verifies that the null percent value in a column changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryNullPercent30DaysCheckSpec"
            },
            "profile_nulls_percent_change_7_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince7DaysCheckSpec"
            },
            "profile_nulls_percent_change_30_days" : {
              "description" : "Verifies that the null percent value in a column changed in a fixed rate since last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeNullPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnNullsStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsNullsPercentStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "not_nulls_count" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "not_nulls_percent" : {
            "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "nulls_count" : {
              "description" : "Configuration of the profiler that counts null column values.",
              "$ref" : "#/components/schemas/ColumnNullsNullsCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsCountStatisticsCollectorSpec"
            },
            "nulls_percent" : {
              "description" : "Configuration of the profiler that measures the percentage of null values.",
              "$ref" : "#/components/schemas/ColumnNullsNullsPercentStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNullsPercentStatisticsCollectorSpec"
            },
            "not_nulls_count" : {
              "description" : "Configuration of the profiler that counts not null column values.",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsCountStatisticsCollectorSpec"
            },
            "not_nulls_percent" : {
              "description" : "Configuration of the profiler that measures the percentage of not null values.",
              "$ref" : "#/components/schemas/ColumnNullsNotNullsPercentStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnNullsNotNullsPercentStatisticsCollectorSpec"
            }
          }
        }
      },
      "ColumnNumberValueInSetPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericNumberValueInSetPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters that specify a list of expected values that are compared to the values in the tested numeric column.",
              "$ref" : "#/components/schemas/ColumnNumericNumberValueInSetPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericNumberValueInSetPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at a warning severity level when the percentage of valid rows is below the minimum percentage threshold.",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at an error severity level when the percentage of valid rows is below the minimum percentage threshold",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at a fatal severity level when the percentage of valid rows is below the minimum percentage threshold",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnNumericDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_non_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_non_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_expected_numbers_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_number_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_values_in_range_numeric_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_values_in_range_integers_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_value_below_min_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_value_below_min_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_value_above_max_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_value_above_max_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_max_in_range" : {
            "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_min_in_range" : {
            "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_mean_in_range" : {
            "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_percentile_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_median_in_range" : {
            "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_percentile_10_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_percentile_25_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_percentile_75_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_percentile_90_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sample_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_population_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sample_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_population_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sum_in_range" : {
            "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_invalid_latitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_valid_latitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_invalid_longitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_valid_longitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_negative_count" : {
              "description" : "Verifies that the number of negative values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativeCountCheckSpec"
            },
            "daily_negative_percent" : {
              "description" : "Verifies that the percentage of negative values in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativePercentCheckSpec"
            },
            "daily_non_negative_count" : {
              "description" : "Verifies that the number of non-negative values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativeCountCheckSpec"
            },
            "daily_non_negative_percent" : {
              "description" : "Verifies that the percentage of non-negative values in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativePercentCheckSpec"
            },
            "daily_expected_numbers_in_use_count" : {
              "description" : "Verifies that the expected numeric values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec"
            },
            "daily_number_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec"
            },
            "daily_values_in_range_numeric_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec"
            },
            "daily_values_in_range_integers_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec"
            },
            "daily_value_below_min_value_count" : {
              "description" : "The check counts the number of values in the column that is below the value defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec"
            },
            "daily_value_below_min_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is below the value defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec"
            },
            "daily_value_above_max_value_count" : {
              "description" : "The check counts the number of values in the column that is above the value defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec"
            },
            "daily_value_above_max_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is above the value defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec"
            },
            "daily_max_in_range" : {
              "description" : "Verifies that the maximal value in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMaxInRangeCheckSpec"
            },
            "daily_min_in_range" : {
              "description" : "Verifies that the minimal value in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMinInRangeCheckSpec"
            },
            "daily_mean_in_range" : {
              "description" : "Verifies that the average (mean) of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMeanInRangeCheckSpec"
            },
            "daily_percentile_in_range" : {
              "description" : "Verifies that the percentile of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentileInRangeCheckSpec"
            },
            "daily_median_in_range" : {
              "description" : "Verifies that the median of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMedianInRangeCheckSpec"
            },
            "daily_percentile_10_in_range" : {
              "description" : "Verifies that the percentile 10 of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec"
            },
            "daily_percentile_25_in_range" : {
              "description" : "Verifies that the percentile 25 of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec"
            },
            "daily_percentile_75_in_range" : {
              "description" : "Verifies that the percentile 75 of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec"
            },
            "daily_percentile_90_in_range" : {
              "description" : "Verifies that the percentile 90 of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec"
            },
            "daily_sample_stddev_in_range" : {
              "description" : "Verifies that the sample standard deviation of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec"
            },
            "daily_population_stddev_in_range" : {
              "description" : "Verifies that the population standard deviation of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec"
            },
            "daily_sample_variance_in_range" : {
              "description" : "Verifies that the sample variance of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec"
            },
            "daily_population_variance_in_range" : {
              "description" : "Verifies that the population variance of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec"
            },
            "daily_sum_in_range" : {
              "description" : "Verifies that the sum of all values in a column is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSumInRangeCheckSpec"
            },
            "daily_invalid_latitude_count" : {
              "description" : "Verifies that the number of invalid latitude values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec"
            },
            "daily_valid_latitude_percent" : {
              "description" : "Verifies that the percentage of valid latitude values in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec"
            },
            "daily_invalid_longitude_count" : {
              "description" : "Verifies that the number of invalid longitude values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec"
            },
            "daily_valid_longitude_percent" : {
              "description" : "Verifies that the percentage of valid longitude values in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec"
            }
          }
        }
      },
      "ColumnNumericDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_non_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_non_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_expected_numbers_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_number_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_values_in_range_numeric_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_values_in_range_integers_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_value_below_min_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_value_below_min_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_value_above_max_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_value_above_max_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_max_in_range" : {
            "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_min_in_range" : {
            "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_mean_in_range" : {
            "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_percentile_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_median_in_range" : {
            "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_percentile_10_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_percentile_25_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_percentile_75_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_percentile_90_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sample_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_population_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sample_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_population_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sum_in_range" : {
            "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_invalid_latitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_valid_latitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_invalid_longitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_valid_longitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_negative_count" : {
              "description" : "Verifies that the number of negative values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativeCountCheckSpec"
            },
            "daily_partition_negative_percent" : {
              "description" : "Verifies that the percentage of negative values in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativePercentCheckSpec"
            },
            "daily_partition_non_negative_count" : {
              "description" : "Verifies that the number of non-negative values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativeCountCheckSpec"
            },
            "daily_partition_non_negative_percent" : {
              "description" : "Verifies that the percentage of non-negative values in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativePercentCheckSpec"
            },
            "daily_partition_expected_numbers_in_use_count" : {
              "description" : "Verifies that the expected numeric values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec"
            },
            "daily_partition_number_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec"
            },
            "daily_partition_values_in_range_numeric_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec"
            },
            "daily_partition_values_in_range_integers_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec"
            },
            "daily_partition_value_below_min_value_count" : {
              "description" : "The check counts the number of values in the column that is below the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec"
            },
            "daily_partition_value_below_min_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is below the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec"
            },
            "daily_partition_value_above_max_value_count" : {
              "description" : "The check counts the number of values in the column that is above the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec"
            },
            "daily_partition_value_above_max_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is above the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec"
            },
            "daily_partition_max_in_range" : {
              "description" : "Verifies that the maximal value in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMaxInRangeCheckSpec"
            },
            "daily_partition_min_in_range" : {
              "description" : "Verifies that the minimal value in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMinInRangeCheckSpec"
            },
            "daily_partition_mean_in_range" : {
              "description" : "Verifies that the average (mean) of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMeanInRangeCheckSpec"
            },
            "daily_partition_percentile_in_range" : {
              "description" : "Verifies that the percentile of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentileInRangeCheckSpec"
            },
            "daily_partition_median_in_range" : {
              "description" : "Verifies that the median of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMedianInRangeCheckSpec"
            },
            "daily_partition_percentile_10_in_range" : {
              "description" : "Verifies that the percentile 10 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec"
            },
            "daily_partition_percentile_25_in_range" : {
              "description" : "Verifies that the percentile 25 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec"
            },
            "daily_partition_percentile_75_in_range" : {
              "description" : "Verifies that the percentile 75 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec"
            },
            "daily_partition_percentile_90_in_range" : {
              "description" : "Verifies that the percentile 90 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec"
            },
            "daily_partition_sample_stddev_in_range" : {
              "description" : "Verifies that the sample standard deviation of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec"
            },
            "daily_partition_population_stddev_in_range" : {
              "description" : "Verifies that the population standard deviation of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec"
            },
            "daily_partition_sample_variance_in_range" : {
              "description" : "Verifies that the sample variance of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec"
            },
            "daily_partition_population_variance_in_range" : {
              "description" : "Verifies that the population variance of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec"
            },
            "daily_partition_sum_in_range" : {
              "description" : "Verifies that the sum of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSumInRangeCheckSpec"
            },
            "daily_partition_invalid_latitude_count" : {
              "description" : "Verifies that the number of invalid latitude values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec"
            },
            "daily_partition_valid_latitude_percent" : {
              "description" : "Verifies that the percentage of valid latitude values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec"
            },
            "daily_partition_invalid_longitude_count" : {
              "description" : "Verifies that the number of invalid longitude values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec"
            },
            "daily_partition_valid_longitude_percent" : {
              "description" : "Verifies that the percentage of valid longitude values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec"
            }
          }
        }
      },
      "ColumnNumericExpectedNumbersInUseCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "expected_values" : {
            "type" : "array",
            "description" : "List of expected numeric values that should be found in the tested column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "expected_values" : {
              "type" : "array",
              "description" : "List of expected numeric values that should be found in the tested column.",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "ColumnNumericInvalidLatitudeCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericInvalidLongitudeCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericMaxSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericMeanSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericMedianSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "Median (50th percentile), must equal 0.5",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Median (50th percentile), must equal 0.5"
            }
          }
        }
      },
      "ColumnNumericMinSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_non_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_non_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_expected_numbers_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_number_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_values_in_range_numeric_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_values_in_range_integers_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_value_below_min_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_value_below_min_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_value_above_max_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_value_above_max_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_max_in_range" : {
            "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_min_in_range" : {
            "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_mean_in_range" : {
            "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_percentile_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_median_in_range" : {
            "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_percentile_10_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_percentile_25_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_percentile_75_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_percentile_90_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sample_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_population_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sample_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_population_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sum_in_range" : {
            "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_invalid_latitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_valid_latitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_invalid_longitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_valid_longitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_negative_count" : {
              "description" : "Verifies that the number of negative values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativeCountCheckSpec"
            },
            "monthly_negative_percent" : {
              "description" : "Verifies that the percentage of negative values in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativePercentCheckSpec"
            },
            "monthly_non_negative_count" : {
              "description" : "Verifies that the number of non-negative values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativeCountCheckSpec"
            },
            "monthly_non_negative_percent" : {
              "description" : "Verifies that the percentage of non-negative values in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativePercentCheckSpec"
            },
            "monthly_expected_numbers_in_use_count" : {
              "description" : "Verifies that the expected numeric values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec"
            },
            "monthly_number_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec"
            },
            "monthly_values_in_range_numeric_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec"
            },
            "monthly_values_in_range_integers_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec"
            },
            "monthly_value_below_min_value_count" : {
              "description" : "The check counts the number of values in the column that is below the value defined by the user as a parameter. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec"
            },
            "monthly_value_below_min_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is below the value defined by the user as a parameter. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec"
            },
            "monthly_value_above_max_value_count" : {
              "description" : "The check counts the number of values in the column that is above the value defined by the user as a parameter. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec"
            },
            "monthly_value_above_max_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is above the value defined by the user as a parameter. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec"
            },
            "monthly_max_in_range" : {
              "description" : "Verifies that the maximal value in a column does not exceed the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMaxInRangeCheckSpec"
            },
            "monthly_min_in_range" : {
              "description" : "Verifies that the minimal value in a column does not exceed the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMinInRangeCheckSpec"
            },
            "monthly_mean_in_range" : {
              "description" : "Verifies that the average (mean) of all values in a column does not exceed the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMeanInRangeCheckSpec"
            },
            "monthly_percentile_in_range" : {
              "description" : "Verifies that the percentile of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentileInRangeCheckSpec"
            },
            "monthly_median_in_range" : {
              "description" : "Verifies that the median of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMedianInRangeCheckSpec"
            },
            "monthly_percentile_10_in_range" : {
              "description" : "Verifies that the percentile 10 of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec"
            },
            "monthly_percentile_25_in_range" : {
              "description" : "Verifies that the percentile 25 of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec"
            },
            "monthly_percentile_75_in_range" : {
              "description" : "Verifies that the percentile 75 of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec"
            },
            "monthly_percentile_90_in_range" : {
              "description" : "Verifies that the percentile 90 of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec"
            },
            "monthly_sample_stddev_in_range" : {
              "description" : "Verifies that the sample standard deviation of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec"
            },
            "monthly_population_stddev_in_range" : {
              "description" : "Verifies that the population standard deviation of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec"
            },
            "monthly_sample_variance_in_range" : {
              "description" : "Verifies that the sample variance of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec"
            },
            "monthly_population_variance_in_range" : {
              "description" : "Verifies that the population variance of all values in a column is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec"
            },
            "monthly_sum_in_range" : {
              "description" : "Verifies that the sum of all values in a column does not exceed the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSumInRangeCheckSpec"
            },
            "monthly_invalid_latitude_count" : {
              "description" : "Verifies that the number of invalid latitude values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec"
            },
            "monthly_valid_latitude_percent" : {
              "description" : "Verifies that the percentage of valid latitude values in a column does not fall below the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec"
            },
            "monthly_invalid_longitude_count" : {
              "description" : "Verifies that the number of invalid longitude values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec"
            },
            "monthly_valid_longitude_percent" : {
              "description" : "Verifies that the percentage of valid longitude values in a column does not fall below the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec"
            }
          }
        }
      },
      "ColumnNumericMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_non_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_non_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_expected_numbers_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_number_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_values_in_range_numeric_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_values_in_range_integers_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_value_below_min_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_value_below_min_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_value_above_max_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_value_above_max_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_max_in_range" : {
            "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_min_in_range" : {
            "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_mean_in_range" : {
            "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_percentile_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_median_in_range" : {
            "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_percentile_10_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_percentile_25_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_percentile_75_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_percentile_90_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sample_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_population_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sample_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_population_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sum_in_range" : {
            "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_invalid_latitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_valid_latitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_invalid_longitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_valid_longitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_negative_count" : {
              "description" : "Verifies that the number of negative values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativeCountCheckSpec"
            },
            "monthly_partition_negative_percent" : {
              "description" : "Verifies that the percentage of negative values in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativePercentCheckSpec"
            },
            "monthly_partition_non_negative_count" : {
              "description" : "Verifies that the number of non-negative values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativeCountCheckSpec"
            },
            "monthly_partition_non_negative_percent" : {
              "description" : "Verifies that the percentage of non-negative values in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativePercentCheckSpec"
            },
            "monthly_partition_expected_numbers_in_use_count" : {
              "description" : "Verifies that the expected numeric values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec"
            },
            "monthly_partition_number_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec"
            },
            "monthly_partition_values_in_range_numeric_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec"
            },
            "monthly_partition_values_in_range_integers_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec"
            },
            "monthly_partition_value_below_min_value_count" : {
              "description" : "The check counts the number of values in the column that is below the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec"
            },
            "monthly_partition_value_below_min_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is below the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec"
            },
            "monthly_partition_value_above_max_value_count" : {
              "description" : "The check counts the number of values in the column that is above the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec"
            },
            "monthly_partition_value_above_max_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is above the value defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec"
            },
            "monthly_partition_max_in_range" : {
              "description" : "Verifies that the maximal value in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMaxInRangeCheckSpec"
            },
            "monthly_partition_min_in_range" : {
              "description" : "Verifies that the minimal value in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMinInRangeCheckSpec"
            },
            "monthly_partition_mean_in_range" : {
              "description" : "Verifies that the average (mean) of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMeanInRangeCheckSpec"
            },
            "monthly_partition_percentile_in_range" : {
              "description" : "Verifies that the percentile of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentileInRangeCheckSpec"
            },
            "monthly_partition_median_in_range" : {
              "description" : "Verifies that the median of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMedianInRangeCheckSpec"
            },
            "monthly_partition_percentile_10_in_range" : {
              "description" : "Verifies that the percentile 10 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec"
            },
            "monthly_partition_percentile_25_in_range" : {
              "description" : "Verifies that the percentile 25 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec"
            },
            "monthly_partition_percentile_75_in_range" : {
              "description" : "Verifies that the percentile 75 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec"
            },
            "monthly_partition_percentile_90_in_range" : {
              "description" : "Verifies that the percentile 90 of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec"
            },
            "monthly_partition_sample_stddev_in_range" : {
              "description" : "Verifies that the sample standard deviation of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec"
            },
            "monthly_partition_population_stddev_in_range" : {
              "description" : "Verifies that the population standard deviation of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec"
            },
            "monthly_partition_sample_variance_in_range" : {
              "description" : "Verifies that the sample variance of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec"
            },
            "monthly_partition_population_variance_in_range" : {
              "description" : "Verifies that the population variance of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec"
            },
            "monthly_partition_sum_in_range" : {
              "description" : "Verifies that the sum of all values in a column is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSumInRangeCheckSpec"
            },
            "monthly_partition_invalid_latitude_count" : {
              "description" : "Verifies that the number of invalid latitude values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec"
            },
            "monthly_partition_valid_latitude_percent" : {
              "description" : "Verifies that the percentage of valid latitude values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec"
            },
            "monthly_partition_invalid_longitude_count" : {
              "description" : "Verifies that the number of invalid longitude values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec"
            },
            "monthly_partition_valid_longitude_percent" : {
              "description" : "Verifies that the percentage of valid longitude values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec"
            }
          }
        }
      },
      "ColumnNumericNegativeCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericNegativePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericNonNegativeCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericNonNegativePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericNumberValueInSetPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "expected_values" : {
            "type" : "array",
            "description" : "A list of expected values that must be present in a numeric column, only values from this list are accepted and rows having these values in the tested column are counted as valid rows.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "expected_values" : {
              "type" : "array",
              "description" : "A list of expected values that must be present in a numeric column, only values from this list are accepted and rows having these values in the tested column are counted as valid rows.",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        }
      },
      "ColumnNumericPercentile10SensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "10th percentile, must equal 0.1",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "10th percentile, must equal 0.1"
            }
          }
        }
      },
      "ColumnNumericPercentile25SensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "25th percentile, must equal 0.25",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "25th percentile, must equal 0.25"
            }
          }
        }
      },
      "ColumnNumericPercentile75SensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "75th percentile, must equal 0.75",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "75th percentile, must equal 0.75"
            }
          }
        }
      },
      "ColumnNumericPercentile90SensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "90th percentile, must equal 0.9",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "90th percentile, must equal 0.9"
            }
          }
        }
      },
      "ColumnNumericPercentileSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "percentile_value" : {
            "type" : "number",
            "description" : "Must be a literal in the range [0, 1].",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "percentile_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Must be a literal in the range [0, 1]."
            }
          }
        }
      },
      "ColumnNumericPopulationStddevSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericPopulationVarianceSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_non_negative_count" : {
            "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_non_negative_percent" : {
            "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_expected_numbers_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_number_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_values_in_range_numeric_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_values_in_range_integers_percent" : {
            "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_value_below_min_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_value_below_min_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_value_above_max_value_count" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_value_above_max_value_percent" : {
            "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_max_in_range" : {
            "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_min_in_range" : {
            "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_mean_in_range" : {
            "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_percentile_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_median_in_range" : {
            "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_percentile_10_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_percentile_25_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_percentile_75_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_percentile_90_in_range" : {
            "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sample_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_population_stddev_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sample_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_population_variance_in_range" : {
            "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sum_in_range" : {
            "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_invalid_latitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_valid_latitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_invalid_longitude_count" : {
            "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_valid_longitude_percent" : {
            "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_negative_count" : {
              "description" : "Verifies that the number of negative values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativeCountCheckSpec"
            },
            "profile_negative_percent" : {
              "description" : "Verifies that the percentage of negative values in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNegativePercentCheckSpec"
            },
            "profile_non_negative_count" : {
              "description" : "Verifies that the number of non-negative values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnNonNegativeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativeCountCheckSpec"
            },
            "profile_non_negative_percent" : {
              "description" : "Verifies that the percentage of non-negative values in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnNonNegativePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNonNegativePercentCheckSpec"
            },
            "profile_expected_numbers_in_use_count" : {
              "description" : "Verifies that the expected numeric values were found in the column. Raises a data quality issue when too many expected values were not found (were missing).",
              "$ref" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedNumbersInUseCountCheckSpec"
            },
            "profile_number_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnNumberValueInSetPercentCheckSpec"
            },
            "profile_values_in_range_numeric_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeNumericPercentCheckSpec"
            },
            "profile_values_in_range_integers_percent" : {
              "description" : "Verifies that the percentage of values from range in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValuesInRangeIntegersPercentCheckSpec"
            },
            "profile_value_below_min_value_count" : {
              "description" : "The check counts the number of values in the column that is below the value defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValueCountCheckSpec"
            },
            "profile_value_below_min_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is below the value defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueBelowMinValuePercentCheckSpec"
            },
            "profile_value_above_max_value_count" : {
              "description" : "The check counts the number of values in the column that is above the value defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValueCountCheckSpec"
            },
            "profile_value_above_max_value_percent" : {
              "description" : "The check counts the percentage of values in the column that is above the value defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValueAboveMaxValuePercentCheckSpec"
            },
            "profile_max_in_range" : {
              "description" : "Verifies that the maximal value in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnMaxInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMaxInRangeCheckSpec"
            },
            "profile_min_in_range" : {
              "description" : "Verifies that the minimal value in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnMinInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMinInRangeCheckSpec"
            },
            "profile_mean_in_range" : {
              "description" : "Verifies that the average (mean) of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnMeanInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMeanInRangeCheckSpec"
            },
            "profile_percentile_in_range" : {
              "description" : "Verifies that the percentile of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPercentileInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentileInRangeCheckSpec"
            },
            "profile_median_in_range" : {
              "description" : "Verifies that the median of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnMedianInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnMedianInRangeCheckSpec"
            },
            "profile_percentile_10_in_range" : {
              "description" : "Verifies that the percentile 10 of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile10InRangeCheckSpec"
            },
            "profile_percentile_25_in_range" : {
              "description" : "Verifies that the percentile 25 of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile25InRangeCheckSpec"
            },
            "profile_percentile_75_in_range" : {
              "description" : "Verifies that the percentile 75 of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile75InRangeCheckSpec"
            },
            "profile_percentile_90_in_range" : {
              "description" : "Verifies that the percentile 90 of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPercentile90InRangeCheckSpec"
            },
            "profile_sample_stddev_in_range" : {
              "description" : "Verifies that the sample standard deviation of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleStddevInRangeCheckSpec"
            },
            "profile_population_stddev_in_range" : {
              "description" : "Verifies that the population standard deviation of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationStddevInRangeCheckSpec"
            },
            "profile_sample_variance_in_range" : {
              "description" : "Verifies that the sample variance of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSampleVarianceInRangeCheckSpec"
            },
            "profile_population_variance_in_range" : {
              "description" : "Verifies that the population variance of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPopulationVarianceInRangeCheckSpec"
            },
            "profile_sum_in_range" : {
              "description" : "Verifies that the sum of all values in a column is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnSumInRangeCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSumInRangeCheckSpec"
            },
            "profile_invalid_latitude_count" : {
              "description" : "Verifies that the number of invalid latitude values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLatitudeCountCheckSpec"
            },
            "profile_valid_latitude_percent" : {
              "description" : "Verifies that the percentage of valid latitude values in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLatitudePercentCheckSpec"
            },
            "profile_invalid_longitude_count" : {
              "description" : "Verifies that the number of invalid longitude values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnInvalidLongitudeCountCheckSpec"
            },
            "profile_valid_longitude_percent" : {
              "description" : "Verifies that the percentage of valid longitude values in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnValidLongitudePercentCheckSpec"
            }
          }
        }
      },
      "ColumnNumericSampleStddevSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericSampleVarianceSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericSumSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericValidLatitudePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericValidLongitudePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnNumericValueAboveMaxValueCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_value" : {
            "type" : "integer",
            "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "max_value" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0"
            }
          }
        }
      },
      "ColumnNumericValueAboveMaxValuePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_value" : {
            "type" : "integer",
            "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "max_value" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0"
            }
          }
        }
      },
      "ColumnNumericValueBelowMinValueCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_value" : {
            "type" : "integer",
            "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_value" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0"
            }
          }
        }
      },
      "ColumnNumericValueBelowMinValuePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_value" : {
            "type" : "integer",
            "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_value" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom value. In order to define custom value, user should write correct value as an integer. If value is not defined by user then default value is 0"
            }
          }
        }
      },
      "ColumnNumericValuesInRangeIntegersPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_value" : {
            "type" : "integer",
            "description" : "Minimal value range variable.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "max_value" : {
            "type" : "integer",
            "description" : "Maximal value range variable.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_value" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Minimal value range variable."
            },
            "max_value" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximal value range variable."
            }
          }
        }
      },
      "ColumnNumericValuesInRangeNumericPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_value" : {
            "type" : "number",
            "description" : "Minimal value range variable.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "max_value" : {
            "type" : "number",
            "description" : "Maximal value range variable.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimal value range variable."
            },
            "max_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximal value range variable."
            }
          }
        }
      },
      "ColumnPartitionedChecksRootSpec" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "$ref" : "#/components/schemas/ColumnDailyPartitionedCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly" : {
            "$ref" : "#/components/schemas/ColumnMonthlyPartitionedCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily" : {
              "description" : "Configuration of day partitioned data quality checks evaluated at a column level.",
              "$ref" : "#/components/schemas/ColumnDailyPartitionedCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnDailyPartitionedCheckCategoriesSpec"
            },
            "monthly" : {
              "description" : "Configuration of monthly partitioned data quality checks evaluated at a column level.",
              "$ref" : "#/components/schemas/ColumnMonthlyPartitionedCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnMonthlyPartitionedCheckCategoriesSpec"
            }
          }
        }
      },
      "ColumnPercentile10InRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPercentile10SensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPercentile10SensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPercentile10SensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentile 10 in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPercentile25InRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPercentile25SensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPercentile25SensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPercentile25SensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentile 25 in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPercentile75InRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPercentile75SensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPercentile75SensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPercentile75SensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentile 75 in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPercentile90InRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPercentile90SensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPercentile90SensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPercentile90SensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentile 90 in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPercentileInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPercentileSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPercentileSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPercentileSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentile in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsEmailPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows that contains email values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsEmailPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnPiiContainsIp4PercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows that contains IP4 values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsIp4PercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnPiiContainsIp6PercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows that contains IP6 values in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsIp6PercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnPiiContainsUsaPhonePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Numerical value in range percent sensor parameters",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for the minimum percentage of rows that contains a USA phone number in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsUsaPhonePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnPiiContainsUsaZipcodePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Numerical value in range percent sensor parameters",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for the minimum percentage of rows that contains a USA zip code number in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnPiiContainsUsaZipcodePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnPiiDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_contains_usa_phone_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_contains_usa_zipcode_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_contains_email_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_contains_ip4_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_contains_ip6_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_contains_usa_phone_percent" : {
              "description" : "Verifies that the percentage of rows that contains a USA phone number in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec"
            },
            "daily_contains_usa_zipcode_percent" : {
              "description" : "Verifies that the percentage of rows that contains a USA zip code in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec"
            },
            "daily_contains_email_percent" : {
              "description" : "Verifies that the percentage of rows that contains emails in a column does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec"
            },
            "daily_contains_ip4_percent" : {
              "description" : "Verifies that the percentage of rows that contains IP4 address values in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec"
            },
            "daily_contains_ip6_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP6 address values in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec"
            }
          }
        }
      },
      "ColumnPiiDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_contains_usa_phone_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_contains_usa_zipcode_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_contains_email_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_contains_ip4_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_contains_ip6_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_contains_usa_phone_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA phone number in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec"
            },
            "daily_partition_contains_usa_zipcode_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA zip code in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec"
            },
            "daily_partition_contains_email_percent" : {
              "description" : "Verifies that the percentage of rows that contains emails in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec"
            },
            "daily_partition_contains_ip4_percent" : {
              "description" : "Verifies that the percentage of rows that contains IP4 address values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec"
            },
            "daily_partition_contains_ip6_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP6 address values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec"
            }
          }
        }
      },
      "ColumnPiiMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_contains_usa_phone_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_contains_usa_zipcode_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_contains_email_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_contains_ip4_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_contains_ip6_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_contains_usa_phone_percent" : {
              "description" : "Verifies that the percentage of rows that contains a USA phone number in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec"
            },
            "monthly_contains_usa_zipcode_percent" : {
              "description" : "Verifies that the percentage of rows that contains a USA zip code in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec"
            },
            "monthly_contains_email_percent" : {
              "description" : "Verifies that the percentage of rows that contains emails in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec"
            },
            "monthly_contains_ip4_percent" : {
              "description" : "Verifies that the percentage of rows that contains IP4 address values in a column does not fall below the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec"
            },
            "monthly_contains_ip6_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP6 address values in a column does not fall below the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec"
            }
          }
        }
      },
      "ColumnPiiMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_contains_usa_phone_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_contains_usa_zipcode_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_contains_email_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_contains_ip4_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_contains_ip6_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_contains_usa_phone_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA phone number in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec"
            },
            "monthly_partition_contains_usa_zipcode_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA zip code in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec"
            },
            "monthly_partition_contains_email_percent" : {
              "description" : "Verifies that the percentage of rows that contains emails in a column does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec"
            },
            "monthly_partition_contains_ip4_percent" : {
              "description" : "Verifies that the percentage of rows that contains IP4 address values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec"
            },
            "monthly_partition_contains_ip6_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP6 address values in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec"
            }
          }
        }
      },
      "ColumnPiiProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_contains_usa_phone_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_contains_usa_zipcode_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_contains_email_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_contains_ip4_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_contains_ip6_percent" : {
            "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_contains_usa_phone_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA phone number in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaPhonePercentCheckSpec"
            },
            "profile_contains_usa_zipcode_percent" : {
              "description" : "Verifies that the percentage of rows that contains USA zip code in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsUsaZipcodePercentCheckSpec"
            },
            "profile_contains_email_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid emails in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsEmailPercentCheckSpec"
            },
            "profile_contains_ip4_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP4 address values in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp4PercentCheckSpec"
            },
            "profile_contains_ip6_percent" : {
              "description" : "Verifies that the percentage of rows that contains valid IP6 address values in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnPiiContainsIp6PercentCheckSpec"
            }
          }
        }
      },
      "ColumnPopulationStddevInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPopulationStddevSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPopulationStddevSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPopulationStddevSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a population (biased) standard deviation in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnPopulationVarianceInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericPopulationVarianceSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericPopulationVarianceSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericPopulationVarianceSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a population (biased) standard deviation in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnProfilingCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "numeric" : {
            "$ref" : "#/components/schemas/ColumnNumericProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datetime" : {
            "$ref" : "#/components/schemas/ColumnDatetimeProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "pii" : {
            "$ref" : "#/components/schemas/ColumnPiiProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/ColumnSqlProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "bool" : {
            "$ref" : "#/components/schemas/ColumnBoolProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "integrity" : {
            "$ref" : "#/components/schemas/ColumnIntegrityProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/ColumnAccuracyProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "datatype" : {
            "$ref" : "#/components/schemas/ColumnDatatypeProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "anomaly" : {
            "$ref" : "#/components/schemas/ColumnAnomalyProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/ColumnSchemaProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnComparisonProfilingChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "nulls" : {
              "description" : "Configuration of column level checks that verify nulls and blanks.",
              "$ref" : "#/components/schemas/ColumnNullsProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNullsProfilingChecksSpec"
            },
            "numeric" : {
              "description" : "Configuration of column level checks that verify negative values.",
              "$ref" : "#/components/schemas/ColumnNumericProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnNumericProfilingChecksSpec"
            },
            "strings" : {
              "description" : "Configuration of strings checks on a column level.",
              "$ref" : "#/components/schemas/ColumnStringsProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnStringsProfilingChecksSpec"
            },
            "uniqueness" : {
              "description" : "Configuration of uniqueness checks on a column level.",
              "$ref" : "#/components/schemas/ColumnUniquenessProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessProfilingChecksSpec"
            },
            "datetime" : {
              "description" : "Configuration of datetime checks on a column level.",
              "$ref" : "#/components/schemas/ColumnDatetimeProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatetimeProfilingChecksSpec"
            },
            "pii" : {
              "description" : "Configuration of Personal Identifiable Information (PII) checks on a column level.",
              "$ref" : "#/components/schemas/ColumnPiiProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnPiiProfilingChecksSpec"
            },
            "sql" : {
              "description" : "Configuration of SQL checks that use custom SQL aggregated expressions and SQL conditions in data quality checks.",
              "$ref" : "#/components/schemas/ColumnSqlProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSqlProfilingChecksSpec"
            },
            "bool" : {
              "description" : "Configuration of booleans checks on a column level.",
              "$ref" : "#/components/schemas/ColumnBoolProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnBoolProfilingChecksSpec"
            },
            "integrity" : {
              "description" : "Configuration of integrity checks on a column level.",
              "$ref" : "#/components/schemas/ColumnIntegrityProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnIntegrityProfilingChecksSpec"
            },
            "accuracy" : {
              "description" : "Configuration of accuracy checks on a column level.",
              "$ref" : "#/components/schemas/ColumnAccuracyProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAccuracyProfilingChecksSpec"
            },
            "datatype" : {
              "description" : "Configuration of datatype checks on a column level.",
              "$ref" : "#/components/schemas/ColumnDatatypeProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeProfilingChecksSpec"
            },
            "anomaly" : {
              "description" : "Configuration of anomaly checks on a column level.",
              "$ref" : "#/components/schemas/ColumnAnomalyProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyProfilingChecksSpec"
            },
            "schema" : {
              "description" : "Configuration of schema checks on a column level.",
              "$ref" : "#/components/schemas/ColumnSchemaProfilingChecksSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaProfilingChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons at a column level. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnComparisonProfilingChecksSpec",
                "originalRef" : "#/definitions/ColumnComparisonProfilingChecksSpec"
              }
            }
          }
        }
      },
      "ColumnRangeMaxValueSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnRangeMaxValueStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnRangeMaxValueSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnRangeMaxValueSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnRangeMaxValueSensorParametersSpec"
            }
          }
        }
      },
      "ColumnRangeMedianValueStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericMedianSensorParametersSpec"
            }
          }
        }
      },
      "ColumnRangeMinValueSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnRangeMinValueStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnRangeMinValueSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnRangeMinValueSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnRangeMinValueSensorParametersSpec"
            }
          }
        }
      },
      "ColumnRangeStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "min_value" : {
            "$ref" : "#/components/schemas/ColumnRangeMinValueStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "median_value" : {
            "$ref" : "#/components/schemas/ColumnRangeMedianValueStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "max_value" : {
            "$ref" : "#/components/schemas/ColumnRangeMaxValueStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sum_value" : {
            "$ref" : "#/components/schemas/ColumnRangeSumValueStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_value" : {
              "description" : "Configuration of the profiler that finds the minimum value in the column.",
              "$ref" : "#/components/schemas/ColumnRangeMinValueStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnRangeMinValueStatisticsCollectorSpec"
            },
            "median_value" : {
              "description" : "Configuration of the profiler that finds the median value in the column.",
              "$ref" : "#/components/schemas/ColumnRangeMedianValueStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnRangeMedianValueStatisticsCollectorSpec"
            },
            "max_value" : {
              "description" : "Configuration of the profiler that finds the maximum value in the column.",
              "$ref" : "#/components/schemas/ColumnRangeMaxValueStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnRangeMaxValueStatisticsCollectorSpec"
            },
            "sum_value" : {
              "description" : "Configuration of the profiler that finds the sum value in the column.",
              "$ref" : "#/components/schemas/ColumnRangeSumValueStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnRangeSumValueStatisticsCollectorSpec"
            }
          }
        }
      },
      "ColumnRangeSumValueStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            }
          }
        }
      },
      "ColumnSampleStddevInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSampleStddevSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSampleStddevSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSampleStddevSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a sample (unbiased) maximal values in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnSampleVarianceInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSampleVarianceSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSampleVarianceSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSampleVarianceSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a sample (unbiased) maximal values in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnSamplingColumnSamplesSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "limit" : {
            "type" : "integer",
            "description" : "The limit of results that are returned. The default value is 10 sample values with the highest count (the most popular).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The limit of results that are returned. The default value is 10 sample values with the highest count (the most popular)."
            }
          }
        }
      },
      "ColumnSamplingColumnSamplesStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnSamplingColumnSamplesSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnSamplingColumnSamplesSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnSamplingColumnSamplesSensorParametersSpec"
            }
          }
        }
      },
      "ColumnSamplingStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "column_samples" : {
            "$ref" : "#/components/schemas/ColumnSamplingColumnSamplesStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "column_samples" : {
              "description" : "Configuration of the profiler that finds the maximum string length.",
              "$ref" : "#/components/schemas/ColumnSamplingColumnSamplesStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnSamplingColumnSamplesStatisticsCollectorSpec"
            }
          }
        }
      },
      "ColumnSchemaColumnExistsCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnColumnExistsSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters for a column exists sensor",
              "$ref" : "#/components/schemas/ColumnColumnExistsSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnColumnExistsSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when the column was not found.",
              "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsInteger1RuleParametersSpec"
            },
            "error" : {
              "description" : "Alerting threshold that raises a data quality error when the column was not found.",
              "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsInteger1RuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a data quality fatal issue when the column was not found.",
              "$ref" : "#/components/schemas/EqualsInteger1RuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsInteger1RuleParametersSpec"
            }
          }
        }
      },
      "ColumnSchemaDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_column_exists" : {
            "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_type_changed" : {
            "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_column_exists" : {
              "description" : "Checks the metadata of the monitored table and verifies if the column exists. Stores the most recent value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec"
            },
            "daily_column_type_changed" : {
              "description" : "Checks the metadata of the monitored column and detects if the data type (including the length, precision, scale, nullability) has changed since the last day. Stores the most recent hash for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnSchemaMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_column_exists" : {
            "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_type_changed" : {
            "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_column_exists" : {
              "description" : "Checks the metadata of the monitored table and verifies if the column exists. Stores the most recent value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec"
            },
            "monthly_column_type_changed" : {
              "description" : "Checks the metadata of the monitored column and detects if the data type (including the length, precision, scale, nullability) has changed since the last month. Stores the most recent hash for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnSchemaProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_column_exists" : {
            "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_type_changed" : {
            "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_column_exists" : {
              "description" : "Checks the metadata of the monitored table and verifies if the column exists.",
              "$ref" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaColumnExistsCheckSpec"
            },
            "profile_column_type_changed" : {
              "description" : "Checks the metadata of the monitored column and detects if the data type (including the length, precision, scale, nullability) has changed.",
              "$ref" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSchemaTypeChangedCheckSpec"
            }
          }
        }
      },
      "ColumnSchemaTypeChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnColumnTypeHashSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column data type hash sensor parameters",
              "$ref" : "#/components/schemas/ColumnColumnTypeHashSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnColumnTypeHashSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "ColumnSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables all data quality checks on the column. Data quality checks will not be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "sql_expression" : {
            "type" : "string",
            "description" : "SQL expression used for calculated fields or when additional column value transformation is required before the column could be used analyzed in data quality checks (data type conversion, transformation). It should be an SQL expression using the SQL language of the analyzed database type. Use replacement tokens {table} to replace the content with the full table name, {alias} to replace the content with the table alias of an analyzed table or {column} to replace the content with the analyzed column name. An example to extract a value from a string column that stores a JSON in PostgreSQL: \"{column}::json->'address'->'zip'\".",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "type_snapshot" : {
            "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profiling_checks" : {
            "$ref" : "#/components/schemas/ColumnProfilingCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monitoring_checks" : {
            "$ref" : "#/components/schemas/ColumnMonitoringChecksRootSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "partitioned_checks" : {
            "$ref" : "#/components/schemas/ColumnPartitionedChecksRootSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statistics" : {
            "$ref" : "#/components/schemas/ColumnStatisticsCollectorsRootCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "labels" : {
            "type" : "array",
            "description" : "Custom labels that were assigned to the column. Labels are used for searching for columns when filtered data quality checks are executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables all data quality checks on the column. Data quality checks will not be executed."
            },
            "sql_expression" : {
              "type" : "string",
              "description" : "SQL expression used for calculated fields or when additional column value transformation is required before the column could be used analyzed in data quality checks (data type conversion, transformation). It should be an SQL expression using the SQL language of the analyzed database type. Use replacement tokens {table} to replace the content with the full table name, {alias} to replace the content with the table alias of an analyzed table or {column} to replace the content with the analyzed column name. An example to extract a value from a string column that stores a JSON in PostgreSQL: \"{column}::json->'address'->'zip'\"."
            },
            "type_snapshot" : {
              "description" : "Column data type that was retrieved when the table metadata was imported.",
              "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
              "originalRef" : "#/components/schemas/ColumnTypeSnapshotSpec"
            },
            "profiling_checks" : {
              "description" : "Configuration of data quality profiling checks that are enabled. Pick a check from a category, apply the parameters and rules to enable it.",
              "$ref" : "#/components/schemas/ColumnProfilingCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnProfilingCheckCategoriesSpec"
            },
            "monitoring_checks" : {
              "description" : "Configuration of column level monitoring checks. Monitoring are data quality checks that are evaluated for each period of time (daily, weekly, monthly, etc.). A monitoring stores only the most recent data quality check result for each period of time.",
              "$ref" : "#/components/schemas/ColumnMonitoringChecksRootSpec",
              "originalRef" : "#/components/schemas/ColumnMonitoringChecksRootSpec"
            },
            "partitioned_checks" : {
              "description" : "Configuration of column level date/time partitioned checks. Partitioned data quality checks are evaluated for each partition separately, raising separate alerts at a partition level. The table does not need to be physically partitioned by date, it is possible to run data quality checks for each day or month of data separately.",
              "$ref" : "#/components/schemas/ColumnPartitionedChecksRootSpec",
              "originalRef" : "#/components/schemas/ColumnPartitionedChecksRootSpec"
            },
            "statistics" : {
              "description" : "Custom configuration of a column level statistics collector (a basic profiler). Enables customization of the statistics collector settings when the collector is analysing this column.",
              "$ref" : "#/components/schemas/ColumnStatisticsCollectorsRootCategoriesSpec",
              "originalRef" : "#/components/schemas/ColumnStatisticsCollectorsRootCategoriesSpec"
            },
            "labels" : {
              "type" : "array",
              "description" : "Custom labels that were assigned to the column. Labels are used for searching for columns when filtered data quality checks are executed.",
              "items" : {
                "type" : "string"
              }
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            }
          }
        }
      },
      "ColumnSqlAggregateExprCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregatedExpressionSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL aggregate expression that is evaluated on a column",
              "$ref" : "#/components/schemas/ColumnSqlAggregatedExpressionSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregatedExpressionSensorParametersSpec"
            },
            "warning" : {
              "description" : "Default alerting threshold for warnings raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for errors raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Default alerting threshold for fatal data quality issues raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnSqlAggregatedExpressionSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_expression" : {
            "type" : "string",
            "description" : "SQL aggregate expression that returns a numeric value calculated from rows. The expression is evaluated on a whole table or withing a GROUP BY clause for daily partitions and/or data groups. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_expression" : {
              "type" : "string",
              "description" : "SQL aggregate expression that returns a numeric value calculated from rows. The expression is evaluated on a whole table or withing a GROUP BY clause for daily partitions and/or data groups. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name."
            }
          }
        }
      },
      "ColumnSqlConditionFailedCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL condition (an expression that returns true/false) which is evaluated on a each row, using a {column} placeholder to reference the current column.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when a given number of rows failed the custom SQL condition (expression). The warning is considered as a passed data quality check.",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows failing the custom SQL condition (expression) that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue when a given number of rows failed the custom SQL condition (expression). A fatal issue indicates a serious data quality problem that should result in stopping the data pipelines.",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnSqlConditionFailedCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_condition" : {
            "type" : "string",
            "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_condition" : {
              "type" : "string",
              "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name."
            }
          }
        }
      },
      "ColumnSqlConditionPassedPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL condition (an expression that returns true/false) which is evaluated on a each row for the given column, using a {column} placeholder to reference the current column.",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when a minimum acceptable percentage of rows did not pass the custom SQL condition (expression). The warning is considered as a passed data quality check.",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum acceptable percentage of rows passing the custom SQL condition (expression) that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue when a minimum acceptable percentage of rows did not pass the custom SQL condition (expression). A fatal issue indicates a serious data quality problem that should result in stopping the data pipelines.",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnSqlConditionPassedPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_condition" : {
            "type" : "string",
            "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_condition" : {
              "type" : "string",
              "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} and {column} placeholder that are replaced with a full table name and the analyzed column name."
            }
          }
        }
      },
      "ColumnSqlDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_sql_condition_passed_percent_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sql_condition_failed_count_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sql_aggregate_expr_column" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_sql_condition_passed_percent_on_column" : {
              "description" : "Verifies that a minimum percentage of rows passed a custom SQL condition (expression). Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec"
            },
            "daily_sql_condition_failed_count_on_column" : {
              "description" : "Verifies that a number of rows failed a custom SQL condition(expression) does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec"
            },
            "daily_sql_aggregate_expr_column" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "ColumnSqlDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_sql_condition_passed_percent_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sql_condition_failed_count_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sql_aggregate_expr_column" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_sql_condition_passed_percent_on_column" : {
              "description" : "Verifies that a minimum percentage of rows passed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec"
            },
            "daily_partition_sql_condition_failed_count_on_column" : {
              "description" : "Verifies that a number of rows failed a custom SQL condition(expression) does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec"
            },
            "daily_partition_sql_aggregate_expr_column" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "ColumnSqlMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_sql_condition_passed_percent_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sql_condition_failed_count_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sql_aggregate_expr_column" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_sql_condition_passed_percent_on_column" : {
              "description" : "Verifies that a minimum percentage of rows passed a custom SQL condition (expression). Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec"
            },
            "monthly_sql_condition_failed_count_on_column" : {
              "description" : "Verifies that a number of rows failed a custom SQL condition(expression) does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec"
            },
            "monthly_sql_aggregate_expr_column" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "ColumnSqlMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_sql_condition_passed_percent_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sql_condition_failed_count_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sql_aggregate_expr_column" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_sql_condition_passed_percent_on_column" : {
              "description" : "Verifies that a minimum percentage of rows passed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec"
            },
            "monthly_partition_sql_condition_failed_count_on_column" : {
              "description" : "Verifies that a number of rows failed a custom SQL condition(expression) does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec"
            },
            "monthly_partition_sql_aggregate_expr_column" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "ColumnSqlProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_sql_condition_passed_percent_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sql_condition_failed_count_on_column" : {
            "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sql_aggregate_expr_column" : {
            "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_sql_condition_passed_percent_on_column" : {
              "description" : "Verifies that a minimum percentage of rows passed a custom SQL condition (expression).",
              "$ref" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionPassedPercentCheckSpec"
            },
            "profile_sql_condition_failed_count_on_column" : {
              "description" : "Verifies that a number of rows failed a custom SQL condition(expression) does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlConditionFailedCountCheckSpec"
            },
            "profile_sql_aggregate_expr_column" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range.",
              "$ref" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/ColumnSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "ColumnStatisticsCollectorsRootCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "nulls" : {
            "$ref" : "#/components/schemas/ColumnNullsStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "strings" : {
            "$ref" : "#/components/schemas/ColumnStringsStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "uniqueness" : {
            "$ref" : "#/components/schemas/ColumnUniquenessStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "range" : {
            "$ref" : "#/components/schemas/ColumnRangeStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sampling" : {
            "$ref" : "#/components/schemas/ColumnSamplingStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "nulls" : {
              "description" : "Configuration of null values profilers on a column level.",
              "$ref" : "#/components/schemas/ColumnNullsStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/ColumnNullsStatisticsCollectorsSpec"
            },
            "strings" : {
              "description" : "Configuration of string (text) profilers on a column level.",
              "$ref" : "#/components/schemas/ColumnStringsStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStatisticsCollectorsSpec"
            },
            "uniqueness" : {
              "description" : "Configuration of profilers that analyse uniqueness of values (distinct count).",
              "$ref" : "#/components/schemas/ColumnUniquenessStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessStatisticsCollectorsSpec"
            },
            "range" : {
              "description" : "Configuration of profilers that analyse the range of values (min, max).",
              "$ref" : "#/components/schemas/ColumnRangeStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/ColumnRangeStatisticsCollectorsSpec"
            },
            "sampling" : {
              "description" : "Configuration of profilers that collect the column samples.",
              "$ref" : "#/components/schemas/ColumnSamplingStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/ColumnSamplingStatisticsCollectorsSpec"
            }
          }
        }
      },
      "ColumnStatisticsModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "column_name" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_hash" : {
            "type" : "integer",
            "description" : "Column hash that identifies the column using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables all data quality checks on the column. Data quality checks will not be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_checks" : {
            "type" : "boolean",
            "description" : "True when the column has any checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "type_snapshot" : {
            "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statistics" : {
            "type" : "array",
            "description" : "List of collected column statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/StatisticsMetricModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "collect_column_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Column model that returns the basic fields from a column specification with the additional data statistics.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table" : {
              "description" : "Physical table name including the schema and table names.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "column_name" : {
              "type" : "string",
              "description" : "Column name."
            },
            "column_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Column hash that identifies the column using a unique hash code."
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables all data quality checks on the column. Data quality checks will not be executed."
            },
            "has_any_configured_checks" : {
              "type" : "boolean",
              "description" : "True when the column has any checks configured."
            },
            "type_snapshot" : {
              "description" : "Column data type that was retrieved when the table metadata was imported.",
              "$ref" : "#/components/schemas/ColumnTypeSnapshotSpec",
              "originalRef" : "#/components/schemas/ColumnTypeSnapshotSpec"
            },
            "statistics" : {
              "type" : "array",
              "description" : "List of collected column statistics.",
              "items" : {
                "$ref" : "#/components/schemas/StatisticsMetricModel",
                "originalRef" : "#/components/schemas/StatisticsMetricModel"
              }
            },
            "collect_column_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors for this column",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            }
          },
          "description" : "Column model that returns the basic fields from a column specification with the additional data statistics."
        }
      },
      "ColumnStringBooleanPlaceholderPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringBooleanPlaceholderPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringBooleanPlaceholderPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringBooleanPlaceholderPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with a boolean placeholder strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringEmptyCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringEmptyCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringEmptyCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringEmptyCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with empty strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringEmptyPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringEmptyPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringEmptyPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringEmptyPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with empty strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnStringInvalidEmailCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringInvalidEmailCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringInvalidEmailCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringInvalidEmailCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with invalid emails in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringInvalidIp4AddressCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringInvalidIp4AddressCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringInvalidIp4AddressCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringInvalidIp4AddressCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with invalid IP4 address in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringInvalidIp6AddressCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringInvalidIp6AddressCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringInvalidIp6AddressCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringInvalidIp6AddressCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with invalid IP6 address in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringInvalidUuidCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringInvalidUuidCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringInvalidUuidCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringInvalidUuidCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with invalid uuid in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringLengthAboveMaxLengthCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with strings with a length above the indicated by the user length in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringLengthAboveMaxLengthPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringLengthAboveMaxLengthPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with strings with a length above the indicated by the user length in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringLengthBelowMinLengthCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with strings with a length below the indicated by the user length in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringLengthBelowMinLengthPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringLengthBelowMinLengthPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with strings with a length below the indicated by the user length in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringLengthInRangePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringLengthInRangePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringLengthInRangePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringLengthInRangePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with strings with a length in the range indicated by the user in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringMatchDateRegexPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMatchDateRegexPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMatchDateRegexPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMatchDateRegexPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with matching date regex in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringMatchNameRegexPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMatchNameRegexPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMatchNameRegexPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMatchNameRegexPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with matching name regex in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringMatchRegexPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMatchRegexPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMatchRegexPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMatchRegexPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with matching regex in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringMaxLengthCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            }
          }
        }
      },
      "ColumnStringMeanLengthCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnStringMinLengthCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MinValueRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum length of string in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MinValueRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MinValueRuleParametersSpec"
            }
          }
        }
      },
      "ColumnStringNotMatchDateRegexCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringNotMatchDateRegexCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringNotMatchDateRegexCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringNotMatchDateRegexCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with not matching date regex in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringNotMatchRegexCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringNotMatchRegexCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringNotMatchRegexCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringNotMatchRegexCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with not matching regex in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringNullPlaceholderCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringNullPlaceholderCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringNullPlaceholderCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringNullPlaceholderCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with a null placeholder strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringNullPlaceholderPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringNullPlaceholderPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringNullPlaceholderPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringNullPlaceholderPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with a null placeholder strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnStringParsableToFloatPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringParsableToFloatPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringParsableToFloatPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringParsableToFloatPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with a parsable to float strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringParsableToIntegerPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringParsableToIntegerPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringParsableToIntegerPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringParsableToIntegerPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with a parsable to integer strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringSurroundedByWhitespaceCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespaceCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespaceCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespaceCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with surrounded by whitespace strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringSurroundedByWhitespacePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespacePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespacePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringSurroundedByWhitespacePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with surrounded by whitespace strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnStringValidCountryCodePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringValidCountryCodePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringValidCountryCodePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringValidCountryCodePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with a valid country code strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringValidCurrencyCodePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringValidCurrencyCodePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringValidCurrencyCodePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringValidCurrencyCodePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of rows with a valid currency code strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringValidDatesPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringValidDatePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringValidDatePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringValidDatePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with nulls in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringValidUuidPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringValidUuidPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringValidUuidPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringValidUuidPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum percentage of rows with a valid UUID in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringValueInSetPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringValueInSetPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters that specify a list of expected values that are compared to the values in the tested string column.",
              "$ref" : "#/components/schemas/ColumnStringsStringValueInSetPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringValueInSetPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at a warning severity level when the percentage of valid rows is below the minimum percentage threshold.",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at an error severity level when the percentage of valid rows is below the minimum percentage threshold.",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Default alerting threshold for a percentage of rows with valid values in a column (from the set of expected values). Raises a data quality issue with at a fatal severity level when the percentage of valid rows is below the minimum percentage threshold.",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnStringWhitespaceCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringWhitespaceCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringWhitespaceCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringWhitespaceCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with whitespace strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnStringWhitespacePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringWhitespacePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringWhitespacePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringWhitespacePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with whitespace strings in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule5ParametersSpec"
            }
          }
        }
      },
      "ColumnStringsDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_length_below_min_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_length_below_min_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_length_above_max_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_length_above_max_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_length_in_range_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_empty_count" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_empty_percent" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_surrounded_by_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_surrounded_by_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_null_placeholder_count" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_null_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_boolean_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_parsable_to_integer_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_parsable_to_float_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_expected_strings_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_valid_dates_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_valid_country_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_valid_currency_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_invalid_email_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_invalid_uuid_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_valid_uuid_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_invalid_ip4_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_invalid_ip6_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_not_match_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_match_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_not_match_date_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_match_date_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_string_match_name_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_expected_strings_in_top_values_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_string_max_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the maximum accepted length. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMaxLengthCheckSpec"
            },
            "daily_string_min_length" : {
              "description" : "Verifies that the length of string in a column does not fall below the minimum accepted length. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMinLengthCheckSpec"
            },
            "daily_string_mean_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the mean accepted length. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMeanLengthCheckSpec"
            },
            "daily_string_length_below_min_length_count" : {
              "description" : "The check counts the number of strings in the column that is below the length defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec"
            },
            "daily_string_length_below_min_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is below the length defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec"
            },
            "daily_string_length_above_max_length_count" : {
              "description" : "The check counts the number of strings in the column that is above the length defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec"
            },
            "daily_string_length_above_max_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is above the length defined by the user as a parameter. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec"
            },
            "daily_string_length_in_range_percent" : {
              "description" : "The check counts the percentage of those strings with length in the range provided by the user in the column. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec"
            },
            "daily_string_empty_count" : {
              "description" : "Verifies that the number of empty strings in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyCountCheckSpec"
            },
            "daily_string_empty_percent" : {
              "description" : "Verifies that the percentage of empty strings in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec"
            },
            "daily_string_whitespace_count" : {
              "description" : "Verifies that the number of whitespace strings in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec"
            },
            "daily_string_whitespace_percent" : {
              "description" : "Verifies that the percentage of whitespace strings in a column does not exceed the maximum accepted percent. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec"
            },
            "daily_string_surrounded_by_whitespace_count" : {
              "description" : "Verifies that the number of strings surrounded by whitespace in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec"
            },
            "daily_string_surrounded_by_whitespace_percent" : {
              "description" : "Verifies that the percentage of strings surrounded by whitespace in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec"
            },
            "daily_string_null_placeholder_count" : {
              "description" : "Verifies that the number of null placeholders in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec"
            },
            "daily_string_null_placeholder_percent" : {
              "description" : "Verifies that the percentage of null placeholders in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec"
            },
            "daily_string_boolean_placeholder_percent" : {
              "description" : "Verifies that the percentage of boolean placeholder for strings in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec"
            },
            "daily_string_parsable_to_integer_percent" : {
              "description" : "Verifies that the percentage of parsable to integer string in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec"
            },
            "daily_string_parsable_to_float_percent" : {
              "description" : "Verifies that the percentage of parsable to float string in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec"
            },
            "daily_expected_strings_in_use_count" : {
              "description" : "Verifies that the expected string values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec"
            },
            "daily_string_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec"
            },
            "daily_string_valid_dates_percent" : {
              "description" : "Verifies that the percentage of valid dates in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec"
            },
            "daily_string_valid_country_code_percent" : {
              "description" : "Verifies that the percentage of valid country code in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec"
            },
            "daily_string_valid_currency_code_percent" : {
              "description" : "Verifies that the percentage of valid currency code in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec"
            },
            "daily_string_invalid_email_count" : {
              "description" : "Verifies that the number of invalid emails in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec"
            },
            "daily_string_invalid_uuid_count" : {
              "description" : "Verifies that the number of invalid UUID in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec"
            },
            "daily_string_valid_uuid_percent" : {
              "description" : "Verifies that the percentage of valid UUID in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec"
            },
            "daily_string_invalid_ip4_address_count" : {
              "description" : "Verifies that the number of invalid IP4 address in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec"
            },
            "daily_string_invalid_ip6_address_count" : {
              "description" : "Verifies that the number of invalid IP6 address in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec"
            },
            "daily_string_not_match_regex_count" : {
              "description" : "Verifies that the number of strings not matching the custom regex in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec"
            },
            "daily_string_match_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the custom regex in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec"
            },
            "daily_string_not_match_date_regex_count" : {
              "description" : "Verifies that the number of strings not matching the date format regex in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec"
            },
            "daily_string_match_date_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the date format regex in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec"
            },
            "daily_string_match_name_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the name format regex in a column does not fall below the minimum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec"
            },
            "daily_expected_strings_in_top_values_count" : {
              "description" : "Verifies that the top X most popular column values contain all values from a list of expected values. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec"
            }
          }
        }
      },
      "ColumnStringsDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_length_below_min_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_length_below_min_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_length_above_max_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_length_above_max_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_length_in_range_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_empty_count" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_empty_percent" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_surrounded_by_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_surrounded_by_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_null_placeholder_count" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_null_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_boolean_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_parsable_to_integer_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_parsable_to_float_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_expected_strings_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_valid_dates_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_valid_country_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_valid_currency_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_invalid_email_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_invalid_uuid_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_valid_uuid_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_invalid_ip4_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_invalid_ip6_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_not_match_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_match_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_not_match_date_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_match_date_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_string_match_name_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_expected_strings_in_top_values_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_string_max_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the maximum accepted length. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMaxLengthCheckSpec"
            },
            "daily_partition_string_min_length" : {
              "description" : "Verifies that the length of string in a column does not fall below the minimum accepted length. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMinLengthCheckSpec"
            },
            "daily_partition_string_mean_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the mean accepted length. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMeanLengthCheckSpec"
            },
            "daily_partition_string_length_below_min_length_count" : {
              "description" : "The check counts the number of strings in the column that is below the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec"
            },
            "daily_partition_string_length_below_min_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is below the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec"
            },
            "daily_partition_string_length_above_max_length_count" : {
              "description" : "The check counts the number of strings in the column that is above the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec"
            },
            "daily_partition_string_length_above_max_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is above the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec"
            },
            "daily_partition_string_length_in_range_percent" : {
              "description" : "The check counts the percentage of those strings with length in the range provided by the user in the column. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec"
            },
            "daily_partition_string_empty_count" : {
              "description" : "Verifies that the number of empty strings in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyCountCheckSpec"
            },
            "daily_partition_string_empty_percent" : {
              "description" : "Verifies that the percentage of empty strings in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec"
            },
            "daily_partition_string_whitespace_count" : {
              "description" : "Verifies that the number of whitespace strings in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec"
            },
            "daily_partition_string_whitespace_percent" : {
              "description" : "Verifies that the percentage of whitespace strings in a column does not exceed the maximum accepted percent. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec"
            },
            "daily_partition_string_surrounded_by_whitespace_count" : {
              "description" : "Verifies that the number of strings surrounded by whitespace in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec"
            },
            "daily_partition_string_surrounded_by_whitespace_percent" : {
              "description" : "Verifies that the percentage of strings surrounded by whitespace in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec"
            },
            "daily_partition_string_null_placeholder_count" : {
              "description" : "Verifies that the number of null placeholders in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec"
            },
            "daily_partition_string_null_placeholder_percent" : {
              "description" : "Verifies that the percentage of null placeholders in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec"
            },
            "daily_partition_string_boolean_placeholder_percent" : {
              "description" : "Verifies that the percentage of boolean placeholder for strings in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec"
            },
            "daily_partition_string_parsable_to_integer_percent" : {
              "description" : "Verifies that the percentage of parsable to integer string in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec"
            },
            "daily_partition_string_parsable_to_float_percent" : {
              "description" : "Verifies that the percentage of parsable to float string in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec"
            },
            "daily_partition_expected_strings_in_use_count" : {
              "description" : "Verifies that the expected string values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec"
            },
            "daily_partition_string_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec"
            },
            "daily_partition_string_valid_dates_percent" : {
              "description" : "Verifies that the percentage of valid dates in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec"
            },
            "daily_partition_string_valid_country_code_percent" : {
              "description" : "Verifies that the percentage of valid country code in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec"
            },
            "daily_partition_string_valid_currency_code_percent" : {
              "description" : "Verifies that the percentage of valid currency code in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec"
            },
            "daily_partition_string_invalid_email_count" : {
              "description" : "Verifies that the number of invalid emails in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec"
            },
            "daily_partition_string_invalid_uuid_count" : {
              "description" : "Verifies that the number of invalid UUID in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec"
            },
            "daily_partition_valid_uuid_percent" : {
              "description" : "Verifies that the percentage of valid UUID in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec"
            },
            "daily_partition_string_invalid_ip4_address_count" : {
              "description" : "Verifies that the number of invalid IP4 address in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec"
            },
            "daily_partition_string_invalid_ip6_address_count" : {
              "description" : "Verifies that the number of invalid IP6 address in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec"
            },
            "daily_partition_string_not_match_regex_count" : {
              "description" : "Verifies that the number of strings not matching the custom regex in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec"
            },
            "daily_partition_string_match_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the custom regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec"
            },
            "daily_partition_string_not_match_date_regex_count" : {
              "description" : "Verifies that the number of strings not matching the date format regex in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec"
            },
            "daily_partition_string_match_date_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the date format regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec"
            },
            "daily_partition_string_match_name_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the name format regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec"
            },
            "daily_partition_expected_strings_in_top_values_count" : {
              "description" : "Verifies that the top X most popular column values contain all values from a list of expected values. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec"
            }
          }
        }
      },
      "ColumnStringsExpectedStringsInTopValuesCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "expected_values" : {
            "type" : "array",
            "description" : "List of expected string values that should be found in the tested column among the TOP most popular (highest distinct count) column values.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "top" : {
            "type" : "integer",
            "description" : "The number of the most popular values (with the highest distinct count) that are analyzed to find the expected values.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "expected_values" : {
              "type" : "array",
              "description" : "List of expected string values that should be found in the tested column among the TOP most popular (highest distinct count) column values.",
              "items" : {
                "type" : "string"
              }
            },
            "top" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The number of the most popular values (with the highest distinct count) that are analyzed to find the expected values."
            }
          }
        }
      },
      "ColumnStringsExpectedStringsInUseCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "expected_values" : {
            "type" : "array",
            "description" : "List of expected string values that should be found in the tested column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "expected_values" : {
              "type" : "array",
              "description" : "List of expected string values that should be found in the tested column.",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ColumnStringsMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_length_below_min_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_length_below_min_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_length_above_max_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_length_above_max_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_length_in_range_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_empty_count" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_empty_percent" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_valid_dates_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_surrounded_by_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_surrounded_by_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_null_placeholder_count" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_null_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_boolean_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_parsable_to_integer_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_parsable_to_float_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_expected_strings_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_valid_country_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_valid_currency_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_invalid_email_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_invalid_uuid_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_valid_uuid_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_invalid_ip4_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_invalid_ip6_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_not_match_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_match_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_not_match_date_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_match_date_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_string_match_name_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_expected_strings_in_top_values_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_string_max_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the maximum accepted length. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMaxLengthCheckSpec"
            },
            "monthly_string_min_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the minimum accepted length. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMinLengthCheckSpec"
            },
            "monthly_string_mean_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the mean accepted length. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMeanLengthCheckSpec"
            },
            "monthly_string_length_below_min_length_count" : {
              "description" : "The check counts those strings with length below the one provided by the user in a column. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec"
            },
            "monthly_string_length_below_min_length_percent" : {
              "description" : "The check counts percentage of those strings with length below the one provided by the user in a column. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec"
            },
            "monthly_string_length_above_max_length_count" : {
              "description" : "The check counts those strings with length above the one provided by the user in a column. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec"
            },
            "monthly_string_length_above_max_length_percent" : {
              "description" : "The check counts percentage of those strings with length above the one provided by the user in a column. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec"
            },
            "monthly_string_length_in_range_percent" : {
              "description" : "The check counts percentage of those strings with length in the range provided by the user in a column. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec"
            },
            "monthly_string_empty_count" : {
              "description" : "Verifies that the number of empty strings in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyCountCheckSpec"
            },
            "monthly_string_empty_percent" : {
              "description" : "Verifies that the percentage of empty strings in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec"
            },
            "monthly_string_valid_dates_percent" : {
              "description" : "Verifies that the percentage of valid dates in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec"
            },
            "monthly_string_whitespace_count" : {
              "description" : "Verifies that the number of whitespace strings in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec"
            },
            "monthly_string_whitespace_percent" : {
              "description" : "Verifies that the percentage of whitespace strings in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec"
            },
            "monthly_string_surrounded_by_whitespace_count" : {
              "description" : "Verifies that the number of strings surrounded by whitespace in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec"
            },
            "monthly_string_surrounded_by_whitespace_percent" : {
              "description" : "Verifies that the percentage of strings surrounded by whitespace in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec"
            },
            "monthly_string_null_placeholder_count" : {
              "description" : "Verifies that the number of null placeholders in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec"
            },
            "monthly_string_null_placeholder_percent" : {
              "description" : "Verifies that the percentage of null placeholders in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec"
            },
            "monthly_string_boolean_placeholder_percent" : {
              "description" : "Verifies that the percentage of boolean placeholder for strings in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec"
            },
            "monthly_string_parsable_to_integer_percent" : {
              "description" : "Verifies that the percentage of parsable to integer string in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec"
            },
            "monthly_string_parsable_to_float_percent" : {
              "description" : "Verifies that the percentage of parsable to float string in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec"
            },
            "monthly_expected_strings_in_use_count" : {
              "description" : "Verifies that the expected string values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec"
            },
            "monthly_string_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec"
            },
            "monthly_string_valid_country_code_percent" : {
              "description" : "Verifies that the percentage of valid country code in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec"
            },
            "monthly_string_valid_currency_code_percent" : {
              "description" : "Verifies that the percentage of valid currency code in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec"
            },
            "monthly_string_invalid_email_count" : {
              "description" : "Verifies that the number of invalid emails in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec"
            },
            "monthly_string_invalid_uuid_count" : {
              "description" : "Verifies that the number of invalid UUID in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec"
            },
            "monthly_string_valid_uuid_percent" : {
              "description" : "Verifies that the percentage of valid UUID in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec"
            },
            "monthly_string_invalid_ip4_address_count" : {
              "description" : "Verifies that the number of invalid IP4 address in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec"
            },
            "monthly_string_invalid_ip6_address_count" : {
              "description" : "Verifies that the number of invalid IP6 address in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec"
            },
            "monthly_string_not_match_regex_count" : {
              "description" : "Verifies that the number of strings not matching the custom regex in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec"
            },
            "monthly_string_match_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the custom regex in a column does not exceed the minimum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec"
            },
            "monthly_string_not_match_date_regex_count" : {
              "description" : "Verifies that the number of strings not matching the date format regex in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec"
            },
            "monthly_string_match_date_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the date format regex in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec"
            },
            "monthly_string_match_name_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the name regex in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec"
            },
            "monthly_expected_strings_in_top_values_count" : {
              "description" : "Verifies that the top X most popular column values contain all values from a list of expected values. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec"
            }
          }
        }
      },
      "ColumnStringsMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_length_below_min_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_length_below_min_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_length_above_max_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_length_above_max_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_length_in_range_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_empty_count" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_empty_percent" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_surrounded_by_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_surrounded_by_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_null_placeholder_count" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_null_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_boolean_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_parsable_to_integer_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_parsable_to_float_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_expected_strings_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_valid_dates_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_valid_country_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_valid_currency_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_invalid_email_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_invalid_uuid_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_valid_uuid_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_invalid_ip4_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_invalid_ip6_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_not_match_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_match_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_not_match_date_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_match_date_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_string_match_name_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_expected_strings_in_top_values_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_string_max_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the maximum accepted length. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMaxLengthCheckSpec"
            },
            "monthly_partition_string_min_length" : {
              "description" : "Verifies that the length of string in a column does not fall below the minimum accepted length. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMinLengthCheckSpec"
            },
            "monthly_partition_string_mean_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the mean accepted length. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMeanLengthCheckSpec"
            },
            "monthly_partition_string_length_below_min_length_count" : {
              "description" : "The check counts the number of strings in the column that is below the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec"
            },
            "monthly_partition_string_length_below_min_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is below the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec"
            },
            "monthly_partition_string_length_above_max_length_count" : {
              "description" : "The check counts the number of strings in the column that is above the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec"
            },
            "monthly_partition_string_length_above_max_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is above the length defined by the user as a parameter. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec"
            },
            "monthly_partition_string_length_in_range_percent" : {
              "description" : "The check counts the percentage of those strings with length in the range provided by the user in the column. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec"
            },
            "monthly_partition_string_empty_count" : {
              "description" : "Verifies that the number of empty strings in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyCountCheckSpec"
            },
            "monthly_partition_string_empty_percent" : {
              "description" : "Verifies that the percentage of empty strings in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec"
            },
            "monthly_partition_string_whitespace_count" : {
              "description" : "Verifies that the number of whitespace strings in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec"
            },
            "monthly_partition_string_whitespace_percent" : {
              "description" : "Verifies that the percentage of whitespace strings in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec"
            },
            "monthly_partition_string_surrounded_by_whitespace_count" : {
              "description" : "Verifies that the number of strings surrounded by whitespace in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec"
            },
            "monthly_partition_string_surrounded_by_whitespace_percent" : {
              "description" : "Verifies that the percentage of strings surrounded by whitespace in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec"
            },
            "monthly_partition_string_null_placeholder_count" : {
              "description" : "Verifies that the number of null placeholders in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec"
            },
            "monthly_partition_string_null_placeholder_percent" : {
              "description" : "Verifies that the percentage of null placeholders in a column does not exceed the maximum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec"
            },
            "monthly_partition_string_boolean_placeholder_percent" : {
              "description" : "Verifies that the percentage of boolean placeholder for strings in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec"
            },
            "monthly_partition_string_parsable_to_integer_percent" : {
              "description" : "Verifies that the percentage of parsable to integer string in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec"
            },
            "monthly_partition_string_parsable_to_float_percent" : {
              "description" : "Verifies that the percentage of parsable to float string in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec"
            },
            "monthly_partition_expected_strings_in_use_count" : {
              "description" : "Verifies that the expected string values were found in the column. Raises a data quality issue when too many expected values were not found (were missing). Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec"
            },
            "monthly_partition_string_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec"
            },
            "monthly_partition_string_valid_dates_percent" : {
              "description" : "Verifies that the percentage of valid dates in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec"
            },
            "monthly_partition_string_valid_country_code_percent" : {
              "description" : "Verifies that the percentage of valid country code in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec"
            },
            "monthly_partition_string_valid_currency_code_percent" : {
              "description" : "Verifies that the percentage of valid currency code in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec"
            },
            "monthly_partition_string_invalid_email_count" : {
              "description" : "Verifies that the number of invalid emails in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec"
            },
            "monthly_partition_string_invalid_uuid_count" : {
              "description" : "Verifies that the number of invalid UUID in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec"
            },
            "monthly_partition_valid_uuid_percent" : {
              "description" : "Verifies that the percentage of valid UUID in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec"
            },
            "monthly_partition_string_invalid_ip4_address_count" : {
              "description" : "Verifies that the number of invalid IP4 address in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec"
            },
            "monthly_partition_string_invalid_ip6_address_count" : {
              "description" : "Verifies that the number of invalid IP6 address in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec"
            },
            "monthly_partition_string_not_match_regex_count" : {
              "description" : "Verifies that the number of strings not matching the custom regex in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec"
            },
            "monthly_partition_string_match_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the custom regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec"
            },
            "monthly_partition_string_not_match_date_regex_count" : {
              "description" : "Verifies that the number of strings not matching the date format regex in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec"
            },
            "monthly_partition_string_match_date_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the date format regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec"
            },
            "monthly_partition_string_match_name_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the name format regex in a column does not fall below the minimum accepted percentage. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec"
            },
            "monthly_partition_expected_strings_in_top_values_count" : {
              "description" : "Verifies that the top X most popular column values contain all values from a list of expected values. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec"
            }
          }
        }
      },
      "ColumnStringsProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_length_below_min_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_length_below_min_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_length_above_max_length_count" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_length_above_max_length_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_length_in_range_percent" : {
            "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_empty_count" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_empty_percent" : {
            "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_surrounded_by_whitespace_count" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_surrounded_by_whitespace_percent" : {
            "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_null_placeholder_count" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_null_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_boolean_placeholder_percent" : {
            "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_parsable_to_integer_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_parsable_to_float_percent" : {
            "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_expected_strings_in_use_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_value_in_set_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_valid_dates_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_valid_country_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_valid_currency_code_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_invalid_email_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_invalid_uuid_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_valid_uuid_percent" : {
            "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_invalid_ip4_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_invalid_ip6_address_count" : {
            "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_not_match_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_match_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_not_match_date_regex_count" : {
            "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_match_date_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_string_match_name_regex_percent" : {
            "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_expected_strings_in_top_values_count" : {
            "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_string_max_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the maximum accepted length.",
              "$ref" : "#/components/schemas/ColumnStringMaxLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMaxLengthCheckSpec"
            },
            "profile_string_min_length" : {
              "description" : "Verifies that the length of string in a column does not fall below the minimum accepted length.",
              "$ref" : "#/components/schemas/ColumnStringMinLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMinLengthCheckSpec"
            },
            "profile_string_mean_length" : {
              "description" : "Verifies that the length of string in a column does not exceed the mean accepted length.",
              "$ref" : "#/components/schemas/ColumnStringMeanLengthCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMeanLengthCheckSpec"
            },
            "profile_string_length_below_min_length_count" : {
              "description" : "The check counts the number of strings in the column that is below the length defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthCountCheckSpec"
            },
            "profile_string_length_below_min_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is below the length defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthBelowMinLengthPercentCheckSpec"
            },
            "profile_string_length_above_max_length_count" : {
              "description" : "The check counts the number of strings in the column that is above the length defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthCountCheckSpec"
            },
            "profile_string_length_above_max_length_percent" : {
              "description" : "The check counts the percentage of strings in the column that is above the length defined by the user as a parameter.",
              "$ref" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthAboveMaxLengthPercentCheckSpec"
            },
            "profile_string_length_in_range_percent" : {
              "description" : "The check counts the percentage of those strings with length in the range provided by the user in the column. ",
              "$ref" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringLengthInRangePercentCheckSpec"
            },
            "profile_string_empty_count" : {
              "description" : "Verifies that empty strings in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringEmptyCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyCountCheckSpec"
            },
            "profile_string_empty_percent" : {
              "description" : "Verifies that the percentage of empty strings in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringEmptyPercentCheckSpec"
            },
            "profile_string_whitespace_count" : {
              "description" : "Verifies that the number of whitespace strings in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespaceCountCheckSpec"
            },
            "profile_string_whitespace_percent" : {
              "description" : "Verifies that the percentage of whitespace strings in a column does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringWhitespacePercentCheckSpec"
            },
            "profile_string_surrounded_by_whitespace_count" : {
              "description" : "Verifies that the number of strings surrounded by whitespace in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespaceCountCheckSpec"
            },
            "profile_string_surrounded_by_whitespace_percent" : {
              "description" : "Verifies that the percentage of strings surrounded by whitespace in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringSurroundedByWhitespacePercentCheckSpec"
            },
            "profile_string_null_placeholder_count" : {
              "description" : "Verifies that the number of null placeholders in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderCountCheckSpec"
            },
            "profile_string_null_placeholder_percent" : {
              "description" : "Verifies that the percentage of null placeholders in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNullPlaceholderPercentCheckSpec"
            },
            "profile_string_boolean_placeholder_percent" : {
              "description" : "Verifies that the percentage of boolean placeholder for strings in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringBooleanPlaceholderPercentCheckSpec"
            },
            "profile_string_parsable_to_integer_percent" : {
              "description" : "Verifies that the percentage of parsable to integer string in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToIntegerPercentCheckSpec"
            },
            "profile_string_parsable_to_float_percent" : {
              "description" : "Verifies that the percentage of parsable to float string in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringParsableToFloatPercentCheckSpec"
            },
            "profile_expected_strings_in_use_count" : {
              "description" : "Verifies that the expected string values were found in the column. Raises a data quality issue when too many expected values were not found (were missing).",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInUseCountCheckSpec"
            },
            "profile_string_value_in_set_percent" : {
              "description" : "The check measures the percentage of rows whose value in a tested column is one of values from a list of expected values or the column value is null. Verifies that the percentage of rows having a valid column value does not exceed the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValueInSetPercentCheckSpec"
            },
            "profile_string_valid_dates_percent" : {
              "description" : "Verifies that the percentage of valid dates in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidDatesPercentCheckSpec"
            },
            "profile_string_valid_country_code_percent" : {
              "description" : "Verifies that the percentage of valid country code in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCountryCodePercentCheckSpec"
            },
            "profile_string_valid_currency_code_percent" : {
              "description" : "Verifies that the percentage of valid currency code in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidCurrencyCodePercentCheckSpec"
            },
            "profile_string_invalid_email_count" : {
              "description" : "Verifies that the number of invalid emails in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidEmailCountCheckSpec"
            },
            "profile_string_invalid_uuid_count" : {
              "description" : "Verifies that the number of invalid UUID in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidUuidCountCheckSpec"
            },
            "profile_string_valid_uuid_percent" : {
              "description" : "Verifies that the percentage of valid UUID in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringValidUuidPercentCheckSpec"
            },
            "profile_string_invalid_ip4_address_count" : {
              "description" : "Verifies that the number of invalid IP4 address in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp4AddressCountCheckSpec"
            },
            "profile_string_invalid_ip6_address_count" : {
              "description" : "Verifies that the number of invalid IP6 address in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringInvalidIp6AddressCountCheckSpec"
            },
            "profile_string_not_match_regex_count" : {
              "description" : "Verifies that the number of strings not matching the custom regex in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchRegexCountCheckSpec"
            },
            "profile_string_match_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the custom regex in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchRegexPercentCheckSpec"
            },
            "profile_string_not_match_date_regex_count" : {
              "description" : "Verifies that the number of strings not matching the date format regex in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringNotMatchDateRegexCountCheckSpec"
            },
            "profile_string_match_date_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the date format regex in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchDateRegexPercentCheckSpec"
            },
            "profile_string_match_name_regex_percent" : {
              "description" : "Verifies that the percentage of strings matching the name regex in a column does not fall below the minimum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnStringMatchNameRegexPercentCheckSpec"
            },
            "profile_expected_strings_in_top_values_count" : {
              "description" : "Verifies that the top X most popular column values contain all values from a list of expected values.",
              "$ref" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnExpectedStringsInTopValuesCountCheckSpec"
            }
          }
        }
      },
      "ColumnStringsStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "string_max_length" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "string_mean_length" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "string_min_length" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMinLengthStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "string_datatype_detect" : {
            "$ref" : "#/components/schemas/ColumnStringsStringDatatypeDetectStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "string_max_length" : {
              "description" : "Configuration of the profiler that finds the maximum string length.",
              "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMaxLengthStatisticsCollectorSpec"
            },
            "string_mean_length" : {
              "description" : "Configuration of the profiler that finds the mean string length.",
              "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMeanLengthStatisticsCollectorSpec"
            },
            "string_min_length" : {
              "description" : "Configuration of the profiler that finds the min string length.",
              "$ref" : "#/components/schemas/ColumnStringsStringMinLengthStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMinLengthStatisticsCollectorSpec"
            },
            "string_datatype_detect" : {
              "description" : "Configuration of the profiler that detects datatype.",
              "$ref" : "#/components/schemas/ColumnStringsStringDatatypeDetectStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringDatatypeDetectStatisticsCollectorSpec"
            }
          }
        }
      },
      "ColumnStringsStringBooleanPlaceholderPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringDatatypeDetectStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnDatatypeStringDatatypeDetectSensorParametersSpec"
            }
          }
        }
      },
      "ColumnStringsStringEmptyCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringEmptyPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringInvalidEmailCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringInvalidIp4AddressCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringInvalidIp6AddressCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringInvalidUuidCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringLengthAboveMaxLengthCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_length" : {
            "type" : "integer",
            "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "max_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0"
            }
          }
        }
      },
      "ColumnStringsStringLengthAboveMaxLengthPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_length" : {
            "type" : "integer",
            "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "max_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0"
            }
          }
        }
      },
      "ColumnStringsStringLengthBelowMinLengthCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_length" : {
            "type" : "integer",
            "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0"
            }
          }
        }
      },
      "ColumnStringsStringLengthBelowMinLengthPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_length" : {
            "type" : "integer",
            "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "This field can be used to define custom length. In order to define custom length, user should write correct length as a integer. If length is not defined by user then default length is 0"
            }
          }
        }
      },
      "ColumnStringsStringLengthInRangePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "min_length" : {
            "type" : "integer",
            "description" : "Sets a minimal string length",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "max_length" : {
            "type" : "integer",
            "description" : "Sets a maximal string length.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "min_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Sets a minimal string length"
            },
            "max_length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Sets a maximal string length."
            }
          }
        }
      },
      "ColumnStringsStringMatchDateRegexPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "date_formats" : {
            "$ref" : "#/components/schemas/StringsBuiltInDateFormats",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "date_formats" : {
              "type" : "string",
              "description" : "Desired date format. Sensor will try to parse the column records and cast the data using this format.",
              "enum" : [ "YYYY-MM-DD", "MM/DD/YYYY", "DD/MM/YYYY", "YYYY/MM/DD", "Month D, YYYY" ]
            }
          }
        }
      },
      "ColumnStringsStringMatchNameRegexPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringMatchRegexPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "regex" : {
            "type" : "string",
            "description" : "This field can be used to define custom regex. In order to define custom regex, user should write correct regex as a string. If regex is not defined by user then default regex is null",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "regex" : {
              "type" : "string",
              "description" : "This field can be used to define custom regex. In order to define custom regex, user should write correct regex as a string. If regex is not defined by user then default regex is null"
            }
          }
        }
      },
      "ColumnStringsStringMaxLengthSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringMaxLengthStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMaxLengthSensorParametersSpec"
            }
          }
        }
      },
      "ColumnStringsStringMeanLengthSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringMeanLengthStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMeanLengthSensorParametersSpec"
            }
          }
        }
      },
      "ColumnStringsStringMinLengthSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringMinLengthStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnStringsStringMinLengthSensorParametersSpec"
            }
          }
        }
      },
      "ColumnStringsStringNotMatchDateRegexCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "date_formats" : {
            "$ref" : "#/components/schemas/StringsBuiltInDateFormats",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "date_formats" : {
              "type" : "string",
              "description" : "Desired date format. Sensor will try to parse the column records and cast the data using this format.",
              "enum" : [ "YYYY-MM-DD", "MM/DD/YYYY", "DD/MM/YYYY", "YYYY/MM/DD", "Month D, YYYY" ]
            }
          }
        }
      },
      "ColumnStringsStringNotMatchRegexCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "regex" : {
            "type" : "string",
            "description" : "This field can be used to define custom regex. In order to define custom regex, user should write correct regex as a string. If regex is not defined by user then default regex is null",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "regex" : {
              "type" : "string",
              "description" : "This field can be used to define custom regex. In order to define custom regex, user should write correct regex as a string. If regex is not defined by user then default regex is null"
            }
          }
        }
      },
      "ColumnStringsStringNullPlaceholderCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringNullPlaceholderPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringParsableToFloatPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringParsableToIntegerPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringSurroundedByWhitespaceCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringSurroundedByWhitespacePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringValidCountryCodePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringValidCurrencyCodePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringValidDatePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringValidUuidPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringValueInSetPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "expected_values" : {
            "type" : "array",
            "description" : "A list of expected values that must be present in a string column, only values from this list are accepted and rows having these values in the tested column are counted as valid rows.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "expected_values" : {
              "type" : "array",
              "description" : "A list of expected values that must be present in a string column, only values from this list are accepted and rows having these values in the tested column are counted as valid rows.",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ColumnStringsStringWhitespaceCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnStringsStringWhitespacePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnSumInRangeCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericSumSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericSumSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a sum in range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/BetweenFloatsRuleParametersSpec",
              "originalRef" : "#/components/schemas/BetweenFloatsRuleParametersSpec"
            }
          }
        }
      },
      "ColumnTruePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnBoolTruePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnBoolTruePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnBoolTruePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of true value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnTypeSnapshotSpec" : {
        "type" : "object",
        "properties" : {
          "column_type" : {
            "type" : "string",
            "description" : "Column data type using the monitored database type names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "nullable" : {
            "type" : "boolean",
            "description" : "Column is nullable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "length" : {
            "type" : "integer",
            "description" : "Maximum length of text and binary columns.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "precision" : {
            "type" : "integer",
            "description" : "Precision of a numeric (decimal) data type.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "scale" : {
            "type" : "integer",
            "description" : "Scale of a numeric (decimal) data type.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "column_type" : {
              "type" : "string",
              "description" : "Column data type using the monitored database type names."
            },
            "nullable" : {
              "type" : "boolean",
              "description" : "Column is nullable."
            },
            "length" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Maximum length of text and binary columns."
            },
            "precision" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Precision of a numeric (decimal) data type."
            },
            "scale" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Scale of a numeric (decimal) data type."
            }
          }
        }
      },
      "ColumnUniquenessDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_anomaly_differencing_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_anomaly_stationary_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_count_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_percent_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_anomaly_differencing_distinct_count_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_anomaly_stationary_distinct_percent_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_count_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_count_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_percent_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_change_distinct_percent_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_distinct_count" : {
              "description" : "Verifies that the number of distinct values in a column does not fall below the minimum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctCountCheckSpec"
            },
            "daily_distinct_percent" : {
              "description" : "Verifies that the percentage of distinct values in a column does not fall below the minimum accepted percent. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctPercentCheckSpec"
            },
            "daily_duplicate_count" : {
              "description" : "Verifies that the number of duplicate values in a column does not exceed the maximum accepted count. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicateCountCheckSpec"
            },
            "daily_duplicate_percent" : {
              "description" : "Verifies that the percentage of duplicate values in a column does not exceed the maximum accepted percentage. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicatePercentCheckSpec"
            },
            "daily_anomaly_differencing_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec"
            },
            "daily_anomaly_stationary_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec"
            },
            "daily_change_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec"
            },
            "daily_change_distinct_count_since_yesterday" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec"
            },
            "daily_change_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec"
            },
            "daily_change_distinct_percent_since_yesterday" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec"
            },
            "daily_anomaly_differencing_distinct_count_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec"
            },
            "daily_anomaly_stationary_distinct_percent_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec"
            },
            "daily_change_distinct_count_since_7_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec"
            },
            "daily_change_distinct_count_since_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec"
            },
            "daily_change_distinct_percent_since_7_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec"
            },
            "daily_change_distinct_percent_since_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnUniquenessDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_anomaly_stationary_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_anomaly_stationary_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_count_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_percent_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_anomaly_stationary_distinct_count_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_anomaly_stationary_distinct_percent_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_count_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_count_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_percent_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_change_distinct_percent_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_distinct_count" : {
              "description" : "Verifies that the number of distinct values in a column does not fall below the minimum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctCountCheckSpec"
            },
            "daily_partition_distinct_percent" : {
              "description" : "Verifies that the percentage of distinct values in a column does not fall below the minimum accepted percent. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctPercentCheckSpec"
            },
            "daily_partition_duplicate_count" : {
              "description" : "Verifies that the number of duplicate values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicateCountCheckSpec"
            },
            "daily_partition_duplicate_percent" : {
              "description" : "Verifies that the percent of duplicate values in a column does not exceed the maximum accepted percent. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicatePercentCheckSpec"
            },
            "daily_partition_anomaly_stationary_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec"
            },
            "daily_partition_anomaly_stationary_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec"
            },
            "daily_partition_change_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec"
            },
            "daily_partition_change_distinct_count_since_yesterday" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec"
            },
            "daily_partition_change_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec"
            },
            "daily_partition_change_distinct_percent_since_yesterday" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec"
            },
            "daily_partition_anomaly_stationary_distinct_count_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec"
            },
            "daily_partition_anomaly_stationary_distinct_percent_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec"
            },
            "daily_partition_change_distinct_count_since_7_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec"
            },
            "daily_partition_change_distinct_count_since_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec"
            },
            "daily_partition_change_distinct_percent_since_7_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec"
            },
            "daily_partition_change_distinct_percent_since_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnUniquenessDistinctCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnUniquenessDistinctCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountSensorParametersSpec"
            }
          }
        }
      },
      "ColumnUniquenessDistinctPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnUniquenessDistinctPercentStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentSensorParametersSpec"
            }
          }
        }
      },
      "ColumnUniquenessDuplicateCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnUniquenessDuplicateCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicateCountSensorParametersSpec"
            }
          }
        }
      },
      "ColumnUniquenessDuplicatePercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "ColumnUniquenessDuplicatePercentStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicatePercentSensorParametersSpec"
            }
          }
        }
      },
      "ColumnUniquenessMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_anomaly_differencing_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_anomaly_stationary_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_count_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_percent_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_anomaly_differencing_distinct_count_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_anomaly_stationary_distinct_percent_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_count_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_count_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_percent_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_change_distinct_percent_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_distinct_count" : {
              "description" : "Verifies that the number of distinct values in a column does not fall below the minimum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctCountCheckSpec"
            },
            "monthly_distinct_percent" : {
              "description" : "Verifies that the percentage of distinct values in a column does not fall below the minimum accepted percent. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctPercentCheckSpec"
            },
            "monthly_duplicate_count" : {
              "description" : "Verifies that the number of duplicate values in a column does not exceed the maximum accepted count. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicateCountCheckSpec"
            },
            "monthly_duplicate_percent" : {
              "description" : "Verifies that the percentage of duplicate values in a column does not exceed the maximum accepted percentage. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicatePercentCheckSpec"
            },
            "monthly_anomaly_differencing_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec"
            },
            "monthly_anomaly_stationary_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec"
            },
            "monthly_change_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec"
            },
            "monthly_change_distinct_count_since_yesterday" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec"
            },
            "monthly_change_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec"
            },
            "monthly_change_distinct_percent_since_yesterday" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec"
            },
            "monthly_anomaly_differencing_distinct_count_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec"
            },
            "monthly_anomaly_stationary_distinct_percent_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec"
            },
            "monthly_change_distinct_count_since_7_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec"
            },
            "monthly_change_distinct_count_since_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec"
            },
            "monthly_change_distinct_percent_since_7_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec"
            },
            "monthly_change_distinct_percent_since_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnUniquenessMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_anomaly_stationary_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_anomaly_stationary_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_count_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_percent_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_anomaly_stationary_distinct_count_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_anomaly_stationary_distinct_percent_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_count_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_count_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_percent_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_change_distinct_percent_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_distinct_count" : {
              "description" : "Verifies that the number of distinct values in a column does not fall below the minimum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctCountCheckSpec"
            },
            "monthly_partition_distinct_percent" : {
              "description" : "Verifies that the percentage of distinct values in a column does not fall below the minimum accepted percent. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctPercentCheckSpec"
            },
            "monthly_partition_duplicate_count" : {
              "description" : "Verifies that the number of duplicate values in a column does not exceed the maximum accepted count. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicateCountCheckSpec"
            },
            "monthly_partition_duplicate_percent" : {
              "description" : "Verifies that the percent of duplicate values in a column does not exceed the maximum accepted percent. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicatePercentCheckSpec"
            },
            "monthly_partition_anomaly_stationary_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCountCheckSpec"
            },
            "monthly_partition_anomaly_stationary_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec"
            },
            "monthly_partition_change_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec"
            },
            "monthly_partition_change_distinct_count_since_yesterday" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec"
            },
            "monthly_partition_change_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec"
            },
            "monthly_partition_change_distinct_percent_since_yesterday" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec"
            },
            "monthly_partition_anomaly_stationary_distinct_count_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryPartitionDistinctCount30DaysCheckSpec"
            },
            "monthly_partition_anomaly_stationary_distinct_percent_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec"
            },
            "monthly_partition_change_distinct_count_since_7_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec"
            },
            "monthly_partition_change_distinct_count_since_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec"
            },
            "monthly_partition_change_distinct_percent_since_7_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec"
            },
            "monthly_partition_change_distinct_percent_since_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnUniquenessProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_anomaly_differencing_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_anomaly_stationary_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_count" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_count_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_percent_since_yesterday" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_anomaly_differencing_distinct_count_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_anomaly_stationary_distinct_percent_30_days" : {
            "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_count_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_count_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_percent_since_7_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_change_distinct_percent_since_30_days" : {
            "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_distinct_count" : {
              "description" : "Verifies that the number of distinct values in a column does not fall below the minimum accepted count.",
              "$ref" : "#/components/schemas/ColumnDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctCountCheckSpec"
            },
            "profile_distinct_percent" : {
              "description" : "Verifies that the percentage of distinct values in a column does not fall below the minimum accepted percent.",
              "$ref" : "#/components/schemas/ColumnDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDistinctPercentCheckSpec"
            },
            "profile_duplicate_count" : {
              "description" : "Verifies that the number of duplicate values in a column does not exceed the maximum accepted count.",
              "$ref" : "#/components/schemas/ColumnDuplicateCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicateCountCheckSpec"
            },
            "profile_duplicate_percent" : {
              "description" : "Verifies that the percentage of duplicate values in a column does not exceed the maximum accepted percentage.",
              "$ref" : "#/components/schemas/ColumnDuplicatePercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnDuplicatePercentCheckSpec"
            },
            "profile_anomaly_differencing_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCountCheckSpec"
            },
            "profile_anomaly_stationary_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercentCheckSpec"
            },
            "profile_change_distinct_count" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountCheckSpec"
            },
            "profile_change_distinct_count_since_yesterday" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSinceYesterdayCheckSpec"
            },
            "profile_change_distinct_percent" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentCheckSpec"
            },
            "profile_change_distinct_percent_since_yesterday" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from yesterday.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSinceYesterdayCheckSpec"
            },
            "profile_anomaly_differencing_distinct_count_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyDifferencingDistinctCount30DaysCheckSpec"
            },
            "profile_anomaly_stationary_distinct_percent_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column is within a two-tailed percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnAnomalyStationaryDistinctPercent30DaysCheckSpec"
            },
            "profile_change_distinct_count_since_7_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince7DaysCheckSpec"
            },
            "profile_change_distinct_count_since_30_days" : {
              "description" : "Verifies that the distinct count in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctCountSince30DaysCheckSpec"
            },
            "profile_change_distinct_percent_since_7_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last week.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince7DaysCheckSpec"
            },
            "profile_change_distinct_percent_since_30_days" : {
              "description" : "Verifies that the distinct percent in a monitored column has changed by a fixed rate since the last readout from last month.",
              "$ref" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/ColumnChangeDistinctPercentSince30DaysCheckSpec"
            }
          }
        }
      },
      "ColumnUniquenessStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "distinct_count" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "distinct_percent" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "duplicate_count" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "duplicate_percent" : {
            "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "distinct_count" : {
              "description" : "Configuration of the profiler that counts distinct column values.",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctCountStatisticsCollectorSpec"
            },
            "distinct_percent" : {
              "description" : "Configuration of the profiler that measure the percentage of distinct column values.",
              "$ref" : "#/components/schemas/ColumnUniquenessDistinctPercentStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDistinctPercentStatisticsCollectorSpec"
            },
            "duplicate_count" : {
              "description" : "Configuration of the profiler that counts duplicate column values.",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicateCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicateCountStatisticsCollectorSpec"
            },
            "duplicate_percent" : {
              "description" : "Configuration of the profiler that measure the percentage of duplicate column values.",
              "$ref" : "#/components/schemas/ColumnUniquenessDuplicatePercentStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/ColumnUniquenessDuplicatePercentStatisticsCollectorSpec"
            }
          }
        }
      },
      "ColumnValidLatitudePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValidLatitudePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValidLatitudePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValidLatitudePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with valid latitude value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnValidLongitudePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValidLongitudePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValidLongitudePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValidLongitudePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set percentage of rows with valid longitude value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnValueAboveMaxValueCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValueAboveMaxValueCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValueAboveMaxValueCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValueAboveMaxValueCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with values with a value above the indicated by the user value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnValueAboveMaxValuePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValueAboveMaxValuePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValueAboveMaxValuePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValueAboveMaxValuePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with values with a value above the indicated by the user value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnValueBelowMinValueCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValueBelowMinValueCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValueBelowMinValueCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValueBelowMinValueCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with values with a value below the indicated by the user value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            }
          }
        }
      },
      "ColumnValueBelowMinValuePercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValueBelowMinValuePercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValueBelowMinValuePercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValueBelowMinValuePercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows with values with a value below the indicated by the user value in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MaxPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnValuesInRangeIntegersPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValuesInRangeIntegersPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValuesInRangeIntegersPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValuesInRangeIntegersPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of values from range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "ColumnValuesInRangeNumericPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/ColumnNumericValuesInRangeNumericPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/ColumnNumericValuesInRangeNumericPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/ColumnNumericValuesInRangeNumericPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for set percentage of values from range in a column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule5ParametersSpec"
            }
          }
        }
      },
      "CommentSpec" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string",
            "description" : "Comment date and time",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "comment_by" : {
            "type" : "string",
            "description" : "Commented by",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment text",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "date" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Comment date and time"
            },
            "comment_by" : {
              "type" : "string",
              "description" : "Commented by"
            },
            "comment" : {
              "type" : "string",
              "description" : "Comment text"
            }
          }
        }
      },
      "CommonColumnModel" : {
        "type" : "object",
        "properties" : {
          "column_name" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tables_count" : {
            "type" : "integer",
            "description" : "Count of tables that are have a column with this name.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "description" : "Common column model that describes a column name that is frequently used in tables within a connection",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "column_name" : {
              "type" : "string",
              "description" : "Column name."
            },
            "tables_count" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Count of tables that are have a column with this name."
            }
          },
          "description" : "Common column model that describes a column name that is frequently used in tables within a connection"
        }
      },
      "CompareThresholdsModel" : {
        "type" : "object",
        "properties" : {
          "warning_difference_percent" : {
            "type" : "number",
            "description" : "The percentage difference between the measure value on the compared table and the reference table that raises a warning severity data quality issue when the difference is bigger.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "error_difference_percent" : {
            "type" : "number",
            "description" : "The percentage difference between the measure value on the compared table and the reference table that raises an error severity data quality issue when the difference is bigger.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "fatal_difference_percent" : {
            "type" : "number",
            "description" : "The percentage difference between the measure value on the compared table and the reference table that raises a fatal severity data quality issue when the difference is bigger.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "description" : "Model with the compare threshold levels for raising data quality issues at different severity levels when the difference between the compared (tested) table and the reference table (the source of truth) exceed given thresholds as a percentage of difference between the actual value and the expected value from the reference table.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "warning_difference_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "The percentage difference between the measure value on the compared table and the reference table that raises a warning severity data quality issue when the difference is bigger."
            },
            "error_difference_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "The percentage difference between the measure value on the compared table and the reference table that raises an error severity data quality issue when the difference is bigger."
            },
            "fatal_difference_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "The percentage difference between the measure value on the compared table and the reference table that raises a fatal severity data quality issue when the difference is bigger."
            }
          },
          "description" : "Model with the compare threshold levels for raising data quality issues at different severity levels when the difference between the compared (tested) table and the reference table (the source of truth) exceed given thresholds as a percentage of difference between the actual value and the expected value from the reference table."
        }
      },
      "ComparisonCheckResultModel" : {
        "type" : "object",
        "properties" : {
          "check_name" : {
            "type" : "string",
            "description" : "DQOps data quality check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "executed_at" : {
            "type" : "integer",
            "description" : "The timestamp when the check was executed.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "valid_results" : {
            "type" : "integer",
            "description" : "The number of data groups that were compared and the values matched within the accepted error margin for all check severity levels.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "warnings" : {
            "type" : "integer",
            "description" : "The number of data groups that were compared and the values did not match, raising a warning severity level data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "errors" : {
            "type" : "integer",
            "description" : "The number of data groups that were compared and the values did not match, raising an error severity level data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "fatals" : {
            "type" : "integer",
            "description" : "The number of data groups that were compared and the values did not match, raising a fatal severity level data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "execution_errors" : {
            "type" : "integer",
            "description" : "The number of execution errors in the check or rule that prevented comparing the tables.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "not_matching_data_groups" : {
            "type" : "array",
            "description" : "A list of not matching data grouping names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "description" : "The table comparison check result model for the most recent data comparison run. Identifies the check name and the number of data groupings that passed or failed the comparison.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_name" : {
              "type" : "string",
              "description" : "DQOps data quality check name."
            },
            "executed_at" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The timestamp when the check was executed."
            },
            "valid_results" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data groups that were compared and the values matched within the accepted error margin for all check severity levels."
            },
            "warnings" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data groups that were compared and the values did not match, raising a warning severity level data quality issue."
            },
            "errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data groups that were compared and the values did not match, raising an error severity level data quality issue."
            },
            "fatals" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data groups that were compared and the values did not match, raising a fatal severity level data quality issue."
            },
            "execution_errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of execution errors in the check or rule that prevented comparing the tables."
            },
            "not_matching_data_groups" : {
              "type" : "array",
              "description" : "A list of not matching data grouping names.",
              "items" : {
                "type" : "string"
              }
            }
          },
          "description" : "The table comparison check result model for the most recent data comparison run. Identifies the check name and the number of data groupings that passed or failed the comparison."
        }
      },
      "ConnectionIncidentGroupingSpec" : {
        "type" : "object",
        "properties" : {
          "grouping_level" : {
            "$ref" : "#/components/schemas/IncidentGroupingLevel",
            "exampleSetFlag" : false
          },
          "minimum_severity" : {
            "$ref" : "#/components/schemas/MinimumGroupingSeverityLevel",
            "exampleSetFlag" : false
          },
          "divide_by_data_groups" : {
            "type" : "boolean",
            "description" : "Create separate data quality incidents for each data group, creating different incidents for different groups of rows. By default, data groups are ignored for grouping data quality issues into data quality incidents.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "max_incident_length_days" : {
            "type" : "integer",
            "description" : "The maximum length of a data quality incident in days. When a new data quality issue is detected after max_incident_length_days days since a similar data quality was first seen, a new data quality incident is created that will capture all following data quality issues for the next max_incident_length_days days. The default value is 60 days.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "mute_for_days" : {
            "type" : "integer",
            "description" : "The number of days that all similar data quality issues are muted when a a data quality incident is closed in the 'mute' status.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables data quality incident creation for failed data quality checks on the data source.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "webhooks" : {
            "$ref" : "#/components/schemas/IncidentWebhookNotificationsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "grouping_level" : {
              "type" : "string",
              "description" : "Grouping level of failed data quality checks for creating higher level data quality incidents. The default grouping level is by a table, a data quality dimension and a check category (i.e. a datatype data quality incident detected on a table X in the numeric checks category).",
              "enum" : [ "table", "table_dimension", "table_dimension_category", "table_dimension_category_type", "table_dimension_category_name" ]
            },
            "minimum_severity" : {
              "type" : "string",
              "description" : "Minimum severity level of data quality issues that are grouped into incidents. The default minimum severity level is 'warning'. Other supported severity levels are 'error' and 'fatal'.",
              "enum" : [ "warning", "error", "fatal" ]
            },
            "divide_by_data_groups" : {
              "type" : "boolean",
              "description" : "Create separate data quality incidents for each data group, creating different incidents for different groups of rows. By default, data groups are ignored for grouping data quality issues into data quality incidents."
            },
            "max_incident_length_days" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The maximum length of a data quality incident in days. When a new data quality issue is detected after max_incident_length_days days since a similar data quality was first seen, a new data quality incident is created that will capture all following data quality issues for the next max_incident_length_days days. The default value is 60 days."
            },
            "mute_for_days" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of days that all similar data quality issues are muted when a a data quality incident is closed in the 'mute' status."
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables data quality incident creation for failed data quality checks on the data source."
            },
            "webhooks" : {
              "description" : "Configuration of Webhook URLs for new or updated incident notifications.",
              "$ref" : "#/components/schemas/IncidentWebhookNotificationsSpec",
              "originalRef" : "#/components/schemas/IncidentWebhookNotificationsSpec"
            }
          }
        }
      },
      "ConnectionModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "connection_hash" : {
            "type" : "integer",
            "description" : "Connection hash that identifies the connection using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "parallel_runs_limit" : {
            "type" : "integer",
            "description" : "The concurrency limit for the maximum number of parallel SQL queries executed on this connection.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "provider_type" : {
            "$ref" : "#/components/schemas/ProviderType",
            "exampleSetFlag" : false
          },
          "bigquery" : {
            "$ref" : "#/components/schemas/BigQueryParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "snowflake" : {
            "$ref" : "#/components/schemas/SnowflakeParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "postgresql" : {
            "$ref" : "#/components/schemas/PostgresqlParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "redshift" : {
            "$ref" : "#/components/schemas/RedshiftParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sqlserver" : {
            "$ref" : "#/components/schemas/SqlServerParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "mysql" : {
            "$ref" : "#/components/schemas/MysqlParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "oracle" : {
            "$ref" : "#/components/schemas/OracleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_profiling_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_monitoring_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_partition_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collect_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the connection to the data source.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Connection model for with a subset of parameters, excluding all nested objects.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "connection_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Connection hash that identifies the connection using a unique hash code."
            },
            "parallel_runs_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The concurrency limit for the maximum number of parallel SQL queries executed on this connection."
            },
            "provider_type" : {
              "type" : "string",
              "description" : "Database provider type (required). Accepts: bigquery, snowflake, etc.",
              "enum" : [ "bigquery", "snowflake", "postgresql", "redshift", "sqlserver", "mysql", "oracle" ]
            },
            "bigquery" : {
              "description" : "BigQuery connection parameters. Specify parameters in the bigquery section.",
              "$ref" : "#/components/schemas/BigQueryParametersSpec",
              "originalRef" : "#/components/schemas/BigQueryParametersSpec"
            },
            "snowflake" : {
              "description" : "Snowflake connection parameters.",
              "$ref" : "#/components/schemas/SnowflakeParametersSpec",
              "originalRef" : "#/components/schemas/SnowflakeParametersSpec"
            },
            "postgresql" : {
              "description" : "PostgreSQL connection parameters.",
              "$ref" : "#/components/schemas/PostgresqlParametersSpec",
              "originalRef" : "#/components/schemas/PostgresqlParametersSpec"
            },
            "redshift" : {
              "description" : "Redshift connection parameters.",
              "$ref" : "#/components/schemas/RedshiftParametersSpec",
              "originalRef" : "#/components/schemas/RedshiftParametersSpec"
            },
            "sqlserver" : {
              "description" : "SqlServer connection parameters.",
              "$ref" : "#/components/schemas/SqlServerParametersSpec",
              "originalRef" : "#/components/schemas/SqlServerParametersSpec"
            },
            "mysql" : {
              "description" : "MySQL connection parameters.",
              "$ref" : "#/components/schemas/MysqlParametersSpec",
              "originalRef" : "#/components/schemas/MysqlParametersSpec"
            },
            "oracle" : {
              "description" : "Oracle connection parameters.",
              "$ref" : "#/components/schemas/OracleParametersSpec",
              "originalRef" : "#/components/schemas/OracleParametersSpec"
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run all checks within this connection.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_profiling_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run profiling checks within this connection.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_monitoring_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run monitoring checks within this connection.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_partition_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run partition partitioned checks within this connection.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "collect_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors within this connection.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this connection.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the connection to the data source."
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Connection model for with a subset of parameters, excluding all nested objects."
        }
      },
      "ConnectionSpec" : {
        "type" : "object",
        "properties" : {
          "provider_type" : {
            "$ref" : "#/components/schemas/ProviderType",
            "exampleSetFlag" : false
          },
          "bigquery" : {
            "$ref" : "#/components/schemas/BigQueryParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "snowflake" : {
            "$ref" : "#/components/schemas/SnowflakeParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "postgresql" : {
            "$ref" : "#/components/schemas/PostgresqlParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "redshift" : {
            "$ref" : "#/components/schemas/RedshiftParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sqlserver" : {
            "$ref" : "#/components/schemas/SqlServerParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "mysql" : {
            "$ref" : "#/components/schemas/MysqlParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "oracle" : {
            "$ref" : "#/components/schemas/OracleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "parallel_jobs_limit" : {
            "type" : "integer",
            "description" : "The concurrency limit for the maximum number of parallel SQL queries executed on this connection.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "default_grouping_configuration" : {
            "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schedules" : {
            "$ref" : "#/components/schemas/DefaultSchedulesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "incident_grouping" : {
            "$ref" : "#/components/schemas/ConnectionIncidentGroupingSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "labels" : {
            "type" : "array",
            "description" : "Custom labels that were assigned to the connection. Labels are used for searching for tables when filtered data quality checks are executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "provider_type" : {
              "type" : "string",
              "description" : "Database provider type (required).",
              "enum" : [ "bigquery", "snowflake", "postgresql", "redshift", "sqlserver", "mysql", "oracle" ]
            },
            "bigquery" : {
              "description" : "BigQuery connection parameters. Specify parameters in the bigquery section.",
              "$ref" : "#/components/schemas/BigQueryParametersSpec",
              "originalRef" : "#/components/schemas/BigQueryParametersSpec"
            },
            "snowflake" : {
              "description" : "Snowflake connection parameters. Specify parameters in the snowflake section or set the url (which is the Snowflake JDBC url).",
              "$ref" : "#/components/schemas/SnowflakeParametersSpec",
              "originalRef" : "#/components/schemas/SnowflakeParametersSpec"
            },
            "postgresql" : {
              "description" : "PostgreSQL connection parameters. Specify parameters in the postgresql section or set the url (which is the PostgreSQL JDBC url).",
              "$ref" : "#/components/schemas/PostgresqlParametersSpec",
              "originalRef" : "#/components/schemas/PostgresqlParametersSpec"
            },
            "redshift" : {
              "description" : "Redshift connection parameters. Specify parameters in the redshift section or set the url (which is the Redshift JDBC url).",
              "$ref" : "#/components/schemas/RedshiftParametersSpec",
              "originalRef" : "#/components/schemas/RedshiftParametersSpec"
            },
            "sqlserver" : {
              "description" : "SQL Server connection parameters. Specify parameters in the sqlserver section or set the url (which is the SQL Server JDBC url).",
              "$ref" : "#/components/schemas/SqlServerParametersSpec",
              "originalRef" : "#/components/schemas/SqlServerParametersSpec"
            },
            "mysql" : {
              "description" : "MySQL connection parameters. Specify parameters in the sqlserver section or set the url (which is the MySQL JDBC url).",
              "$ref" : "#/components/schemas/MysqlParametersSpec",
              "originalRef" : "#/components/schemas/MysqlParametersSpec"
            },
            "oracle" : {
              "description" : "Oracle connection parameters. Specify parameters in the postgresql section or set the url (which is the Oracle JDBC url).",
              "$ref" : "#/components/schemas/OracleParametersSpec",
              "originalRef" : "#/components/schemas/OracleParametersSpec"
            },
            "parallel_jobs_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The concurrency limit for the maximum number of parallel SQL queries executed on this connection."
            },
            "default_grouping_configuration" : {
              "description" : "Default data grouping configuration for all tables. The configuration may be overridden on table, column and check level. Data groupings are configured in two cases: (1) the data in the table should be analyzed with a GROUP BY condition, to analyze different datasets using separate time series, for example a table contains data from multiple countries and there is a 'country' column used for partitioning. a static dimension is assigned to a table, when the data is partitioned at a table level (similar tables store the same information, but for different countries, etc.). (2) a static dimension is assigned to a table, when the data is partitioned at a table level (similar tables store the same information, but for different countries, etc.). ",
              "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
              "originalRef" : "#/components/schemas/DataGroupingConfigurationSpec"
            },
            "schedules" : {
              "description" : "Configuration of the job scheduler that runs data quality checks. The scheduler configuration is divided into types of checks that have different schedules.",
              "$ref" : "#/components/schemas/DefaultSchedulesSpec",
              "originalRef" : "#/components/schemas/DefaultSchedulesSpec"
            },
            "incident_grouping" : {
              "description" : "Configuration of data quality incident grouping. Configures how failed data quality checks are grouped into data quality incidents.",
              "$ref" : "#/components/schemas/ConnectionIncidentGroupingSpec",
              "originalRef" : "#/components/schemas/ConnectionIncidentGroupingSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "labels" : {
              "type" : "array",
              "description" : "Custom labels that were assigned to the connection. Labels are used for searching for tables when filtered data quality checks are executed.",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ConnectionSpecificationModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "connection_hash" : {
            "type" : "integer",
            "description" : "Connection hash that identifies the connection using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "spec" : {
            "$ref" : "#/components/schemas/ConnectionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Full connection model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "connection_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Connection hash that identifies the connection using a unique hash code."
            },
            "spec" : {
              "description" : "Full connection specification, including all nested objects (but not a list of tables).",
              "$ref" : "#/components/schemas/ConnectionSpec",
              "originalRef" : "#/components/schemas/ConnectionSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Full connection model"
        }
      },
      "ConnectionTestModel" : {
        "type" : "object",
        "properties" : {
          "connectionTestResult" : {
            "$ref" : "#/components/schemas/ConnectionTestStatus",
            "exampleSetFlag" : false
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Optional error message when the status is not \"SUCCESS\"",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Connection test status result",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionTestResult" : {
              "type" : "string",
              "description" : "Connection test result",
              "enum" : [ "SUCCESS", "FAILURE", "CONNECTION_ALREADY_EXISTS" ]
            },
            "errorMessage" : {
              "type" : "string",
              "description" : "Optional error message when the status is not \"SUCCESS\""
            }
          },
          "description" : "Connection test status result"
        }
      },
      "CustomCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_name" : {
            "type" : "string",
            "description" : "Optional custom sensor name. It is a folder name inside the user's home 'sensors' folder or the DQOps Home (DQOps distribution) home/sensors folder. Sample sensor name: table/volume/row_count. When this value is set, it overrides the default sensor definition defined for the named check definition.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "rule_name" : {
            "type" : "string",
            "description" : "Optional custom rule name. It is a path to a custom rule python module that starts at the user's home 'rules' folder. The path should not end with the .py file extension. Sample rule: myrules/my_custom_rule. When this value is set, it overrides the default rule definition defined for the named check definition.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/CustomSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/CustomRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/CustomRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/CustomRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "sensor_name" : {
              "type" : "string",
              "description" : "Optional custom sensor name. It is a folder name inside the user's home 'sensors' folder or the DQOps Home (DQOps distribution) home/sensors folder. Sample sensor name: table/volume/row_count. When this value is set, it overrides the default sensor definition defined for the named check definition."
            },
            "rule_name" : {
              "type" : "string",
              "description" : "Optional custom rule name. It is a path to a custom rule python module that starts at the user's home 'rules' folder. The path should not end with the .py file extension. Sample rule: myrules/my_custom_rule. When this value is set, it overrides the default rule definition defined for the named check definition."
            },
            "parameters" : {
              "description" : "Custom sensor parameters",
              "$ref" : "#/components/schemas/CustomSensorParametersSpec",
              "originalRef" : "#/components/schemas/CustomSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/CustomRuleParametersSpec",
              "originalRef" : "#/components/schemas/CustomRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/CustomRuleParametersSpec",
              "originalRef" : "#/components/schemas/CustomRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/CustomRuleParametersSpec",
              "originalRef" : "#/components/schemas/CustomRuleParametersSpec"
            }
          }
        }
      },
      "CustomRuleParametersSpec" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "CustomSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "DashboardSpec" : {
        "type" : "object",
        "properties" : {
          "dashboard_name" : {
            "type" : "string",
            "description" : "Dashboard name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Dashboard url",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "width" : {
            "type" : "integer",
            "description" : "Dashboard width (px)",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "height" : {
            "type" : "integer",
            "description" : "Dashboard height (px)",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "disable_thumbnail" : {
            "type" : "boolean",
            "description" : "Disables showing a thumbnail. A thumbnail url for Looker Studio dashboards is generated by adding /thumbnail to the end of the dashboard's url. It is a Google generated thumbnail of the dashboard.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "description" : "Key/value dictionary of additional parameters to be passed to the dashboard",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Key/value dictionary of additional parameters to be passed to the dashboard"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "dashboard_name" : {
              "type" : "string",
              "description" : "Dashboard name"
            },
            "url" : {
              "type" : "string",
              "description" : "Dashboard url"
            },
            "width" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Dashboard width (px)"
            },
            "height" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Dashboard height (px)"
            },
            "disable_thumbnail" : {
              "type" : "boolean",
              "description" : "Disables showing a thumbnail. A thumbnail url for Looker Studio dashboards is generated by adding /thumbnail to the end of the dashboard's url. It is a Google generated thumbnail of the dashboard."
            },
            "parameters" : {
              "type" : "object",
              "description" : "Key/value dictionary of additional parameters to be passed to the dashboard",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "DashboardsFolderSpec" : {
        "type" : "object",
        "properties" : {
          "folder_name" : {
            "type" : "string",
            "description" : "Folder name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dashboards" : {
            "type" : "array",
            "description" : "List of data quality dashboard at this level.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/DashboardSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "folders" : {
            "type" : "array",
            "description" : "List of data quality dashboard folders at this level.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/DashboardsFolderSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folder_name" : {
              "type" : "string",
              "description" : "Folder name"
            },
            "dashboards" : {
              "type" : "array",
              "description" : "List of data quality dashboard at this level.",
              "items" : {
                "$ref" : "#/components/schemas/DashboardSpec",
                "originalRef" : "#/components/schemas/DashboardSpec"
              }
            },
            "folders" : {
              "type" : "array",
              "description" : "List of data quality dashboard folders at this level.",
              "items" : {
                "$ref" : "#/components/schemas/DashboardsFolderSpec",
                "originalRef" : "#/components/schemas/DashboardsFolderSpec"
              }
            }
          }
        }
      },
      "DataDeleteResultPartition" : {
        "type" : "object",
        "properties" : {
          "rowsAffectedCount" : {
            "type" : "integer",
            "description" : "The number of rows that were deleted from the partition.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "partitionDeleted" : {
            "type" : "boolean",
            "description" : "True if a whole partition (a parquet file) was deleted instead of removing only selected rows.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "rowsAffectedCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of rows that were deleted from the partition."
            },
            "partitionDeleted" : {
              "type" : "boolean",
              "description" : "True if a whole partition (a parquet file) was deleted instead of removing only selected rows."
            }
          }
        }
      },
      "DataGroupingConfigurationListModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schema_name" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_name" : {
            "type" : "string",
            "description" : "Table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping_configuration_name" : {
            "type" : "string",
            "description" : "Data grouping configuration name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "default_data_grouping_configuration" : {
            "type" : "boolean",
            "description" : "True when this is the default data grouping configuration for the table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Data grouping configurations list model not containing nested objects, but only the name of the grouping configuration.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schema_name" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "table_name" : {
              "type" : "string",
              "description" : "Table name."
            },
            "data_grouping_configuration_name" : {
              "type" : "string",
              "description" : "Data grouping configuration name."
            },
            "default_data_grouping_configuration" : {
              "type" : "boolean",
              "description" : "True when this is the default data grouping configuration for the table."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            }
          },
          "description" : "Data grouping configurations list model not containing nested objects, but only the name of the grouping configuration."
        }
      },
      "DataGroupingConfigurationModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schema_name" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_name" : {
            "type" : "string",
            "description" : "Table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping_configuration_name" : {
            "type" : "string",
            "description" : "Data grouping configuration name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "spec" : {
            "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Data grouping configuration model containing nested objects and the configuration of grouping dimensions.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schema_name" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "table_name" : {
              "type" : "string",
              "description" : "Table name."
            },
            "data_grouping_configuration_name" : {
              "type" : "string",
              "description" : "Data grouping configuration name."
            },
            "spec" : {
              "description" : "Data grouping specification with the definition of the list of data grouping dimensions, the column names to use in a **GROUP BY** clause or a value of a static tag to assign to every check result captured from the table.",
              "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
              "originalRef" : "#/components/schemas/DataGroupingConfigurationSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Data grouping configuration model containing nested objects and the configuration of grouping dimensions."
        }
      },
      "DataGroupingConfigurationSpec" : {
        "type" : "object",
        "properties" : {
          "level_1" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_2" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_3" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_4" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_5" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_6" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_7" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_8" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "level_9" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "level_1" : {
              "description" : "Data grouping dimension level 1 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_2" : {
              "description" : "Data grouping dimension level 2 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_3" : {
              "description" : "Data grouping dimension level 3 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_4" : {
              "description" : "Data grouping dimension level 4 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_5" : {
              "description" : "Data grouping dimension level 5 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_6" : {
              "description" : "Data grouping dimension level 6 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_7" : {
              "description" : "Data grouping dimension level 7 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_8" : {
              "description" : "Data grouping dimension level 8 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            },
            "level_9" : {
              "description" : "Data grouping dimension level 9 configuration.",
              "$ref" : "#/components/schemas/DataGroupingDimensionSpec",
              "originalRef" : "#/components/schemas/DataGroupingDimensionSpec"
            }
          }
        }
      },
      "DataGroupingConfigurationTrimmedModel" : {
        "type" : "object",
        "properties" : {
          "data_grouping_configuration_name" : {
            "type" : "string",
            "description" : "Data grouping configuration name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "spec" : {
            "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Data grouping configuration model with trimmed path",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "data_grouping_configuration_name" : {
              "type" : "string",
              "description" : "Data grouping configuration name."
            },
            "spec" : {
              "description" : "Data grouping configuration specification.",
              "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
              "originalRef" : "#/components/schemas/DataGroupingConfigurationSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Data grouping configuration model with trimmed path"
        }
      },
      "DataGroupingDimensionSpec" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "$ref" : "#/components/schemas/DataGroupingDimensionSource",
            "exampleSetFlag" : false
          },
          "tag" : {
            "type" : "string",
            "description" : "The value assigned to a data quality grouping dimension when the source is 'tag'. Assign a hardcoded (static) data grouping dimension value (tag) when there are multiple similar tables that store the same data for different areas (countries, etc.). This could be a country name if a table or partition stores information for that country.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column" : {
            "type" : "string",
            "description" : "Column name that contains a dynamic data grouping dimension value (for dynamic data-driven data groupings). Sensor queries will be extended with a GROUP BY {data group level colum name}, sensors (and alerts) will be calculated for each unique value of the specified column. Also a separate time series will be tracked for each value.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Data grouping dimension name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "source" : {
              "type" : "string",
              "description" : "The source of the data grouping dimension value. The default grouping dimension source is a tag. Assign a tag when there are multiple similar tables that store the same data for different areas (countries, etc.). This could be a country name if a table or partition stores information for that country.",
              "enum" : [ "tag", "column_value" ]
            },
            "tag" : {
              "type" : "string",
              "description" : "The value assigned to a data quality grouping dimension when the source is 'tag'. Assign a hardcoded (static) data grouping dimension value (tag) when there are multiple similar tables that store the same data for different areas (countries, etc.). This could be a country name if a table or partition stores information for that country."
            },
            "column" : {
              "type" : "string",
              "description" : "Column name that contains a dynamic data grouping dimension value (for dynamic data-driven data groupings). Sensor queries will be extended with a GROUP BY {data group level colum name}, sensors (and alerts) will be calculated for each unique value of the specified column. Also a separate time series will be tracked for each value."
            },
            "name" : {
              "type" : "string",
              "description" : "Data grouping dimension name."
            }
          }
        }
      },
      "DatatypeEqualsRuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "expected_datatype" : {
            "type" : "integer",
            "description" : "Expected data type code, the data type codes are: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "expected_datatype" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Expected data type code, the data type codes are: 1 - integers, 2 - floats, 3 - dates, 4 - timestamps, 5 - booleans, 6 - strings, 7 - mixed data types."
            }
          }
        }
      },
      "DefaultSchedulesSpec" : {
        "type" : "object",
        "properties" : {
          "profiling" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monitoring_daily" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monitoring_monthly" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "partitioned_daily" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "partitioned_monthly" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "profiling" : {
              "description" : "Schedule for running profiling data quality checks.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "monitoring_daily" : {
              "description" : "Schedule for running daily monitoring checks.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "monitoring_monthly" : {
              "description" : "Schedule for running monthly monitoring checks.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "partitioned_daily" : {
              "description" : "Schedule for running daily partitioned checks.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "partitioned_monthly" : {
              "description" : "Schedule for running monthly partitioned checks.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            }
          }
        }
      },
      "DeleteStoredDataQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "The connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "fullTableName" : {
            "type" : "string",
            "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. This filter does not support patterns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dateStart" : {
            "type" : "string",
            "description" : "The start date (inclusive) to delete the data, based on the *time_period* column in Parquet files.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dateEnd" : {
            "type" : "string",
            "description" : "The end date (inclusive) to delete the data, based on the *time_period* column in Parquet files.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "deleteErrors" : {
            "type" : "boolean",
            "description" : "Delete the data from the [errors](../../reference/parquetfiles/errors.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the errors.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "deleteStatistics" : {
            "type" : "boolean",
            "description" : "Delete the data from the [statistics](../../reference/parquetfiles/statistics.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "deleteCheckResults" : {
            "type" : "boolean",
            "description" : "Delete the data from the [check_results](../../reference/parquetfiles/check_results.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the check results.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "deleteSensorReadouts" : {
            "type" : "boolean",
            "description" : "Delete the data from the [sensor_readouts](../../reference/parquetfiles/sensor_readouts.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the sensor readouts.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "columnNames" : {
            "type" : "array",
            "description" : "The list of column names to delete the data for column level results or errors only for selected columns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "The check category name, for example *volume* or *anomaly*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableComparisonName" : {
            "type" : "string",
            "description" : "The name of a table comparison configuration. Deletes only table comparison results (and errors) for a given comparison.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "The name of a data quality check. Uses the short check name, for example *daily_row_count*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "The type of checks whose results and errors should be deleted. For example, use *monitoring* to delete only monitoring checks data.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "The full sensor name whose results, checks based on the sensor, statistics and errors generated by the sensor sound be deleted. Uses a full sensor name, for example: *table/volume/row_count*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroupTag" : {
            "type" : "string",
            "description" : "The names of data groups in any of the *grouping_level_1*...*grouping_level_9* columns in the Parquet tables. Enables deleting data tagged for one data source or a subset of results when the group level is captured from a column in a monitored table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "qualityDimension" : {
            "type" : "string",
            "description" : "The data quality dimension name, for example *Timeliness* or *Completeness*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timeGradient" : {
            "type" : "string",
            "description" : "The time gradient (time scale) of the sensor and check results that are captured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "collectorCategory" : {
            "type" : "string",
            "description" : "The statistics collector category when statistics should be deleted. A statistics category is a group of statistics, for example *sampling* for the column value samples.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "collectorName" : {
            "type" : "string",
            "description" : "The statistics collector name when only statistics are deleted for a selected collector, for example *sample_values*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "collectorTarget" : {
            "type" : "string",
            "description" : "The type of the target object for which the basic statistics are deleted. Supported values are *table* and *column*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "The connection name."
            },
            "fullTableName" : {
              "type" : "string",
              "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. This filter does not support patterns."
            },
            "dateStart" : {
              "type" : "string",
              "format" : "date",
              "description" : "The start date (inclusive) to delete the data, based on the *time_period* column in Parquet files."
            },
            "dateEnd" : {
              "type" : "string",
              "format" : "date",
              "description" : "The end date (inclusive) to delete the data, based on the *time_period* column in Parquet files."
            },
            "deleteErrors" : {
              "type" : "boolean",
              "description" : "Delete the data from the [errors](../../reference/parquetfiles/errors.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the errors."
            },
            "deleteStatistics" : {
              "type" : "boolean",
              "description" : "Delete the data from the [statistics](../../reference/parquetfiles/statistics.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the statistics."
            },
            "deleteCheckResults" : {
              "type" : "boolean",
              "description" : "Delete the data from the [check_results](../../reference/parquetfiles/check_results.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the check results."
            },
            "deleteSensorReadouts" : {
              "type" : "boolean",
              "description" : "Delete the data from the [sensor_readouts](../../reference/parquetfiles/sensor_readouts.md) table. Because the default value is *false*, this parameter must be set to *true* to delete the sensor readouts."
            },
            "columnNames" : {
              "type" : "array",
              "description" : "The list of column names to delete the data for column level results or errors only for selected columns.",
              "items" : {
                "type" : "string"
              }
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "The check category name, for example *volume* or *anomaly*."
            },
            "tableComparisonName" : {
              "type" : "string",
              "description" : "The name of a table comparison configuration. Deletes only table comparison results (and errors) for a given comparison."
            },
            "checkName" : {
              "type" : "string",
              "description" : "The name of a data quality check. Uses the short check name, for example *daily_row_count*."
            },
            "checkType" : {
              "type" : "string",
              "description" : "The type of checks whose results and errors should be deleted. For example, use *monitoring* to delete only monitoring checks data."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "The full sensor name whose results, checks based on the sensor, statistics and errors generated by the sensor sound be deleted. Uses a full sensor name, for example: *table/volume/row_count*."
            },
            "dataGroupTag" : {
              "type" : "string",
              "description" : "The names of data groups in any of the *grouping_level_1*...*grouping_level_9* columns in the Parquet tables. Enables deleting data tagged for one data source or a subset of results when the group level is captured from a column in a monitored table."
            },
            "qualityDimension" : {
              "type" : "string",
              "description" : "The data quality dimension name, for example *Timeliness* or *Completeness*."
            },
            "timeGradient" : {
              "type" : "string",
              "description" : "The time gradient (time scale) of the sensor and check results that are captured."
            },
            "collectorCategory" : {
              "type" : "string",
              "description" : "The statistics collector category when statistics should be deleted. A statistics category is a group of statistics, for example *sampling* for the column value samples."
            },
            "collectorName" : {
              "type" : "string",
              "description" : "The statistics collector name when only statistics are deleted for a selected collector, for example *sample_values*."
            },
            "collectorTarget" : {
              "type" : "string",
              "description" : "The type of the target object for which the basic statistics are deleted. Supported values are *table* and *column*."
            }
          }
        }
      },
      "DeleteStoredDataQueueJobResult" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "result" : {
            "$ref" : "#/components/schemas/DeleteStoredDataResult",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          }
        },
        "description" : "Object returned from the operation that queues a \"delete stored data\" job. The result contains the job id that was started and optionally can also contain a dictionary of partitions that were cleared or deleted if the operation was started with wait=true parameter to wait for the \"delete stored data\" job to finish.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "description" : "Job id that identifies a job that was started on the DQOps job queue.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "result" : {
              "description" : "Optional result object that is returned only when the wait parameter was true and the \"delete stored data\" job has finished. Contains a list of partitions that were deleted or updated.",
              "$ref" : "#/components/schemas/DeleteStoredDataResult",
              "originalRef" : "#/components/schemas/DeleteStoredDataResult"
            },
            "status" : {
              "type" : "string",
              "description" : "Job status",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            }
          },
          "description" : "Object returned from the operation that queues a \"delete stored data\" job. The result contains the job id that was started and optionally can also contain a dictionary of partitions that were cleared or deleted if the operation was started with wait=true parameter to wait for the \"delete stored data\" job to finish."
        }
      },
      "DeleteStoredDataResult" : {
        "type" : "object",
        "properties" : {
          "partitionResults" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DataDeleteResultPartition",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of partitions that where deleted or updated when the rows were deleted.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of partitions that where deleted or updated when the rows were deleted."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "partitionResults" : {
              "type" : "object",
              "description" : "Dictionary of partitions that where deleted or updated when the rows were deleted.",
              "additionalProperties" : {
                "$ref" : "#/definitions/DataDeleteResultPartition",
                "originalRef" : "#/definitions/DataDeleteResultPartition"
              }
            }
          }
        }
      },
      "DqoCloudUserModel" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "User's email that identifies the user.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "accountRole" : {
            "$ref" : "#/components/schemas/DqoUserRole",
            "exampleSetFlag" : false
          }
        },
        "description" : "DQOps Cloud user model - identifies a user in a multi-user DQOps deployment.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "email" : {
              "type" : "string",
              "description" : "User's email that identifies the user."
            },
            "accountRole" : {
              "type" : "string",
              "description" : "Account role.",
              "enum" : [ "admin", "editor", "operator", "viewer", "none" ]
            }
          },
          "description" : "DQOps Cloud user model - identifies a user in a multi-user DQOps deployment."
        }
      },
      "DqoJobChangeModel" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          },
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "changeSequence" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "updatedModel" : {
            "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statusChangedAt" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "status" : {
              "type" : "string",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            },
            "jobId" : {
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "changeSequence" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedModel" : {
              "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
              "originalRef" : "#/components/schemas/DqoJobHistoryEntryModel"
            },
            "statusChangedAt" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "DqoJobEntryParametersModel" : {
        "type" : "object",
        "properties" : {
          "synchronizeRootFolderParameters" : {
            "$ref" : "#/components/schemas/SynchronizeRootFolderDqoQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "synchronizeMultipleFoldersParameters" : {
            "$ref" : "#/components/schemas/SynchronizeMultipleFoldersDqoQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "runScheduledChecksParameters" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "runChecksParameters" : {
            "$ref" : "#/components/schemas/RunChecksParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "runChecksOnTableParameters" : {
            "$ref" : "#/components/schemas/RunChecksOnTableParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collectStatisticsParameters" : {
            "$ref" : "#/components/schemas/CollectStatisticsQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collectStatisticsOnTableParameters" : {
            "$ref" : "#/components/schemas/CollectStatisticsOnTableQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "importSchemaParameters" : {
            "$ref" : "#/components/schemas/ImportSchemaQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "importTableParameters" : {
            "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "deleteStoredDataParameters" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "repairStoredDataParameters" : {
            "$ref" : "#/components/schemas/RepairStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "synchronizeRootFolderParameters" : {
              "$ref" : "#/components/schemas/SynchronizeRootFolderDqoQueueJobParameters",
              "originalRef" : "#/components/schemas/SynchronizeRootFolderDqoQueueJobParameters"
            },
            "synchronizeMultipleFoldersParameters" : {
              "$ref" : "#/components/schemas/SynchronizeMultipleFoldersDqoQueueJobParameters",
              "originalRef" : "#/components/schemas/SynchronizeMultipleFoldersDqoQueueJobParameters"
            },
            "runScheduledChecksParameters" : {
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "runChecksParameters" : {
              "$ref" : "#/components/schemas/RunChecksParameters",
              "originalRef" : "#/components/schemas/RunChecksParameters"
            },
            "runChecksOnTableParameters" : {
              "$ref" : "#/components/schemas/RunChecksOnTableParameters",
              "originalRef" : "#/components/schemas/RunChecksOnTableParameters"
            },
            "collectStatisticsParameters" : {
              "$ref" : "#/components/schemas/CollectStatisticsQueueJobParameters",
              "originalRef" : "#/components/schemas/CollectStatisticsQueueJobParameters"
            },
            "collectStatisticsOnTableParameters" : {
              "$ref" : "#/components/schemas/CollectStatisticsOnTableQueueJobParameters",
              "originalRef" : "#/components/schemas/CollectStatisticsOnTableQueueJobParameters"
            },
            "importSchemaParameters" : {
              "$ref" : "#/components/schemas/ImportSchemaQueueJobParameters",
              "originalRef" : "#/components/schemas/ImportSchemaQueueJobParameters"
            },
            "importTableParameters" : {
              "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
              "originalRef" : "#/components/schemas/ImportTablesQueueJobParameters"
            },
            "deleteStoredDataParameters" : {
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "repairStoredDataParameters" : {
              "$ref" : "#/components/schemas/RepairStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/RepairStoredDataQueueJobParameters"
            }
          }
        }
      },
      "DqoJobHistoryEntryModel" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "jobType" : {
            "$ref" : "#/components/schemas/DqoJobType",
            "exampleSetFlag" : false
          },
          "parameters" : {
            "$ref" : "#/components/schemas/DqoJobEntryParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          },
          "errorMessage" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "statusChangedAt" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "jobType" : {
              "type" : "string",
              "enum" : [ "run_checks", "run_checks_on_table", "collect_statistics", "collect_statistics_on_table", "queue_thread_shutdown", "synchronize_folder", "synchronize_multiple_folders", "run_scheduled_checks_cron", "import_schema", "import_tables", "delete_stored_data", "repair_stored_data" ]
            },
            "parameters" : {
              "$ref" : "#/components/schemas/DqoJobEntryParametersModel",
              "originalRef" : "#/components/schemas/DqoJobEntryParametersModel"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            },
            "errorMessage" : {
              "type" : "string"
            },
            "statusChangedAt" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "DqoJobQueueIncrementalSnapshotModel" : {
        "type" : "object",
        "properties" : {
          "jobChanges" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/DqoJobChangeModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "folderSynchronizationStatus" : {
            "$ref" : "#/components/schemas/CloudSynchronizationFoldersStatusModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "lastSequenceNumber" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobChanges" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DqoJobChangeModel",
                "originalRef" : "#/components/schemas/DqoJobChangeModel"
              }
            },
            "folderSynchronizationStatus" : {
              "$ref" : "#/components/schemas/CloudSynchronizationFoldersStatusModel",
              "originalRef" : "#/components/schemas/CloudSynchronizationFoldersStatusModel"
            },
            "lastSequenceNumber" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "DqoJobQueueInitialSnapshotModel" : {
        "type" : "object",
        "properties" : {
          "jobs" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "folderSynchronizationStatus" : {
            "$ref" : "#/components/schemas/CloudSynchronizationFoldersStatusModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "lastSequenceNumber" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobs" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DqoJobHistoryEntryModel",
                "originalRef" : "#/components/schemas/DqoJobHistoryEntryModel"
              }
            },
            "folderSynchronizationStatus" : {
              "$ref" : "#/components/schemas/CloudSynchronizationFoldersStatusModel",
              "originalRef" : "#/components/schemas/CloudSynchronizationFoldersStatusModel"
            },
            "lastSequenceNumber" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      },
      "DqoQueueJobId" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "type" : "integer",
            "description" : "Job id.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "jobBusinessKey" : {
            "type" : "string",
            "description" : "Optional job business key that was assigned to the job. A business key is an alternative user assigned unique job identifier used to find the status of a job finding it by the business key.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parentJobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "createdAt" : {
            "type" : "integer",
            "description" : "The timestamp when the job was created.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "description" : "Identifies a single job that was pushed to the job queue.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Job id."
            },
            "jobBusinessKey" : {
              "type" : "string",
              "description" : "Optional job business key that was assigned to the job. A business key is an alternative user assigned unique job identifier used to find the status of a job finding it by the business key."
            },
            "parentJobId" : {
              "description" : "Parent job id. Filled only for nested jobs, for example a sub-job that runs data quality checks on a single table.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "createdAt" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The timestamp when the job was created."
            }
          },
          "description" : "Identifies a single job that was pushed to the job queue."
        }
      },
      "DqoSettingsModel" : {
        "type" : "object",
        "properties" : {
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { },
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "object" ],
              "jsonSchema" : {
                "type" : "object",
                "properties" : { }
              }
            },
            "description" : "Dictionary of all effective DQOps system properties, retrieved from the default configuration files, user configuration files, environment variables and 'dqo' command arguments.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of all effective DQOps system properties, retrieved from the default configuration files, user configuration files, environment variables and 'dqo' command arguments."
            }
          }
        },
        "description" : "DQOps system settings",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "properties" : {
              "type" : "object",
              "description" : "Dictionary of all effective DQOps system properties, retrieved from the default configuration files, user configuration files, environment variables and 'dqo' command arguments.",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "description" : "DQOps system settings"
        }
      },
      "DqoUserProfileModel" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "type" : "string",
            "description" : "User email.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tenant" : {
            "type" : "string",
            "description" : "DQOps Cloud tenant.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "license_type" : {
            "type" : "string",
            "description" : "DQOps Cloud license type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "trial_period_expires_at" : {
            "type" : "string",
            "description" : "The date and time when the trial period of a PERSONAL DQOps license expires and the account is downgraded to a FREE license.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "connections_limit" : {
            "type" : "integer",
            "description" : "Limit of the number of connections that could be synchronized to the DQOps Cloud data quality warehouse.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "users_limit" : {
            "type" : "integer",
            "description" : "Limit of the number of users that could be added to a DQOps environment.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "months_limit" : {
            "type" : "integer",
            "description" : "Limit of the number of recent months (excluding the current month) that could be synchronized to the DQOps Cloud data quality warehouse.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "connection_tables_limit" : {
            "type" : "integer",
            "description" : "Limit of the number of tables inside each connection that could be synchronized to the DQOps Cloud data quality warehouse.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "tables_limit" : {
            "type" : "integer",
            "description" : "Limit of the total number of tables that could be synchronized to the DQOps Cloud data quality warehouse.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "jobs_limit" : {
            "type" : "integer",
            "description" : "Limit of the number of supported concurrent jobs that DQOps can run in parallel on this instance.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "account_role" : {
            "$ref" : "#/components/schemas/DqoUserRole",
            "exampleSetFlag" : false
          },
          "can_manage_account" : {
            "type" : "boolean",
            "description" : "User is the administrator of the account and can perform security related actions, such as managing users.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_view_any_object" : {
            "type" : "boolean",
            "description" : "User can view any object and view all results.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_manage_scheduler" : {
            "type" : "boolean",
            "description" : "User can start and stop the job scheduler.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_cancel_jobs" : {
            "type" : "boolean",
            "description" : "User can cancel running jobs.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "User can run data quality checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "User can delete data quality results.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "User can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_manage_data_sources" : {
            "type" : "boolean",
            "description" : "User can manage data sources: create connections, import tables, change the configuration of connections, tables, columns. Change any settings in the Data Sources section.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_synchronize" : {
            "type" : "boolean",
            "description" : "User can trigger the synchronization with DQOps Cloud.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit_comments" : {
            "type" : "boolean",
            "description" : "User can edit comments on connections, tables, columns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit_labels" : {
            "type" : "boolean",
            "description" : "User can edit labels on connections, tables, columns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_manage_definitions" : {
            "type" : "boolean",
            "description" : "User can manage definitions of sensors, rules, checks and the default data quality check configuration that is applied on imported tables.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_compare_tables" : {
            "type" : "boolean",
            "description" : "User can define table comparison configurations and compare tables.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_manage_users" : {
            "type" : "boolean",
            "description" : "User can manage other users, add users to a multi-user account, change access rights, reset passwords.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_manage_and_view_shared_credentials" : {
            "type" : "boolean",
            "description" : "User can manage shared credentials and view (or download) already defined shared credentials.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "The model that describes the current user and his access rights.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "user" : {
              "type" : "string",
              "description" : "User email."
            },
            "tenant" : {
              "type" : "string",
              "description" : "DQOps Cloud tenant."
            },
            "license_type" : {
              "type" : "string",
              "description" : "DQOps Cloud license type."
            },
            "trial_period_expires_at" : {
              "type" : "string",
              "description" : "The date and time when the trial period of a PERSONAL DQOps license expires and the account is downgraded to a FREE license."
            },
            "connections_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the number of connections that could be synchronized to the DQOps Cloud data quality warehouse."
            },
            "users_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the number of users that could be added to a DQOps environment."
            },
            "months_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the number of recent months (excluding the current month) that could be synchronized to the DQOps Cloud data quality warehouse."
            },
            "connection_tables_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the number of tables inside each connection that could be synchronized to the DQOps Cloud data quality warehouse."
            },
            "tables_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the total number of tables that could be synchronized to the DQOps Cloud data quality warehouse."
            },
            "jobs_limit" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Limit of the number of supported concurrent jobs that DQOps can run in parallel on this instance."
            },
            "account_role" : {
              "type" : "string",
              "description" : "User role that limits possible operations that the current user can perform.",
              "enum" : [ "admin", "editor", "operator", "viewer", "none" ]
            },
            "can_manage_account" : {
              "type" : "boolean",
              "description" : "User is the administrator of the account and can perform security related actions, such as managing users."
            },
            "can_view_any_object" : {
              "type" : "boolean",
              "description" : "User can view any object and view all results."
            },
            "can_manage_scheduler" : {
              "type" : "boolean",
              "description" : "User can start and stop the job scheduler."
            },
            "can_cancel_jobs" : {
              "type" : "boolean",
              "description" : "User can cancel running jobs."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "User can run data quality checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "User can delete data quality results."
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "User can collect statistics."
            },
            "can_manage_data_sources" : {
              "type" : "boolean",
              "description" : "User can manage data sources: create connections, import tables, change the configuration of connections, tables, columns. Change any settings in the Data Sources section."
            },
            "can_synchronize" : {
              "type" : "boolean",
              "description" : "User can trigger the synchronization with DQOps Cloud."
            },
            "can_edit_comments" : {
              "type" : "boolean",
              "description" : "User can edit comments on connections, tables, columns."
            },
            "can_edit_labels" : {
              "type" : "boolean",
              "description" : "User can edit labels on connections, tables, columns."
            },
            "can_manage_definitions" : {
              "type" : "boolean",
              "description" : "User can manage definitions of sensors, rules, checks and the default data quality check configuration that is applied on imported tables."
            },
            "can_compare_tables" : {
              "type" : "boolean",
              "description" : "User can define table comparison configurations and compare tables."
            },
            "can_manage_users" : {
              "type" : "boolean",
              "description" : "User can manage other users, add users to a multi-user account, change access rights, reset passwords."
            },
            "can_manage_and_view_shared_credentials" : {
              "type" : "boolean",
              "description" : "User can manage shared credentials and view (or download) already defined shared credentials."
            }
          },
          "description" : "The model that describes the current user and his access rights."
        }
      },
      "Duration" : {
        "type" : "object",
        "properties" : {
          "seconds" : {
            "type" : "integer",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "nano" : {
            "type" : "integer",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "negative" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "zero" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "units" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/TemporalUnit",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "seconds" : {
              "type" : "integer",
              "format" : "int64"
            },
            "nano" : {
              "type" : "integer",
              "format" : "int32"
            },
            "negative" : {
              "type" : "boolean"
            },
            "zero" : {
              "type" : "boolean"
            },
            "units" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TemporalUnit",
                "originalRef" : "#/components/schemas/TemporalUnit"
              }
            }
          }
        }
      },
      "EffectiveScheduleModel" : {
        "type" : "object",
        "properties" : {
          "schedule_group" : {
            "$ref" : "#/components/schemas/CheckRunScheduleGroup",
            "exampleSetFlag" : false
          },
          "schedule_level" : {
            "$ref" : "#/components/schemas/EffectiveScheduleLevelModel",
            "exampleSetFlag" : false
          },
          "cron_expression" : {
            "type" : "string",
            "description" : "Field value for a CRON expression defining the scheduling.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "time_of_execution" : {
            "type" : "string",
            "description" : "Field value for the time at which the scheduled checks will be executed.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "time_until_execution" : {
            "$ref" : "#/components/schemas/Duration",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Field value stating if the schedule has been explicitly disabled.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model of a configured schedule (enabled on connection or table) or schedule override (on check). Describes the CRON expression and the time of the upcoming execution, as well as the duration until this time.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_group" : {
              "type" : "string",
              "description" : "Field value for a schedule group to which this schedule belongs.",
              "enum" : [ "profiling", "monitoring_daily", "monitoring_monthly", "partitioned_daily", "partitioned_monthly" ]
            },
            "schedule_level" : {
              "type" : "string",
              "description" : "Field value for the level at which the schedule has been configured.",
              "enum" : [ "connection", "table_override", "check_override" ]
            },
            "cron_expression" : {
              "type" : "string",
              "description" : "Field value for a CRON expression defining the scheduling."
            },
            "time_of_execution" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Field value for the time at which the scheduled checks will be executed."
            },
            "time_until_execution" : {
              "description" : "Field value for the time left until the execution of scheduled checks.",
              "$ref" : "#/components/schemas/Duration",
              "originalRef" : "#/components/schemas/Duration"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Field value stating if the schedule has been explicitly disabled."
            }
          },
          "description" : "Model of a configured schedule (enabled on connection or table) or schedule override (on check). Describes the CRON expression and the time of the upcoming execution, as well as the duration until this time."
        }
      },
      "EqualsInteger1RuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "expected_value" : {
            "type" : "integer",
            "description" : "Expected value for the actual_value returned by the sensor. It must be an integer value.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "expected_value" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Expected value for the actual_value returned by the sensor. It must be an integer value."
            }
          }
        }
      },
      "EqualsIntegerRuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "expected_value" : {
            "type" : "integer",
            "description" : "Expected value for the actual_value returned by the sensor. It must be an integer value.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "expected_value" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Expected value for the actual_value returned by the sensor. It must be an integer value."
            }
          }
        }
      },
      "ErrorEntryModel" : {
        "type" : "object",
        "properties" : {
          "actualValue" : {
            "type" : "number",
            "description" : "Actual value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "expectedValue" : {
            "type" : "number",
            "description" : "Expected value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "columnName" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "durationMs" : {
            "type" : "integer",
            "description" : "Duration (ms).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "executedAt" : {
            "type" : "integer",
            "description" : "Executed at.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "timeGradient" : {
            "type" : "string",
            "description" : "Time gradient.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timePeriod" : {
            "type" : "string",
            "description" : "Time period.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "provider" : {
            "type" : "string",
            "description" : "Provider.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "qualityDimension" : {
            "type" : "string",
            "description" : "Quality dimension.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "Sensor name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "readoutId" : {
            "type" : "string",
            "description" : "Sensor readout id.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Error message.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "errorSource" : {
            "type" : "string",
            "description" : "Error source.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "errorTimestamp" : {
            "type" : "string",
            "description" : "Error timestamp.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableComparison" : {
            "type" : "string",
            "description" : "Table comparison name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "actualValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Actual value."
            },
            "expectedValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Expected value."
            },
            "columnName" : {
              "type" : "string",
              "description" : "Column name."
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Data group."
            },
            "durationMs" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration (ms)."
            },
            "executedAt" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Executed at."
            },
            "timeGradient" : {
              "type" : "string",
              "description" : "Time gradient."
            },
            "timePeriod" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Time period."
            },
            "provider" : {
              "type" : "string",
              "description" : "Provider."
            },
            "qualityDimension" : {
              "type" : "string",
              "description" : "Quality dimension."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "Sensor name."
            },
            "readoutId" : {
              "type" : "string",
              "description" : "Sensor readout id."
            },
            "errorMessage" : {
              "type" : "string",
              "description" : "Error message."
            },
            "errorSource" : {
              "type" : "string",
              "description" : "Error source."
            },
            "errorTimestamp" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Error timestamp."
            },
            "tableComparison" : {
              "type" : "string",
              "description" : "Table comparison name"
            }
          }
        }
      },
      "ErrorsListModel" : {
        "type" : "object",
        "properties" : {
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkDisplayName" : {
            "type" : "string",
            "description" : "Check display name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "Check type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkHash" : {
            "type" : "integer",
            "description" : "Check hash.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "Check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroupsNames" : {
            "type" : "array",
            "description" : "Data groups list.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Selected data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "errorEntries" : {
            "type" : "array",
            "description" : "Error entries",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ErrorEntryModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "checkDisplayName" : {
              "type" : "string",
              "description" : "Check display name."
            },
            "checkType" : {
              "type" : "string",
              "description" : "Check type."
            },
            "checkHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Check hash."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "Check category name."
            },
            "dataGroupsNames" : {
              "type" : "array",
              "description" : "Data groups list.",
              "items" : {
                "type" : "string"
              }
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Selected data group."
            },
            "errorEntries" : {
              "type" : "array",
              "description" : "Error entries",
              "items" : {
                "$ref" : "#/components/schemas/ErrorEntryModel",
                "originalRef" : "#/components/schemas/ErrorEntryModel"
              }
            }
          }
        }
      },
      "ExternalLogEntry" : {
        "type" : "object",
        "properties" : {
          "window_location" : {
            "type" : "string",
            "description" : "window.location value at the time when the log entry was reported.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Log message that should be logged.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "External log entry",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "window_location" : {
              "type" : "string",
              "description" : "window.location value at the time when the log entry was reported."
            },
            "message" : {
              "type" : "string",
              "description" : "Log message that should be logged."
            }
          },
          "description" : "External log entry"
        }
      },
      "FieldModel" : {
        "type" : "object",
        "properties" : {
          "definition" : {
            "$ref" : "#/components/schemas/ParameterDefinitionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "optional" : {
            "type" : "boolean",
            "description" : "Field value is optional and may be null, when false - the field is required and must be filled.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "string_value" : {
            "type" : "string",
            "description" : "Field value for a string field.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "boolean_value" : {
            "type" : "boolean",
            "description" : "Field value for a boolean field.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "integer_value" : {
            "type" : "integer",
            "description" : "Field value for an integer (32-bit) field.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "long_value" : {
            "type" : "integer",
            "description" : "Field value for a long (64-bit) field.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "double_value" : {
            "type" : "number",
            "description" : "Field value for a double field.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "datetime_value" : {
            "type" : "string",
            "description" : "Field value for a date time field.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_name_value" : {
            "type" : "string",
            "description" : "Field value for a column name field.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "enum_value" : {
            "type" : "string",
            "description" : "Field value for an enum (choice) field.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "string_list_value" : {
            "type" : "array",
            "description" : "Field value for an array (list) of strings.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "integer_list_value" : {
            "type" : "array",
            "description" : "Field value for an array (list) of integers, using 64 bit integers.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "types" : [ "array" ]
          },
          "date_value" : {
            "type" : "string",
            "description" : "Field value for an date.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Model of a single field that is used to edit a parameter value for a sensor or a rule. Describes the type of the field and the current value.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "definition" : {
              "description" : "Field name that matches the field name (snake_case) used in the YAML specification.",
              "$ref" : "#/components/schemas/ParameterDefinitionSpec",
              "originalRef" : "#/components/schemas/ParameterDefinitionSpec"
            },
            "optional" : {
              "type" : "boolean",
              "description" : "Field value is optional and may be null, when false - the field is required and must be filled."
            },
            "string_value" : {
              "type" : "string",
              "description" : "Field value for a string field."
            },
            "boolean_value" : {
              "type" : "boolean",
              "description" : "Field value for a boolean field."
            },
            "integer_value" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Field value for an integer (32-bit) field."
            },
            "long_value" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Field value for a long (64-bit) field."
            },
            "double_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Field value for a double field."
            },
            "datetime_value" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Field value for a date time field."
            },
            "column_name_value" : {
              "type" : "string",
              "description" : "Field value for a column name field."
            },
            "enum_value" : {
              "type" : "string",
              "description" : "Field value for an enum (choice) field."
            },
            "string_list_value" : {
              "type" : "array",
              "description" : "Field value for an array (list) of strings.",
              "items" : {
                "type" : "string"
              }
            },
            "integer_list_value" : {
              "type" : "array",
              "description" : "Field value for an array (list) of integers, using 64 bit integers.",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            },
            "date_value" : {
              "type" : "string",
              "format" : "date",
              "description" : "Field value for an date."
            }
          },
          "description" : "Model of a single field that is used to edit a parameter value for a sensor or a rule. Describes the type of the field and the current value."
        }
      },
      "HierarchyIdModel" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "object",
              "properties" : { },
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "object" ],
              "jsonSchema" : {
                "type" : "object",
                "properties" : { }
              }
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : { }
              }
            }
          }
        }
      },
      "ImportSchemaQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "connectionName" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schemaName" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableNamePattern" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionName" : {
              "type" : "string"
            },
            "schemaName" : {
              "type" : "string"
            },
            "tableNamePattern" : {
              "type" : "string"
            }
          }
        }
      },
      "ImportTablesQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "connectionName" : {
            "type" : "string",
            "description" : "Connection name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schemaName" : {
            "type" : "string",
            "description" : "Schema name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableNames" : {
            "type" : "array",
            "description" : "Optional list of table names inside the schema. When the list of tables is empty, all tables are imported.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionName" : {
              "type" : "string",
              "description" : "Connection name"
            },
            "schemaName" : {
              "type" : "string",
              "description" : "Schema name"
            },
            "tableNames" : {
              "type" : "array",
              "description" : "Optional list of table names inside the schema. When the list of tables is empty, all tables are imported.",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ImportTablesQueueJobResult" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "result" : {
            "$ref" : "#/components/schemas/ImportTablesResult",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          }
        },
        "description" : "Object returned from the operation that queues a \"import tables\" job. The result contains the job id that was started and optionally can also contain the result of importing the tables if the operation was started with wait=true parameter to wait for the \"import tables\" job to finish.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "description" : "Job id that identifies a job that was started on the DQOps job queue.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "result" : {
              "description" : "Optional result object that is returned only when the wait parameter was true and the \"import tables\" job has finished. Contains the summary result of importing tables, including table and column schemas of imported tables. ",
              "$ref" : "#/components/schemas/ImportTablesResult",
              "originalRef" : "#/components/schemas/ImportTablesResult"
            },
            "status" : {
              "type" : "string",
              "description" : "Job status",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            }
          },
          "description" : "Object returned from the operation that queues a \"import tables\" job. The result contains the job id that was started and optionally can also contain the result of importing the tables if the operation was started with wait=true parameter to wait for the \"import tables\" job to finish."
        }
      },
      "ImportTablesResult" : {
        "type" : "object",
        "properties" : {
          "source_table_specs" : {
            "type" : "array",
            "description" : "Table schemas (including column schemas) of imported tables.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/TableSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Result object returned from the \"import tables\" job. Contains the original table schemas and column schemas of imported tables.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "source_table_specs" : {
              "type" : "array",
              "description" : "Table schemas (including column schemas) of imported tables.",
              "items" : {
                "$ref" : "#/components/schemas/TableSpec",
                "originalRef" : "#/components/schemas/TableSpec"
              }
            }
          },
          "description" : "Result object returned from the \"import tables\" job. Contains the original table schemas and column schemas of imported tables."
        }
      },
      "IncidentDailyIssuesCount" : {
        "type" : "object",
        "properties" : {
          "warnings" : {
            "type" : "integer",
            "description" : "The number of failed data quality checks that generated a warning severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "errors" : {
            "type" : "integer",
            "description" : "The number of failed data quality checks that generated an error severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "fatals" : {
            "type" : "integer",
            "description" : "The number of failed data quality checks that generated a fatal severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "The total count of failed data quality checks on this day.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "warnings" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of failed data quality checks that generated a warning severity data quality issue."
            },
            "errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of failed data quality checks that generated an error severity data quality issue."
            },
            "fatals" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of failed data quality checks that generated a fatal severity data quality issue."
            },
            "totalCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of failed data quality checks on this day."
            }
          }
        }
      },
      "IncidentIssueHistogramModel" : {
        "type" : "object",
        "properties" : {
          "hasProfilingIssues" : {
            "type" : "boolean",
            "description" : "True when this data quality incident is based on data quality issues from profiling checks within the filters applied to search for linked data quality issues.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "hasMonitoringIssues" : {
            "type" : "boolean",
            "description" : "True when this data quality incident is based on data quality issues from monitoring checks within the filters applied to search for linked data quality issues.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "hasPartitionedIssues" : {
            "type" : "boolean",
            "description" : "True when this data quality incident is based on data quality issues from partitioned checks within the filters applied to search for linked data quality issues.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "days" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/IncidentDailyIssuesCount",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "A map of the numbers of data quality issues per day, the day uses the DQOps server timezone.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A map of the numbers of data quality issues per day, the day uses the DQOps server timezone."
            }
          },
          "columns" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "description" : "A map of column names with the most data quality issues related to the incident. The map returns the count of issues as the value.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A map of column names with the most data quality issues related to the incident. The map returns the count of issues as the value."
            }
          },
          "checks" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "integer" ]
            },
            "description" : "A map of data quality check names with the most data quality issues related to the incident. The map returns the count of issues as the value.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A map of data quality check names with the most data quality issues related to the incident. The map returns the count of issues as the value."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "hasProfilingIssues" : {
              "type" : "boolean",
              "description" : "True when this data quality incident is based on data quality issues from profiling checks within the filters applied to search for linked data quality issues."
            },
            "hasMonitoringIssues" : {
              "type" : "boolean",
              "description" : "True when this data quality incident is based on data quality issues from monitoring checks within the filters applied to search for linked data quality issues."
            },
            "hasPartitionedIssues" : {
              "type" : "boolean",
              "description" : "True when this data quality incident is based on data quality issues from partitioned checks within the filters applied to search for linked data quality issues."
            },
            "days" : {
              "type" : "object",
              "description" : "A map of the numbers of data quality issues per day, the day uses the DQOps server timezone.",
              "additionalProperties" : {
                "$ref" : "#/definitions/IncidentDailyIssuesCount",
                "originalRef" : "#/definitions/IncidentDailyIssuesCount"
              }
            },
            "columns" : {
              "type" : "object",
              "description" : "A map of column names with the most data quality issues related to the incident. The map returns the count of issues as the value.",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "checks" : {
              "type" : "object",
              "description" : "A map of data quality check names with the most data quality issues related to the incident. The map returns the count of issues as the value.",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          }
        }
      },
      "IncidentModel" : {
        "type" : "object",
        "properties" : {
          "incidentId" : {
            "type" : "string",
            "description" : "Incident ID - the primary key that identifies each data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "connection" : {
            "type" : "string",
            "description" : "Connection name affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "year" : {
            "type" : "integer",
            "description" : "The year when the incident was first seen. This value is required to load an incident's monthly partition.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "month" : {
            "type" : "integer",
            "description" : "The month when the incident was first seen. This value is required to load an incident's monthly partition.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "schema" : {
            "type" : "string",
            "description" : "Schema name affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "type" : "string",
            "description" : "Table name affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tablePriority" : {
            "type" : "integer",
            "description" : "Table priority of the table that was affected by a data quality incident.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "incidentHash" : {
            "type" : "integer",
            "description" : "Data quality incident hash that identifies similar incidents on the same incident grouping level.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "firstSeen" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the data quality incident was first seen.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "lastSeen" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the data quality incident was last seen.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "incidentUntil" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the data quality incident is valid until. All new failed data quality check results until that date will be included in this incident, unless the incident status is changed to resolved, so a new incident must be created.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "The data group that was affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "qualityDimension" : {
            "type" : "string",
            "description" : "The data quality dimension that was affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "The data quality check category that was affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "The data quality check type that was affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "The data quality check name that was affected by a data quality incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "highestSeverity" : {
            "type" : "integer",
            "description" : "The highest failed check severity that was detected as part of this data quality incident. Possible values are: 1 - warning, 2 - error, 3 - fatal.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "minimumSeverity" : {
            "type" : "integer",
            "description" : "The minimum severity of the data quality incident, copied from the incident configuration at a connection or table at the time when the incident was first seen. Possible values are: 1 - warning, 2 - error, 3 - fatal.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "failedChecksCount" : {
            "type" : "integer",
            "description" : "The total number of failed data quality checks that were seen when the incident was raised for the first time.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "issueUrl" : {
            "type" : "string",
            "description" : "The link (url) to a ticket in an external system that is tracking this incident.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "status" : {
            "$ref" : "#/components/schemas/IncidentStatus",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "incidentId" : {
              "type" : "string",
              "description" : "Incident ID - the primary key that identifies each data quality incident."
            },
            "connection" : {
              "type" : "string",
              "description" : "Connection name affected by a data quality incident."
            },
            "year" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The year when the incident was first seen. This value is required to load an incident's monthly partition."
            },
            "month" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The month when the incident was first seen. This value is required to load an incident's monthly partition."
            },
            "schema" : {
              "type" : "string",
              "description" : "Schema name affected by a data quality incident."
            },
            "table" : {
              "type" : "string",
              "description" : "Table name affected by a data quality incident."
            },
            "tablePriority" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Table priority of the table that was affected by a data quality incident."
            },
            "incidentHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Data quality incident hash that identifies similar incidents on the same incident grouping level."
            },
            "firstSeen" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the data quality incident was first seen."
            },
            "lastSeen" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the data quality incident was last seen."
            },
            "incidentUntil" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the data quality incident is valid until. All new failed data quality check results until that date will be included in this incident, unless the incident status is changed to resolved, so a new incident must be created."
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "The data group that was affected by a data quality incident."
            },
            "qualityDimension" : {
              "type" : "string",
              "description" : "The data quality dimension that was affected by a data quality incident."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "The data quality check category that was affected by a data quality incident."
            },
            "checkType" : {
              "type" : "string",
              "description" : "The data quality check type that was affected by a data quality incident."
            },
            "checkName" : {
              "type" : "string",
              "description" : "The data quality check name that was affected by a data quality incident."
            },
            "highestSeverity" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The highest failed check severity that was detected as part of this data quality incident. Possible values are: 1 - warning, 2 - error, 3 - fatal."
            },
            "minimumSeverity" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The minimum severity of the data quality incident, copied from the incident configuration at a connection or table at the time when the incident was first seen. Possible values are: 1 - warning, 2 - error, 3 - fatal."
            },
            "failedChecksCount" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of failed data quality checks that were seen when the incident was raised for the first time."
            },
            "issueUrl" : {
              "type" : "string",
              "description" : "The link (url) to a ticket in an external system that is tracking this incident."
            },
            "status" : {
              "type" : "string",
              "description" : "Incident status.",
              "enum" : [ "open", "acknowledged", "resolved", "muted" ]
            }
          }
        }
      },
      "IncidentWebhookNotificationsSpec" : {
        "type" : "object",
        "properties" : {
          "incident_opened_webhook_url" : {
            "type" : "string",
            "description" : "Webhook URL where the notification messages describing new incidents are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "incident_acknowledged_webhook_url" : {
            "type" : "string",
            "description" : "Webhook URL where the notification messages describing acknowledged messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "incident_resolved_webhook_url" : {
            "type" : "string",
            "description" : "Webhook URL where the notification messages describing resolved messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "incident_muted_webhook_url" : {
            "type" : "string",
            "description" : "Webhook URL where the notification messages describing muted messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "incident_opened_webhook_url" : {
              "type" : "string",
              "description" : "Webhook URL where the notification messages describing new incidents are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object."
            },
            "incident_acknowledged_webhook_url" : {
              "type" : "string",
              "description" : "Webhook URL where the notification messages describing acknowledged messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object."
            },
            "incident_resolved_webhook_url" : {
              "type" : "string",
              "description" : "Webhook URL where the notification messages describing resolved messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object."
            },
            "incident_muted_webhook_url" : {
              "type" : "string",
              "description" : "Webhook URL where the notification messages describing muted messages are pushed using a HTTP POST request. The format of the JSON message is documented in the IncidentNotificationMessage object."
            }
          }
        }
      },
      "IncidentsPerConnectionModel" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "Connection (data source) name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "openIncidents" : {
            "type" : "integer",
            "description" : "Count of open (new) data quality incidents.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "Connection (data source) name."
            },
            "openIncidents" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Count of open (new) data quality incidents."
            }
          }
        }
      },
      "MaxCountRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_count" : {
            "type" : "integer",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxCountRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_count" : {
            "type" : "integer",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxCountRule15ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_count" : {
            "type" : "integer",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDaysRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_days" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_days" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDaysRule2ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_days" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_days" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDaysRule7ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_days" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_days" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDiffPercentRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_diff_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_diff_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDiffPercentRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_diff_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_diff_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxDiffPercentRule5ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_diff_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_diff_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the percentage of difference between expected_value and actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxFailuresRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_failures" : {
            "type" : "integer",
            "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_failures" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table."
            }
          }
        }
      },
      "MaxFailuresRule10ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_failures" : {
            "type" : "integer",
            "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_failures" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table."
            }
          }
        }
      },
      "MaxFailuresRule5ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_failures" : {
            "type" : "integer",
            "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_failures" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Maximum number of consecutive days with check failures. A check is failed when a sensor query fails due to a connection error, missing or corrupted table."
            }
          }
        }
      },
      "MaxMissingRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_missing" : {
            "type" : "integer",
            "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_missing" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive)."
            }
          }
        }
      },
      "MaxMissingRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_missing" : {
            "type" : "integer",
            "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_missing" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive)."
            }
          }
        }
      },
      "MaxMissingRule2ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_missing" : {
            "type" : "integer",
            "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_missing" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The maximum number of values from the expected_values list that were not found in the column (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule100ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule2ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule5ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule95ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxPercentRule99ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_percent" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MaxValueRuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "max_value" : {
            "type" : "number",
            "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "max_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Maximum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinCountRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_count" : {
            "type" : "integer",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinCountRule1ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_count" : {
            "type" : "integer",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinCountRuleFatalParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_count" : {
            "type" : "integer",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinCountRuleWarningParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_count" : {
            "type" : "integer",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_count" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule0ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule100ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule2ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule5ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule95ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinPercentRule99ParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_percent" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_percent" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MinValueRuleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "min_value" : {
            "type" : "number",
            "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive).",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "min_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Minimum accepted value for the actual_value returned by the sensor (inclusive)."
            }
          }
        }
      },
      "MonitoringScheduleSpec" : {
        "type" : "object",
        "properties" : {
          "cron_expression" : {
            "type" : "string",
            "description" : "Unix style cron expression that specifies when to execute scheduled operations like running data quality checks or synchronizing the configuration with the cloud.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the schedule. When the value of this 'disable' field is false, the schedule is stored in the metadata but it is not activated to run data quality checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "cron_expression" : {
              "type" : "string",
              "description" : "Unix style cron expression that specifies when to execute scheduled operations like running data quality checks or synchronizing the configuration with the cloud."
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the schedule. When the value of this 'disable' field is false, the schedule is stored in the metadata but it is not activated to run data quality checks."
            }
          }
        }
      },
      "Mono" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "MonoDqoQueueJobId" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "MonoObject" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "MonoVoid" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "MysqlParametersSpec" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "MySQL host name. Supports also a ${MYSQL_HOST} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "port" : {
            "type" : "string",
            "description" : "MySQL port number. The default port is 3306. Supports also a ${MYSQL_PORT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "MySQL database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "MySQL user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "MySQL database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "options" : {
            "type" : "string",
            "description" : "MySQL connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${MYSQL_OPTIONS} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sslmode" : {
            "$ref" : "#/components/schemas/MySqlSslMode",
            "exampleSetFlag" : false
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "host" : {
              "type" : "string",
              "description" : "MySQL host name. Supports also a ${MYSQL_HOST} configuration with a custom environment variable."
            },
            "port" : {
              "type" : "string",
              "description" : "MySQL port number. The default port is 3306. Supports also a ${MYSQL_PORT} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "MySQL database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "MySQL user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "MySQL database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "options" : {
              "type" : "string",
              "description" : "MySQL connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${MYSQL_OPTIONS} configuration with a custom environment variable."
            },
            "sslmode" : {
              "type" : "string",
              "description" : "SslMode MySQL connection parameter.",
              "enum" : [ "DISABLED", "PREFERRED", "REQUIRED", "VERIFY_CA", "VERIFY_IDENTITY" ]
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "Optional" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "present" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "empty" : {
              "type" : "boolean"
            },
            "present" : {
              "type" : "boolean"
            }
          }
        }
      },
      "OptionalIncidentWebhookNotificationsSpec" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "present" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "empty" : {
              "type" : "boolean"
            },
            "present" : {
              "type" : "boolean"
            }
          }
        }
      },
      "OptionalMonitoringScheduleSpec" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "present" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "empty" : {
              "type" : "boolean"
            },
            "present" : {
              "type" : "boolean"
            }
          }
        }
      },
      "OracleParametersSpec" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "Oracle host name. Supports also a ${ORACLE_HOST} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "port" : {
            "type" : "string",
            "description" : "Oracle port number. The default port is 1521. Supports also a ${ORACLE_PORT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "Oracle database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "Oracle user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "Oracle database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "options" : {
            "type" : "string",
            "description" : "Oracle connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${ORACLE_OPTIONS} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "initialization_sql" : {
            "type" : "string",
            "description" : "Custom SQL that is executed after connecting to Oracle. This SQL script can configure the default language, for example: alter session set NLS_DATE_FORMAT='YYYY-DD-MM HH24:MI:SS'",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "host" : {
              "type" : "string",
              "description" : "Oracle host name. Supports also a ${ORACLE_HOST} configuration with a custom environment variable."
            },
            "port" : {
              "type" : "string",
              "description" : "Oracle port number. The default port is 1521. Supports also a ${ORACLE_PORT} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "Oracle database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "Oracle user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "Oracle database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "options" : {
              "type" : "string",
              "description" : "Oracle connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${ORACLE_OPTIONS} configuration with a custom environment variable."
            },
            "initialization_sql" : {
              "type" : "string",
              "description" : "Custom SQL that is executed after connecting to Oracle. This SQL script can configure the default language, for example: alter session set NLS_DATE_FORMAT='YYYY-DD-MM HH24:MI:SS'"
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ParameterDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "field_name" : {
            "type" : "string",
            "description" : "Field name that matches the field name (snake_case) used in the YAML specification.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Field display name that should be shown as a label for the control.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text (full description) that will be shown to the user as a hint when the cursor is moved over the control.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_type" : {
            "$ref" : "#/components/schemas/ParameterDataType",
            "exampleSetFlag" : false
          },
          "display_hint" : {
            "$ref" : "#/components/schemas/DisplayHint",
            "exampleSetFlag" : false
          },
          "required" : {
            "type" : "boolean",
            "description" : "True when the value for the parameter must be provided.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "allowed_values" : {
            "type" : "array",
            "description" : "List of allowed values for a field that is of an enum type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "sample_values" : {
            "type" : "array",
            "description" : "List of sample values. The sample values are used in the documentation or help messages.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Defines a single field that is a sensor parameter or a rule parameter.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "field_name" : {
              "type" : "string",
              "description" : "Field name that matches the field name (snake_case) used in the YAML specification."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Field display name that should be shown as a label for the control."
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text (full description) that will be shown to the user as a hint when the cursor is moved over the control."
            },
            "data_type" : {
              "type" : "string",
              "description" : "Parameter data type.",
              "enum" : [ "string", "boolean", "integer", "long", "double", "date", "datetime", "column_name", "enum", "string_list", "integer_list", "object" ]
            },
            "display_hint" : {
              "type" : "string",
              "description" : "UI control display hint.",
              "enum" : [ "textarea" ]
            },
            "required" : {
              "type" : "boolean",
              "description" : "True when the value for the parameter must be provided."
            },
            "allowed_values" : {
              "type" : "array",
              "description" : "List of allowed values for a field that is of an enum type.",
              "items" : {
                "type" : "string"
              }
            },
            "sample_values" : {
              "type" : "array",
              "description" : "List of sample values. The sample values are used in the documentation or help messages.",
              "items" : {
                "type" : "string"
              }
            }
          },
          "description" : "Defines a single field that is a sensor parameter or a rule parameter."
        }
      },
      "PartitionIncrementalTimeWindowSpec" : {
        "type" : "object",
        "properties" : {
          "daily_partitioning_recent_days" : {
            "type" : "integer",
            "description" : "Number of recent days that are analyzed by daily partitioned checks in incremental mode. The default value is 7 days back.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "daily_partitioning_include_today" : {
            "type" : "boolean",
            "description" : "Analyze also today's data by daily partitioned checks in incremental mode. The default value is false, which means that the today's and the future partitions are not analyzed, only yesterday's partition and earlier daily partitions are analyzed because today's data could be still incomplete. Change the value to 'true' if the current day should be also analyzed. The change may require configuring the schedule for daily checks correctly, to run after the data load.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "monthly_partitioning_recent_months" : {
            "type" : "integer",
            "description" : "Number of recent months that are analyzed by monthly partitioned checks in incremental mode. The default value is 1 month back which means the previous calendar month.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "monthly_partitioning_include_current_month" : {
            "type" : "boolean",
            "description" : "Analyze also this month's data by monthly partitioned checks in incremental mode. The default value is false, which means that the current month is not analyzed and future data is also filtered out because the current month could be incomplete. Set the value to 'true' if the current month should be analyzed before the end of the month. The schedule for running monthly checks should be also configured to run more frequently (daily, hourly, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily_partitioning_recent_days" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of recent days that are analyzed by daily partitioned checks in incremental mode. The default value is 7 days back."
            },
            "daily_partitioning_include_today" : {
              "type" : "boolean",
              "description" : "Analyze also today's data by daily partitioned checks in incremental mode. The default value is false, which means that the today's and the future partitions are not analyzed, only yesterday's partition and earlier daily partitions are analyzed because today's data could be still incomplete. Change the value to 'true' if the current day should be also analyzed. The change may require configuring the schedule for daily checks correctly, to run after the data load."
            },
            "monthly_partitioning_recent_months" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of recent months that are analyzed by monthly partitioned checks in incremental mode. The default value is 1 month back which means the previous calendar month."
            },
            "monthly_partitioning_include_current_month" : {
              "type" : "boolean",
              "description" : "Analyze also this month's data by monthly partitioned checks in incremental mode. The default value is false, which means that the current month is not analyzed and future data is also filtered out because the current month could be incomplete. Set the value to 'true' if the current month should be analyzed before the end of the month. The schedule for running monthly checks should be also configured to run more frequently (daily, hourly, etc.)."
            }
          }
        }
      },
      "PhysicalTableName" : {
        "type" : "object",
        "properties" : {
          "schema_name" : {
            "type" : "string",
            "description" : "Schema name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_name" : {
            "type" : "string",
            "description" : "Table name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schema_name" : {
              "type" : "string",
              "description" : "Schema name"
            },
            "table_name" : {
              "type" : "string",
              "description" : "Table name"
            }
          }
        }
      },
      "PostgresqlParametersSpec" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "PostgreSQL host name. Supports also a ${POSTGRESQL_HOST} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "port" : {
            "type" : "string",
            "description" : "PostgreSQL port number. The default port is 5432. Supports also a ${POSTGRESQL_PORT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "PostgreSQL database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "PostgreSQL user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "PostgreSQL database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "options" : {
            "type" : "string",
            "description" : "PostgreSQL connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${POSTGRESQL_OPTIONS} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sslmode" : {
            "$ref" : "#/components/schemas/PostgresqlSslMode",
            "exampleSetFlag" : false
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "host" : {
              "type" : "string",
              "description" : "PostgreSQL host name. Supports also a ${POSTGRESQL_HOST} configuration with a custom environment variable."
            },
            "port" : {
              "type" : "string",
              "description" : "PostgreSQL port number. The default port is 5432. Supports also a ${POSTGRESQL_PORT} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "PostgreSQL database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "PostgreSQL user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "PostgreSQL database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "options" : {
              "type" : "string",
              "description" : "PostgreSQL connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${POSTGRESQL_OPTIONS} configuration with a custom environment variable."
            },
            "sslmode" : {
              "type" : "string",
              "description" : "Sslmode PostgreSQL connection parameter. The default value is disabled.",
              "enum" : [ "disable", "allow", "prefer", "require", "verify-ca", "verify-full" ]
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "ProviderSensorDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/ProviderSensorRunnerType",
            "exampleSetFlag" : false
          },
          "java_class_name" : {
            "type" : "string",
            "description" : "Java class name for a sensor runner that will execute the sensor. The \"type\" must be \"java_class\".",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "supports_grouping" : {
            "type" : "boolean",
            "description" : "The sensor supports grouping, using the GROUP BY clause in SQL. Sensors that support a GROUP BY condition can capture separate data quality scores for each data group. The default value is true, because most of the data quality sensor support grouping.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "supports_partitioned_checks" : {
            "type" : "boolean",
            "description" : "The sensor supports grouping by a partition date, using the GROUP BY clause in SQL. Sensors that support grouping by a partition_by_column could be used for partition checks, calculating separate data quality metrics for each daily/monthly partition. The default value is true, because most of the data quality sensor support partitioned checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "description" : "Additional provider specific sensor parameters",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Additional provider specific sensor parameters"
            }
          },
          "disable_merging_queries" : {
            "type" : "boolean",
            "description" : "Disables merging this sensor's SQL with other sensors. When this parameter is 'true', the sensor's SQL will be executed as an independent query.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "description" : "Sensor implementation type",
              "enum" : [ "sql_template", "java_class" ]
            },
            "java_class_name" : {
              "type" : "string",
              "description" : "Java class name for a sensor runner that will execute the sensor. The \"type\" must be \"java_class\"."
            },
            "supports_grouping" : {
              "type" : "boolean",
              "description" : "The sensor supports grouping, using the GROUP BY clause in SQL. Sensors that support a GROUP BY condition can capture separate data quality scores for each data group. The default value is true, because most of the data quality sensor support grouping."
            },
            "supports_partitioned_checks" : {
              "type" : "boolean",
              "description" : "The sensor supports grouping by a partition date, using the GROUP BY clause in SQL. Sensors that support grouping by a partition_by_column could be used for partition checks, calculating separate data quality metrics for each daily/monthly partition. The default value is true, because most of the data quality sensor support partitioned checks."
            },
            "parameters" : {
              "type" : "object",
              "description" : "Additional provider specific sensor parameters",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "disable_merging_queries" : {
              "type" : "boolean",
              "description" : "Disables merging this sensor's SQL with other sensors. When this parameter is 'true', the sensor's SQL will be executed as an independent query."
            }
          }
        }
      },
      "ProviderSensorListModel" : {
        "type" : "object",
        "properties" : {
          "provider_type" : {
            "$ref" : "#/components/schemas/ProviderType",
            "exampleSetFlag" : false
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This connection specific template is a custom sensor template or was customized by the user.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This connection specific template is provided with DQOps as a built-in sensor.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Provider sensor list model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "provider_type" : {
              "type" : "string",
              "description" : "Provider type.",
              "enum" : [ "bigquery", "snowflake", "postgresql", "redshift", "sqlserver", "mysql", "oracle" ]
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This connection specific template is a custom sensor template or was customized by the user."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This connection specific template is provided with DQOps as a built-in sensor."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            }
          },
          "description" : "Provider sensor list model"
        }
      },
      "ProviderSensorModel" : {
        "type" : "object",
        "properties" : {
          "providerType" : {
            "$ref" : "#/components/schemas/ProviderType",
            "exampleSetFlag" : false
          },
          "providerSensorDefinitionSpec" : {
            "$ref" : "#/components/schemas/ProviderSensorDefinitionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sqlTemplate" : {
            "type" : "string",
            "description" : "Provider specific Jinja2 SQL template",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "Whether the provider sensor is a User Home provider sensor",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "builtIn" : {
            "type" : "boolean",
            "description" : "This is a DQOps built-in provider sensor, whose parameters cannot be changed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "canEdit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yamlParsingError" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Provider sensor model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "providerType" : {
              "type" : "string",
              "description" : "Provider type.",
              "enum" : [ "bigquery", "snowflake", "postgresql", "redshift", "sqlserver", "mysql", "oracle" ]
            },
            "providerSensorDefinitionSpec" : {
              "description" : "Provider specific sensor definition specification",
              "$ref" : "#/components/schemas/ProviderSensorDefinitionSpec",
              "originalRef" : "#/components/schemas/ProviderSensorDefinitionSpec"
            },
            "sqlTemplate" : {
              "type" : "string",
              "description" : "Provider specific Jinja2 SQL template"
            },
            "custom" : {
              "type" : "boolean",
              "description" : "Whether the provider sensor is a User Home provider sensor"
            },
            "builtIn" : {
              "type" : "boolean",
              "description" : "This is a DQOps built-in provider sensor, whose parameters cannot be changed."
            },
            "canEdit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yamlParsingError" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Provider sensor model"
        }
      },
      "QualityCategoryModel" : {
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "Data quality check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "comparison_name" : {
            "type" : "string",
            "description" : "The name of the reference table configuration used for a cross table data comparison (when the category is 'comparisons').",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compare_to_column" : {
            "type" : "string",
            "description" : "The name of the column in the reference table that is compared.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "help_text" : {
            "type" : "string",
            "description" : "Help text that describes the category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checks" : {
            "type" : "array",
            "description" : "List of data quality checks within the category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CheckModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "Model that returns the form definition and the form data to edit all checks within a single category.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "category" : {
              "type" : "string",
              "description" : "Data quality check category name."
            },
            "comparison_name" : {
              "type" : "string",
              "description" : "The name of the reference table configuration used for a cross table data comparison (when the category is 'comparisons')."
            },
            "compare_to_column" : {
              "type" : "string",
              "description" : "The name of the column in the reference table that is compared."
            },
            "help_text" : {
              "type" : "string",
              "description" : "Help text that describes the category."
            },
            "checks" : {
              "type" : "array",
              "description" : "List of data quality checks within the category.",
              "items" : {
                "$ref" : "#/components/schemas/CheckModel",
                "originalRef" : "#/components/schemas/CheckModel"
              }
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to start the job.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this quality category.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            }
          },
          "description" : "Model that returns the form definition and the form data to edit all checks within a single category."
        }
      },
      "RedshiftParametersSpec" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "Redshift host name. Supports also a ${REDSHIFT_HOST} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "port" : {
            "type" : "string",
            "description" : "Redshift port number. The default port is 5432. Supports also a ${REDSHIFT_PORT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "Redshift database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "Redshift user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "Redshift database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "options" : {
            "type" : "string",
            "description" : "Redshift connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${REDSHIFT_OPTIONS} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "host" : {
              "type" : "string",
              "description" : "Redshift host name. Supports also a ${REDSHIFT_HOST} configuration with a custom environment variable."
            },
            "port" : {
              "type" : "string",
              "description" : "Redshift port number. The default port is 5432. Supports also a ${REDSHIFT_PORT} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "Redshift database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "Redshift user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "Redshift database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "options" : {
              "type" : "string",
              "description" : "Redshift connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${REDSHIFT_OPTIONS} configuration with a custom environment variable."
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "RemoteTableListModel" : {
        "type" : "object",
        "properties" : {
          "connectionName" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schemaName" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableName" : {
            "type" : "string",
            "description" : "Table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "alreadyImported" : {
            "type" : "boolean",
            "description" : "A flag that tells if the table been already imported.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Table remote list model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionName" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schemaName" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "tableName" : {
              "type" : "string",
              "description" : "Table name."
            },
            "alreadyImported" : {
              "type" : "boolean",
              "description" : "A flag that tells if the table been already imported."
            }
          },
          "description" : "Table remote list model"
        }
      },
      "RepairStoredDataQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "connectionName" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schemaTableName" : {
            "type" : "string",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "repairErrors" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "repairStatistics" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "repairCheckResults" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "repairSensorReadouts" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionName" : {
              "type" : "string"
            },
            "schemaTableName" : {
              "type" : "string"
            },
            "repairErrors" : {
              "type" : "boolean"
            },
            "repairStatistics" : {
              "type" : "boolean"
            },
            "repairCheckResults" : {
              "type" : "boolean"
            },
            "repairSensorReadouts" : {
              "type" : "boolean"
            }
          }
        }
      },
      "RuleFolderModel" : {
        "type" : "object",
        "properties" : {
          "folders" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/RuleFolderModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "A dictionary of nested folders with rules, the keys are the folder names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with rules, the keys are the folder names."
            }
          },
          "rules" : {
            "type" : "array",
            "description" : "List of rules defined in this folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/RuleListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "all_rules" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/RuleListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Rule folder model with a list of rules defined in this folder and nested folders that contain additional rules.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folders" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with rules, the keys are the folder names.",
              "additionalProperties" : {
                "$ref" : "#/definitions/RuleFolderModel",
                "originalRef" : "#/definitions/RuleFolderModel"
              }
            },
            "rules" : {
              "type" : "array",
              "description" : "List of rules defined in this folder.",
              "items" : {
                "$ref" : "#/components/schemas/RuleListModel",
                "originalRef" : "#/components/schemas/RuleListModel"
              }
            },
            "all_rules" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RuleListModel",
                "originalRef" : "#/components/schemas/RuleListModel"
              }
            }
          },
          "description" : "Rule folder model with a list of rules defined in this folder and nested folders that contain additional rules."
        }
      },
      "RuleListModel" : {
        "type" : "object",
        "properties" : {
          "rule_name" : {
            "type" : "string",
            "description" : "Rule name without the folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "full_rule_name" : {
            "type" : "string",
            "description" : "Full rule name, including the folder within the \"rules\" rule folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This rule has is a custom rule or was customized by the user. This is a read-only value.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This rule is provided with DQOps as a built-in rule. This is a read-only value.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Rule list model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "rule_name" : {
              "type" : "string",
              "description" : "Rule name without the folder."
            },
            "full_rule_name" : {
              "type" : "string",
              "description" : "Full rule name, including the folder within the \"rules\" rule folder."
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This rule has is a custom rule or was customized by the user. This is a read-only value."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This rule is provided with DQOps as a built-in rule. This is a read-only value."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Rule list model"
        }
      },
      "RuleModel" : {
        "type" : "object",
        "properties" : {
          "rule_name" : {
            "type" : "string",
            "description" : "Rule name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "rule_python_module_content" : {
            "type" : "string",
            "description" : "Rule Python module content",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "type" : {
            "$ref" : "#/components/schemas/RuleRunnerType",
            "exampleSetFlag" : false
          },
          "java_class_name" : {
            "type" : "string",
            "description" : "Java class name for a rule runner that will execute the sensor. The \"type\" must be \"java_class\".",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "mode" : {
            "$ref" : "#/components/schemas/RuleTimeWindowMode",
            "exampleSetFlag" : false
          },
          "time_window" : {
            "$ref" : "#/components/schemas/RuleTimeWindowSettingsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fields" : {
            "type" : "array",
            "description" : "List of fields that are parameters of a custom rule. Those fields are used by the DQOps UI to display the data quality check editing screens with proper UI controls for all required fields.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ParameterDefinitionSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "description" : "Additional rule parameters",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Additional rule parameters"
            }
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This rule has a custom (user level) definition.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This rule has is a built-in rule.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Rule model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "rule_name" : {
              "type" : "string",
              "description" : "Rule name"
            },
            "rule_python_module_content" : {
              "type" : "string",
              "description" : "Rule Python module content"
            },
            "type" : {
              "type" : "string",
              "description" : "Rule runner type",
              "enum" : [ "python", "java_class" ]
            },
            "java_class_name" : {
              "type" : "string",
              "description" : "Java class name for a rule runner that will execute the sensor. The \"type\" must be \"java_class\"."
            },
            "mode" : {
              "type" : "string",
              "description" : "Rule historic (past) values mode. A rule may require just the current sensor readout or use sensor readouts from past periods to perform prediction. The number of time windows is configured in the time_window setting.",
              "enum" : [ "current_value", "previous_readouts" ]
            },
            "time_window" : {
              "description" : "Rule time window configuration when the mode is previous_readouts. Configures the number of past time windows (sensor readouts) that are passes as a parameter to the rule. For example, to calculate the average or perform prediction on historic data.",
              "$ref" : "#/components/schemas/RuleTimeWindowSettingsSpec",
              "originalRef" : "#/components/schemas/RuleTimeWindowSettingsSpec"
            },
            "fields" : {
              "type" : "array",
              "description" : "List of fields that are parameters of a custom rule. Those fields are used by the DQOps UI to display the data quality check editing screens with proper UI controls for all required fields.",
              "items" : {
                "$ref" : "#/components/schemas/ParameterDefinitionSpec",
                "originalRef" : "#/components/schemas/ParameterDefinitionSpec"
              }
            },
            "parameters" : {
              "type" : "object",
              "description" : "Additional rule parameters",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This rule has a custom (user level) definition."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This rule has is a built-in rule."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Rule model"
        }
      },
      "RuleParametersModel" : {
        "type" : "object",
        "properties" : {
          "rule_name" : {
            "type" : "string",
            "description" : "Full rule name. This field is for information purposes and could be used to create additional custom checks that are reusing the same data quality rule.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "rule_parameters" : {
            "type" : "array",
            "description" : "List of fields for editing the rule parameters like thresholds.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/FieldModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disable the rule. The rule will not be evaluated. The sensor will also not be executed if it has no enabled rules.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "configured" : {
            "type" : "boolean",
            "description" : "Returns true when the rule is configured (is not null), so it should be shown in the UI as configured (having values).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that returns the form definition and the form data to edit parameters (thresholds) for a rule at a single severity level (low, medium, high).",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "rule_name" : {
              "type" : "string",
              "description" : "Full rule name. This field is for information purposes and could be used to create additional custom checks that are reusing the same data quality rule."
            },
            "rule_parameters" : {
              "type" : "array",
              "description" : "List of fields for editing the rule parameters like thresholds.",
              "items" : {
                "$ref" : "#/components/schemas/FieldModel",
                "originalRef" : "#/components/schemas/FieldModel"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disable the rule. The rule will not be evaluated. The sensor will also not be executed if it has no enabled rules."
            },
            "configured" : {
              "type" : "boolean",
              "description" : "Returns true when the rule is configured (is not null), so it should be shown in the UI as configured (having values)."
            }
          },
          "description" : "Model that returns the form definition and the form data to edit parameters (thresholds) for a rule at a single severity level (low, medium, high)."
        }
      },
      "RuleThresholdsModel" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/RuleParametersModel",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "Model that returns the form definition and the form data to edit a single rule with all three threshold levels (low, medium, high).",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "error" : {
              "description" : "Rule parameters for the error severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            },
            "warning" : {
              "description" : "Rule parameters for the warning severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            },
            "fatal" : {
              "description" : "Rule parameters for the fatal severity rule.",
              "$ref" : "#/components/schemas/RuleParametersModel",
              "originalRef" : "#/components/schemas/RuleParametersModel"
            }
          },
          "description" : "Model that returns the form definition and the form data to edit a single rule with all three threshold levels (low, medium, high)."
        }
      },
      "RuleTimeWindowSettingsSpec" : {
        "type" : "object",
        "properties" : {
          "prediction_time_window" : {
            "type" : "integer",
            "description" : "Number of historic time periods to look back for results. Returns results from previous time periods before the sensor readout timestamp to be used in a rule. Time periods are used in rules that need historic data to calculate an average to detect anomalies. e.g. when the sensor is configured to use a 'day' time period, the rule will receive results from the time_periods number of days before the time period in the sensor readout. The default is 14 (days).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "min_periods_with_readouts" : {
            "type" : "integer",
            "description" : "Minimum number of past time periods with a sensor readout that must be present in the data in order to call the rule. The rule is not called and the sensor readout is discarded as not analyzable (not enough historic data to perform prediction) when the number of past sensor readouts is not met. The default is 7.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "historic_data_point_grouping" : {
            "$ref" : "#/components/schemas/HistoricDataPointsGrouping",
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "prediction_time_window" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Number of historic time periods to look back for results. Returns results from previous time periods before the sensor readout timestamp to be used in a rule. Time periods are used in rules that need historic data to calculate an average to detect anomalies. e.g. when the sensor is configured to use a 'day' time period, the rule will receive results from the time_periods number of days before the time period in the sensor readout. The default is 14 (days)."
            },
            "min_periods_with_readouts" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Minimum number of past time periods with a sensor readout that must be present in the data in order to call the rule. The rule is not called and the sensor readout is discarded as not analyzable (not enough historic data to perform prediction) when the number of past sensor readouts is not met. The default is 7."
            },
            "historic_data_point_grouping" : {
              "type" : "string",
              "description" : "Time period grouping for collecting previous data quality sensor results for the data quality rules that use historic data for prediction. For example, when the default time period grouping 'day' is used, DQOps will find the most recent data quality sensor readout for each day and pass an array of most recent days per day in an array of historic sensor readout data points to a data quality rule for prediction.",
              "enum" : [ "year", "quarter", "month", "week", "day", "hour", "last_n_readouts" ]
            }
          }
        }
      },
      "RunChecksOnTableParameters" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "The name of the target connection.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "max_jobs_per_connection" : {
            "type" : "integer",
            "description" : "The maximum number of concurrent 'run checks on table' jobs that could be run on this connection. Limits the number of concurrent jobs.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "check_search_filters" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "time_window_filter" : {
            "$ref" : "#/components/schemas/TimeWindowFilterParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "dummy_execution" : {
            "type" : "boolean",
            "description" : "Set the value to true when the data quality checks should be executed in a dummy mode (without running checks on the target systems and storing the results). Only the jinja2 sensors will be rendered.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "run_checks_result" : {
            "$ref" : "#/components/schemas/RunChecksResult",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "Run checks configuration for a job that will run checks on a single table, specifies the target table and the target checks that should be executed and an optional time window.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "The name of the target connection."
            },
            "max_jobs_per_connection" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The maximum number of concurrent 'run checks on table' jobs that could be run on this connection. Limits the number of concurrent jobs."
            },
            "table" : {
              "description" : "The full physical name (schema.table) of the target table.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "check_search_filters" : {
              "description" : "Target data quality checks filter.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "time_window_filter" : {
              "description" : "Optional time window filter, configures the time range that is analyzed or the number of recent days/months to analyze for day or month partitioned data.",
              "$ref" : "#/components/schemas/TimeWindowFilterParameters",
              "originalRef" : "#/components/schemas/TimeWindowFilterParameters"
            },
            "dummy_execution" : {
              "type" : "boolean",
              "description" : "Set the value to true when the data quality checks should be executed in a dummy mode (without running checks on the target systems and storing the results). Only the jinja2 sensors will be rendered."
            },
            "run_checks_result" : {
              "description" : "The result of running the check, updated when the run checks job finishes. Contains the count of executed checks.",
              "$ref" : "#/components/schemas/RunChecksResult",
              "originalRef" : "#/components/schemas/RunChecksResult"
            }
          },
          "description" : "Run checks configuration for a job that will run checks on a single table, specifies the target table and the target checks that should be executed and an optional time window."
        }
      },
      "RunChecksParameters" : {
        "type" : "object",
        "properties" : {
          "check_search_filters" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "time_window_filter" : {
            "$ref" : "#/components/schemas/TimeWindowFilterParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "dummy_execution" : {
            "type" : "boolean",
            "description" : "Set the value to true when the data quality checks should be executed in a dummy mode (without running checks on the target systems and storing the results). Only the jinja2 sensors will be rendered.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "run_checks_result" : {
            "$ref" : "#/components/schemas/RunChecksResult",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "Run checks configuration, specifies the target checks that should be executed and an optional time window.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_search_filters" : {
              "description" : "Target data quality checks filter.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "time_window_filter" : {
              "description" : "Optional time window filter, configures the time range that is analyzed or the number of recent days/months to analyze for day or month partitioned data.",
              "$ref" : "#/components/schemas/TimeWindowFilterParameters",
              "originalRef" : "#/components/schemas/TimeWindowFilterParameters"
            },
            "dummy_execution" : {
              "type" : "boolean",
              "description" : "Set the value to true when the data quality checks should be executed in a dummy mode (without running checks on the target systems and storing the results). Only the jinja2 sensors will be rendered."
            },
            "run_checks_result" : {
              "description" : "The result of running the check, updated when the run checks job finishes. Contains the count of executed checks.",
              "$ref" : "#/components/schemas/RunChecksResult",
              "originalRef" : "#/components/schemas/RunChecksResult"
            }
          },
          "description" : "Run checks configuration, specifies the target checks that should be executed and an optional time window."
        }
      },
      "RunChecksQueueJobResult" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "result" : {
            "$ref" : "#/components/schemas/RunChecksResult",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          }
        },
        "description" : "Object returned from the operation that queues a \"run checks\" job. The result contains the job id that was started and optionally can also contain the result of running the checks if the operation was started with wait=true parameter to wait for the \"run checks\" job to finish.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "description" : "Job id that identifies a job that was started on the DQOps job queue.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "result" : {
              "description" : "Optional result object that is returned only when the wait parameter was true and the \"run checks\" job has finished. Contains the summary result of the data quality checks executed, including the severity of the most severe issue detected. The calling code (the data pipeline) can decide if further processing should be continued.",
              "$ref" : "#/components/schemas/RunChecksResult",
              "originalRef" : "#/components/schemas/RunChecksResult"
            },
            "status" : {
              "type" : "string",
              "description" : "Job status",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            }
          },
          "description" : "Object returned from the operation that queues a \"run checks\" job. The result contains the job id that was started and optionally can also contain the result of running the checks if the operation was started with wait=true parameter to wait for the \"run checks\" job to finish."
        }
      },
      "RunChecksResult" : {
        "type" : "object",
        "properties" : {
          "highest_severity" : {
            "$ref" : "#/components/schemas/RuleSeverityLevel",
            "exampleSetFlag" : false
          },
          "executed_checks" : {
            "type" : "integer",
            "description" : "The total count of all executed checks.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "valid_results" : {
            "type" : "integer",
            "description" : "The total count of all checks that finished successfully (with no data quality issues).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "warnings" : {
            "type" : "integer",
            "description" : "The total count of all invalid data quality checks that finished raising a warning.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "errors" : {
            "type" : "integer",
            "description" : "The total count of all invalid data quality checks that finished raising an error.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "fatals" : {
            "type" : "integer",
            "description" : "The total count of all invalid data quality checks that finished raising a fatal error.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "execution_errors" : {
            "type" : "integer",
            "description" : "The total number of checks that failed to execute due to some execution errors.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "description" : "Returns the result (highest data quality check severity and the finished checks count) for the checks that were recently executed.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "highest_severity" : {
              "type" : "string",
              "description" : "The highest check severity for the data quality checks executed in this batch.",
              "enum" : [ "valid", "warning", "error", "fatal" ]
            },
            "executed_checks" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all executed checks."
            },
            "valid_results" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all checks that finished successfully (with no data quality issues)."
            },
            "warnings" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all invalid data quality checks that finished raising a warning."
            },
            "errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all invalid data quality checks that finished raising an error."
            },
            "fatals" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total count of all invalid data quality checks that finished raising a fatal error."
            },
            "execution_errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of checks that failed to execute due to some execution errors."
            }
          },
          "description" : "Returns the result (highest data quality check severity and the finished checks count) for the checks that were recently executed."
        }
      },
      "SchemaModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schema_name" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_profiling_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_monitoring_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_partition_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collect_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "import_table_job_parameters" : {
            "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the schema.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Schema model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schema_name" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run all checks within this schema.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_profiling_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run profiling checks within this schema.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_monitoring_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run monitoring checks within this schema.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_partition_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run partition partitioned checks within this schema.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "collect_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors within this schema.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "import_table_job_parameters" : {
              "description" : "Job parameters for the import tables job that will import all tables from this schema.",
              "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
              "originalRef" : "#/components/schemas/ImportTablesQueueJobParameters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this schema.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the schema."
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Schema model"
        }
      },
      "SchemaRemoteModel" : {
        "type" : "object",
        "properties" : {
          "connectionName" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schemaName" : {
            "type" : "string",
            "description" : "Schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "alreadyImported" : {
            "type" : "boolean",
            "description" : "Has the schema been imported.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "importTableJobParameters" : {
            "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "description" : "Schema remote model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connectionName" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "schemaName" : {
              "type" : "string",
              "description" : "Schema name."
            },
            "alreadyImported" : {
              "type" : "boolean",
              "description" : "Has the schema been imported."
            },
            "importTableJobParameters" : {
              "description" : "Job parameters for the import tables job that will import all tables from this schema.",
              "$ref" : "#/components/schemas/ImportTablesQueueJobParameters",
              "originalRef" : "#/components/schemas/ImportTablesQueueJobParameters"
            }
          },
          "description" : "Schema remote model"
        }
      },
      "SensorDefinitionSpec" : {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "array",
            "description" : "List of fields that are parameters of a custom sensor. Those fields are used by the DQOps UI to display the data quality check editing screens with proper UI controls for all required fields.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ParameterDefinitionSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "requires_event_timestamp" : {
            "type" : "boolean",
            "description" : "The data quality sensor depends on the configuration of the event timestamp column name on the analyzed table. When true, the name of the column that stores the event (transaction, etc.) timestamp must be specified in the timestamp_columns.event_timestamp_column field on the table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "requires_ingestion_timestamp" : {
            "type" : "boolean",
            "description" : "The data quality sensor depends on the configuration of the ingestion timestamp column name on the analyzed table. When true, the name of the column that stores the ingestion (created_at, loaded_at, etc.) timestamp must be specified in the timestamp_columns.ingestion_timestamp_column field on the table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "default_value" : {
            "type" : "number",
            "description" : "Default value that is used when the sensor returns no rows. A row count sensor may return no rows when a GROUP BY condition is added to capture the database server's local time zone. In order to always return a value, a sensor may have a default value configured.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "description" : "Additional sensor definition parameters",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Additional sensor definition parameters"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "fields" : {
              "type" : "array",
              "description" : "List of fields that are parameters of a custom sensor. Those fields are used by the DQOps UI to display the data quality check editing screens with proper UI controls for all required fields.",
              "items" : {
                "$ref" : "#/components/schemas/ParameterDefinitionSpec",
                "originalRef" : "#/components/schemas/ParameterDefinitionSpec"
              }
            },
            "requires_event_timestamp" : {
              "type" : "boolean",
              "description" : "The data quality sensor depends on the configuration of the event timestamp column name on the analyzed table. When true, the name of the column that stores the event (transaction, etc.) timestamp must be specified in the timestamp_columns.event_timestamp_column field on the table."
            },
            "requires_ingestion_timestamp" : {
              "type" : "boolean",
              "description" : "The data quality sensor depends on the configuration of the ingestion timestamp column name on the analyzed table. When true, the name of the column that stores the ingestion (created_at, loaded_at, etc.) timestamp must be specified in the timestamp_columns.ingestion_timestamp_column field on the table."
            },
            "default_value" : {
              "type" : "number",
              "format" : "double",
              "description" : "Default value that is used when the sensor returns no rows. A row count sensor may return no rows when a GROUP BY condition is added to capture the database server's local time zone. In order to always return a value, a sensor may have a default value configured."
            },
            "parameters" : {
              "type" : "object",
              "description" : "Additional sensor definition parameters",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "SensorFolderModel" : {
        "type" : "object",
        "properties" : {
          "folders" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SensorFolderModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "A dictionary of nested folders with sensors, the keys are the folder names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with sensors, the keys are the folder names."
            }
          },
          "sensors" : {
            "type" : "array",
            "description" : "List of sensors defined in this folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/SensorListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "all_sensors" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/SensorListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "description" : "Sensor folder model that contains sensors defined in this folder or a list of nested folders with sensors.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folders" : {
              "type" : "object",
              "description" : "A dictionary of nested folders with sensors, the keys are the folder names.",
              "additionalProperties" : {
                "$ref" : "#/definitions/SensorFolderModel",
                "originalRef" : "#/definitions/SensorFolderModel"
              }
            },
            "sensors" : {
              "type" : "array",
              "description" : "List of sensors defined in this folder.",
              "items" : {
                "$ref" : "#/components/schemas/SensorListModel",
                "originalRef" : "#/components/schemas/SensorListModel"
              }
            },
            "all_sensors" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SensorListModel",
                "originalRef" : "#/components/schemas/SensorListModel"
              }
            }
          },
          "description" : "Sensor folder model that contains sensors defined in this folder or a list of nested folders with sensors."
        }
      },
      "SensorListModel" : {
        "type" : "object",
        "properties" : {
          "sensor_name" : {
            "type" : "string",
            "description" : "Sensor name, excluding the parent folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "full_sensor_name" : {
            "type" : "string",
            "description" : "Full sensor name, including the folder path within the \"sensors\" folder where the sensor definitions are stored. This is the unique identifier of the sensor.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "This sensor has is a custom sensor or was customized by the user. This is a read-only flag.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This sensor is provided with DQOps as a built-in sensor. This is a read-only flag.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "provider_sensors" : {
            "type" : "array",
            "description" : "List of provider (database) specific models.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ProviderSensorListModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Sensor list model",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "sensor_name" : {
              "type" : "string",
              "description" : "Sensor name, excluding the parent folder."
            },
            "full_sensor_name" : {
              "type" : "string",
              "description" : "Full sensor name, including the folder path within the \"sensors\" folder where the sensor definitions are stored. This is the unique identifier of the sensor."
            },
            "custom" : {
              "type" : "boolean",
              "description" : "This sensor has is a custom sensor or was customized by the user. This is a read-only flag."
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This sensor is provided with DQOps as a built-in sensor. This is a read-only flag."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "provider_sensors" : {
              "type" : "array",
              "description" : "List of provider (database) specific models.",
              "items" : {
                "$ref" : "#/components/schemas/ProviderSensorListModel",
                "originalRef" : "#/components/schemas/ProviderSensorListModel"
              }
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Sensor list model"
        }
      },
      "SensorModel" : {
        "type" : "object",
        "properties" : {
          "full_sensor_name" : {
            "type" : "string",
            "description" : "Full sensor name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensor_definition_spec" : {
            "$ref" : "#/components/schemas/SensorDefinitionSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "provider_sensor_list" : {
            "type" : "array",
            "description" : "Provider sensors list with provider specific sensor definitions.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ProviderSensorModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "custom" : {
            "type" : "boolean",
            "description" : "Whether the sensor is a User Home sensor",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "built_in" : {
            "type" : "boolean",
            "description" : "This is a DQOps built-in sensor, whose parameters cannot be changed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Sensor model that describes the configuration of a single built-in or custom sensor.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "full_sensor_name" : {
              "type" : "string",
              "description" : "Full sensor name."
            },
            "sensor_definition_spec" : {
              "description" : "Sensor definition specification.",
              "$ref" : "#/components/schemas/SensorDefinitionSpec",
              "originalRef" : "#/components/schemas/SensorDefinitionSpec"
            },
            "provider_sensor_list" : {
              "type" : "array",
              "description" : "Provider sensors list with provider specific sensor definitions.",
              "items" : {
                "$ref" : "#/components/schemas/ProviderSensorModel",
                "originalRef" : "#/components/schemas/ProviderSensorModel"
              }
            },
            "custom" : {
              "type" : "boolean",
              "description" : "Whether the sensor is a User Home sensor"
            },
            "built_in" : {
              "type" : "boolean",
              "description" : "This is a DQOps built-in sensor, whose parameters cannot be changed."
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Sensor model that describes the configuration of a single built-in or custom sensor."
        }
      },
      "SensorReadoutEntryModel" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Sensor readout ID.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkDisplayName" : {
            "type" : "string",
            "description" : "Check display name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "Check type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "actualValue" : {
            "type" : "number",
            "description" : "Actual value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "expectedValue" : {
            "type" : "number",
            "description" : "Expected value.",
            "format" : "double",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "number" ]
          },
          "columnName" : {
            "type" : "string",
            "description" : "Column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "durationMs" : {
            "type" : "integer",
            "description" : "Duration (ms).",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "executedAt" : {
            "type" : "integer",
            "description" : "Executed at.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "timeGradient" : {
            "type" : "string",
            "description" : "Time gradient.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timePeriod" : {
            "type" : "string",
            "description" : "Time period.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "provider" : {
            "type" : "string",
            "description" : "Provider.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "qualityDimension" : {
            "type" : "string",
            "description" : "Quality dimension.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "tableComparison" : {
            "type" : "string",
            "description" : "Quality dimension.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Sensor readout ID."
            },
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "checkDisplayName" : {
              "type" : "string",
              "description" : "Check display name."
            },
            "checkType" : {
              "type" : "string",
              "description" : "Check type."
            },
            "actualValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Actual value."
            },
            "expectedValue" : {
              "type" : "number",
              "format" : "double",
              "description" : "Expected value."
            },
            "columnName" : {
              "type" : "string",
              "description" : "Column name."
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Data group."
            },
            "durationMs" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Duration (ms)."
            },
            "executedAt" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Executed at."
            },
            "timeGradient" : {
              "type" : "string",
              "description" : "Time gradient."
            },
            "timePeriod" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Time period."
            },
            "provider" : {
              "type" : "string",
              "description" : "Provider."
            },
            "qualityDimension" : {
              "type" : "string",
              "description" : "Quality dimension."
            },
            "tableComparison" : {
              "type" : "string",
              "description" : "Quality dimension."
            }
          }
        }
      },
      "SensorReadoutsListModel" : {
        "type" : "object",
        "properties" : {
          "checkName" : {
            "type" : "string",
            "description" : "Check name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkDisplayName" : {
            "type" : "string",
            "description" : "Check display name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkType" : {
            "type" : "string",
            "description" : "Check type.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "checkHash" : {
            "type" : "integer",
            "description" : "Check hash.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checkCategory" : {
            "type" : "string",
            "description" : "Check category name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "Sensor name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "dataGroupNames" : {
            "type" : "array",
            "description" : "Data groups list.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "dataGroup" : {
            "type" : "string",
            "description" : "Selected data group.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorReadoutEntries" : {
            "type" : "array",
            "description" : "Sensor readout entries",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/SensorReadoutEntryModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "checkName" : {
              "type" : "string",
              "description" : "Check name."
            },
            "checkDisplayName" : {
              "type" : "string",
              "description" : "Check display name."
            },
            "checkType" : {
              "type" : "string",
              "description" : "Check type."
            },
            "checkHash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Check hash."
            },
            "checkCategory" : {
              "type" : "string",
              "description" : "Check category name."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "Sensor name."
            },
            "dataGroupNames" : {
              "type" : "array",
              "description" : "Data groups list.",
              "items" : {
                "type" : "string"
              }
            },
            "dataGroup" : {
              "type" : "string",
              "description" : "Selected data group."
            },
            "sensorReadoutEntries" : {
              "type" : "array",
              "description" : "Sensor readout entries",
              "items" : {
                "$ref" : "#/components/schemas/SensorReadoutEntryModel",
                "originalRef" : "#/components/schemas/SensorReadoutEntryModel"
              }
            }
          }
        }
      },
      "SharedCredentialListModel" : {
        "type" : "object",
        "properties" : {
          "credential_name" : {
            "type" : "string",
            "description" : "Credential name. It is the name of a file in the .credentials/ folder inside the DQOps user's home folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "type" : {
            "$ref" : "#/components/schemas/CredentialType",
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the shared credential file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_access_credential" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user see or download the credential file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Shared credentials list model with the basic information about the credential.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "credential_name" : {
              "type" : "string",
              "description" : "Credential name. It is the name of a file in the .credentials/ folder inside the DQOps user's home folder."
            },
            "type" : {
              "type" : "string",
              "description" : "Credential type that is based on the detected format of the file. If the file could be parsed as a valid utf-8 string then it is assumed that the credential is a text. Otherwise it is a binary file that could be retrieved only as a base64 value.",
              "enum" : [ "text", "binary" ]
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the shared credential file."
            },
            "can_access_credential" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user see or download the credential file."
            }
          },
          "description" : "Shared credentials list model with the basic information about the credential."
        }
      },
      "SharedCredentialModel" : {
        "type" : "object",
        "properties" : {
          "credential_name" : {
            "type" : "string",
            "description" : "Credential name. It is the name of a file in the .credentials/ folder inside the DQOps user's home folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "type" : {
            "$ref" : "#/components/schemas/CredentialType",
            "exampleSetFlag" : false
          },
          "text_value" : {
            "type" : "string",
            "description" : "Credential's value as a text. Only one value (the text_value or binary_value) should be not empty.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "binary_value" : {
            "type" : "string",
            "description" : "Credential's value for a binary credential that is stored as a base64 value. Only one value (the text_value or binary_value) should be not empty.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Shared credentials full model used to create and update the credential. Contains one of two forms of the credential's value: a text or a base64 binary value.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "credential_name" : {
              "type" : "string",
              "description" : "Credential name. It is the name of a file in the .credentials/ folder inside the DQOps user's home folder."
            },
            "type" : {
              "type" : "string",
              "description" : "Credential type that is based on the detected format of the file. If the file could be parsed as a valid utf-8 string then it is assumed that the credential is a text. Otherwise it is a binary file that could be retrieved only as a base64 value.",
              "enum" : [ "text", "binary" ]
            },
            "text_value" : {
              "type" : "string",
              "description" : "Credential's value as a text. Only one value (the text_value or binary_value) should be not empty."
            },
            "binary_value" : {
              "type" : "string",
              "description" : "Credential's value for a binary credential that is stored as a base64 value. Only one value (the text_value or binary_value) should be not empty."
            }
          },
          "description" : "Shared credentials full model used to create and update the credential. Contains one of two forms of the credential's value: a text or a base64 binary value."
        }
      },
      "SimilarCheckModel" : {
        "type" : "object",
        "properties" : {
          "check_target" : {
            "$ref" : "#/components/schemas/CheckTarget",
            "exampleSetFlag" : false
          },
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "category" : {
            "type" : "string",
            "description" : "The check's category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_name" : {
            "type" : "string",
            "description" : "The similar check name in another category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Model that identifies a similar check in another category or another type of check (monitoring, partition).",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "check_target" : {
              "type" : "string",
              "description" : "The check target (table or column).",
              "enum" : [ "table", "column" ]
            },
            "check_type" : {
              "type" : "string",
              "description" : "The check type.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "time_scale" : {
              "type" : "string",
              "description" : "The time scale (daily, monthly). The time scale is optional and could be null (for profiling checks).",
              "enum" : [ "daily", "monthly" ]
            },
            "category" : {
              "type" : "string",
              "description" : "The check's category."
            },
            "check_name" : {
              "type" : "string",
              "description" : "The similar check name in another category."
            }
          },
          "description" : "Model that identifies a similar check in another category or another type of check (monitoring, partition)."
        }
      },
      "SnowflakeParametersSpec" : {
        "type" : "object",
        "properties" : {
          "account" : {
            "type" : "string",
            "description" : "Snowflake account name, e.q. <account>, <account>-<locator>, <account>.<region> or <account>.<region>.<platform>.. Supports also a ${SNOWFLAKE_ACCOUNT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "warehouse" : {
            "type" : "string",
            "description" : "Snowflake warehouse name. Supports also a ${SNOWFLAKE_WAREHOUSE} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "Snowflake database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "Snowflake user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "Snowflake database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "role" : {
            "type" : "string",
            "description" : "Snowflake role name. Supports also ${SNOWFLAKE_ROLE} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "account" : {
              "type" : "string",
              "description" : "Snowflake account name, e.q. <account>, <account>-<locator>, <account>.<region> or <account>.<region>.<platform>.. Supports also a ${SNOWFLAKE_ACCOUNT} configuration with a custom environment variable."
            },
            "warehouse" : {
              "type" : "string",
              "description" : "Snowflake warehouse name. Supports also a ${SNOWFLAKE_WAREHOUSE} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "Snowflake database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "Snowflake user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "Snowflake database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "role" : {
              "type" : "string",
              "description" : "Snowflake role name. Supports also ${SNOWFLAKE_ROLE} configuration with a custom environment variable."
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "SpringErrorPayload" : {
        "type" : "object",
        "properties" : {
          "timestamp" : {
            "type" : "integer",
            "description" : "Error timestamp as an epoch timestamp.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "status" : {
            "type" : "integer",
            "description" : "Optional status code.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "error" : {
            "type" : "string",
            "description" : "Error name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "exception" : {
            "type" : "string",
            "description" : "Optional exception.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "message" : {
            "type" : "string",
            "description" : "Exception's message.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "path" : {
            "type" : "string",
            "description" : "Exception's stack trace (optional).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Spring error payload that identifies the fields in the error returned by the REST API in case of unexpected errors (exceptions).",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "timestamp" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Error timestamp as an epoch timestamp."
            },
            "status" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Optional status code."
            },
            "error" : {
              "type" : "string",
              "description" : "Error name."
            },
            "exception" : {
              "type" : "string",
              "description" : "Optional exception."
            },
            "message" : {
              "type" : "string",
              "description" : "Exception's message."
            },
            "path" : {
              "type" : "string",
              "description" : "Exception's stack trace (optional)."
            }
          },
          "description" : "Spring error payload that identifies the fields in the error returned by the REST API in case of unexpected errors (exceptions)."
        }
      },
      "SqlServerParametersSpec" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "SQL Server host name. Supports also a ${SQLSERVER_HOST} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "port" : {
            "type" : "string",
            "description" : "SQL Server port number. The default port is 1433. Supports also a ${SQLSERVER_PORT} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "database" : {
            "type" : "string",
            "description" : "SQL Server database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "user" : {
            "type" : "string",
            "description" : "SQL Server user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "password" : {
            "type" : "string",
            "description" : "SQL Server database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "options" : {
            "type" : "string",
            "description" : "SQL Server connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${SQLSERVER_OPTIONS} configuration with a custom environment variable.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "disable_encryption" : {
            "type" : "boolean",
            "description" : "Disable SSL encryption parameter. The default value is false. You may need to disable encryption when SQL Server is started in Docker.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object"
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "host" : {
              "type" : "string",
              "description" : "SQL Server host name. Supports also a ${SQLSERVER_HOST} configuration with a custom environment variable."
            },
            "port" : {
              "type" : "string",
              "description" : "SQL Server port number. The default port is 1433. Supports also a ${SQLSERVER_PORT} configuration with a custom environment variable."
            },
            "database" : {
              "type" : "string",
              "description" : "SQL Server database name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "user" : {
              "type" : "string",
              "description" : "SQL Server user name. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "password" : {
              "type" : "string",
              "description" : "SQL Server database password. The value can be in the ${ENVIRONMENT_VARIABLE_NAME} format to use dynamic substitution."
            },
            "options" : {
              "type" : "string",
              "description" : "SQL Server connection 'options' initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes. Supports also a ${SQLSERVER_OPTIONS} configuration with a custom environment variable."
            },
            "disable_encryption" : {
              "type" : "boolean",
              "description" : "Disable SSL encryption parameter. The default value is false. You may need to disable encryption when SQL Server is started in Docker."
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "StatisticsCollectorSearchFilters" : {
        "type" : "object",
        "properties" : {
          "connection" : {
            "type" : "string",
            "description" : "The connection (data source) name. Supports search patterns in the format: 'source\\*', '\\*_prod', 'prefix\\*suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "fullTableName" : {
            "type" : "string",
            "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. The schema and table name accept patterns both in the schema name and table name parts. Sample patterns are: 'schema_name.tab_prefix_\\*', 'schema_name.*', '*.*', 'schema_name.\\*_customer', 'schema_name.tab_\\*_suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "A boolean flag to target enabled tables, columns or checks. When the value of this field is not set, the default value of this field is *true*, targeting only tables, columns and checks that are not implicitly disabled.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "tags" : {
            "type" : "array",
            "description" : "An array of tags assigned to the table. All tags must be present on a table to match. The tags can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The tags are assigned to the table on the data grouping screen when any of the data grouping hierarchy level is assigned a static value, which is a tag.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "labels" : {
            "type" : "array",
            "description" : "An array of labels assigned to the table. All labels must be present on a table to match. The labels can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The labels are assigned on the labels screen and stored in the *labels* node in the *.dqotable.yaml* file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "columnNames" : {
            "type" : "array",
            "description" : "The list of column names or column name patters. This field accepts search patterns in the format: 'fk_\\*', '\\*_id', 'prefix\\*suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "collectorName" : {
            "type" : "string",
            "description" : "The target statistics collector name to capture only selected statistics. Uses the short collector nameThis field supports search patterns such as: 'prefix\\*', '\\*suffix', 'prefix_\\*_suffix'. In order to collect only top 10 most common column samples, use 'column_samples'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sensorName" : {
            "type" : "string",
            "description" : "The target sensor name to run only data quality checks that are using this sensor. Uses the full sensor name which is the full folder path within the *sensors* folder. This field supports search patterns such as: 'table/volume/row_\\*', '\\*_count', 'table/volume/prefix_\\*_suffix'.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "collectorCategory" : {
            "type" : "string",
            "description" : "The target statistics collector category, for example: *nulls*, *volume*, *sampling*.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "target" : {
            "$ref" : "#/components/schemas/StatisticsCollectorTarget",
            "exampleSetFlag" : false
          },
          "collectorsHierarchyIdsModels" : {
            "type" : "array",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/HierarchyIdModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "string",
              "description" : "The connection (data source) name. Supports search patterns in the format: 'source\\*', '\\*_prod', 'prefix\\*suffix'."
            },
            "fullTableName" : {
              "type" : "string",
              "description" : "The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. The schema and table name accept patterns both in the schema name and table name parts. Sample patterns are: 'schema_name.tab_prefix_\\*', 'schema_name.*', '*.*', 'schema_name.\\*_customer', 'schema_name.tab_\\*_suffix'."
            },
            "enabled" : {
              "type" : "boolean",
              "description" : "A boolean flag to target enabled tables, columns or checks. When the value of this field is not set, the default value of this field is *true*, targeting only tables, columns and checks that are not implicitly disabled."
            },
            "tags" : {
              "type" : "array",
              "description" : "An array of tags assigned to the table. All tags must be present on a table to match. The tags can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The tags are assigned to the table on the data grouping screen when any of the data grouping hierarchy level is assigned a static value, which is a tag.",
              "items" : {
                "type" : "string"
              }
            },
            "labels" : {
              "type" : "array",
              "description" : "An array of labels assigned to the table. All labels must be present on a table to match. The labels can use patterns:  'prefix\\*', '\\*suffix', 'prefix\\*suffix'. The labels are assigned on the labels screen and stored in the *labels* node in the *.dqotable.yaml* file.",
              "items" : {
                "type" : "string"
              }
            },
            "columnNames" : {
              "type" : "array",
              "description" : "The list of column names or column name patters. This field accepts search patterns in the format: 'fk_\\*', '\\*_id', 'prefix\\*suffix'.",
              "items" : {
                "type" : "string"
              }
            },
            "collectorName" : {
              "type" : "string",
              "description" : "The target statistics collector name to capture only selected statistics. Uses the short collector nameThis field supports search patterns such as: 'prefix\\*', '\\*suffix', 'prefix_\\*_suffix'. In order to collect only top 10 most common column samples, use 'column_samples'."
            },
            "sensorName" : {
              "type" : "string",
              "description" : "The target sensor name to run only data quality checks that are using this sensor. Uses the full sensor name which is the full folder path within the *sensors* folder. This field supports search patterns such as: 'table/volume/row_\\*', '\\*_count', 'table/volume/prefix_\\*_suffix'."
            },
            "collectorCategory" : {
              "type" : "string",
              "description" : "The target statistics collector category, for example: *nulls*, *volume*, *sampling*."
            },
            "target" : {
              "type" : "string",
              "description" : "The target type of object to collect statistics from. Supported values are: *table* to collect only table level statistics or *column* to collect only column level statistics.",
              "enum" : [ "table", "column" ]
            },
            "collectorsHierarchyIdsModels" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/HierarchyIdModel",
                "originalRef" : "#/components/schemas/HierarchyIdModel"
              }
            }
          }
        }
      },
      "StatisticsMetricModel" : {
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "Statistics category",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "collector" : {
            "type" : "string",
            "description" : "Statistics (metric) name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "resultDataType" : {
            "$ref" : "#/components/schemas/StatisticsResultDataType",
            "exampleSetFlag" : false
          },
          "result" : {
            "type" : "object",
            "properties" : { },
            "description" : "Statistics result for the metric",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Statistics result for the metric",
              "properties" : { }
            }
          },
          "collectedAt" : {
            "type" : "string",
            "description" : "The local timestamp when the metric was collected",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sampleCount" : {
            "type" : "integer",
            "description" : "The number of the value samples for this result value. Filled only by the column value sampling profilers.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "sampleIndex" : {
            "type" : "integer",
            "description" : "The index of the result that was returned. Filled only by the column value sampling profilers to identify each column value sample.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "category" : {
              "type" : "string",
              "description" : "Statistics category"
            },
            "collector" : {
              "type" : "string",
              "description" : "Statistics (metric) name"
            },
            "resultDataType" : {
              "type" : "string",
              "description" : "Statistics result data type",
              "enum" : [ "null", "boolean", "string", "integer", "float", "date", "datetime", "instant", "time" ]
            },
            "result" : {
              "type" : "object",
              "description" : "Statistics result for the metric",
              "properties" : { }
            },
            "collectedAt" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "The local timestamp when the metric was collected"
            },
            "sampleCount" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The number of the value samples for this result value. Filled only by the column value sampling profilers."
            },
            "sampleIndex" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The index of the result that was returned. Filled only by the column value sampling profilers to identify each column value sample."
            }
          }
        }
      },
      "SynchronizeMultipleFoldersDqoQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "direction" : {
            "$ref" : "#/components/schemas/FileSynchronizationDirection",
            "exampleSetFlag" : false
          },
          "forceRefreshNativeTables" : {
            "type" : "boolean",
            "description" : "Force full refresh of native tables in the data quality data warehouse. The default synchronization mode is to refresh only modified data.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "detectCronSchedules" : {
            "type" : "boolean",
            "description" : "Scans the yaml files (with the configuration for connections and tables) and detects new cron schedules. Detected cron schedules are registered in the cron (Quartz) job scheduler.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "sources" : {
            "type" : "boolean",
            "description" : "Synchronize the \"sources\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "sensors" : {
            "type" : "boolean",
            "description" : "Synchronize the \"sensors\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "rules" : {
            "type" : "boolean",
            "description" : "Synchronize the \"rules\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "checks" : {
            "type" : "boolean",
            "description" : "Synchronize the \"checks\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "settings" : {
            "type" : "boolean",
            "description" : "Synchronize the \"settings\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "credentials" : {
            "type" : "boolean",
            "description" : "Synchronize the \".credentials\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "dataSensorReadouts" : {
            "type" : "boolean",
            "description" : "Synchronize the \".data/sensor_readouts\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "dataCheckResults" : {
            "type" : "boolean",
            "description" : "Synchronize the \".data/check_results\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "dataStatistics" : {
            "type" : "boolean",
            "description" : "Synchronize the \".data/statistics\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "dataErrors" : {
            "type" : "boolean",
            "description" : "Synchronize the \".data/errors\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "dataIncidents" : {
            "type" : "boolean",
            "description" : "Synchronize the \".data/incidents\" folder.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "synchronizeFolderWithLocalChanges" : {
            "type" : "boolean",
            "description" : "Synchronize all folders that have local changes. When this field is set to true, there is no need to enable synchronization of single folders because DQOps will decide which folders need synchronization (to be pushed to the cloud).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "direction" : {
              "type" : "string",
              "description" : "File synchronization direction, the default is full synchronization (push local changes and pull other changes from DQOps Cloud).",
              "enum" : [ "full", "download", "upload" ]
            },
            "forceRefreshNativeTables" : {
              "type" : "boolean",
              "description" : "Force full refresh of native tables in the data quality data warehouse. The default synchronization mode is to refresh only modified data."
            },
            "detectCronSchedules" : {
              "type" : "boolean",
              "description" : "Scans the yaml files (with the configuration for connections and tables) and detects new cron schedules. Detected cron schedules are registered in the cron (Quartz) job scheduler."
            },
            "sources" : {
              "type" : "boolean",
              "description" : "Synchronize the \"sources\" folder."
            },
            "sensors" : {
              "type" : "boolean",
              "description" : "Synchronize the \"sensors\" folder."
            },
            "rules" : {
              "type" : "boolean",
              "description" : "Synchronize the \"rules\" folder."
            },
            "checks" : {
              "type" : "boolean",
              "description" : "Synchronize the \"checks\" folder."
            },
            "settings" : {
              "type" : "boolean",
              "description" : "Synchronize the \"settings\" folder."
            },
            "credentials" : {
              "type" : "boolean",
              "description" : "Synchronize the \".credentials\" folder."
            },
            "dataSensorReadouts" : {
              "type" : "boolean",
              "description" : "Synchronize the \".data/sensor_readouts\" folder."
            },
            "dataCheckResults" : {
              "type" : "boolean",
              "description" : "Synchronize the \".data/check_results\" folder."
            },
            "dataStatistics" : {
              "type" : "boolean",
              "description" : "Synchronize the \".data/statistics\" folder."
            },
            "dataErrors" : {
              "type" : "boolean",
              "description" : "Synchronize the \".data/errors\" folder."
            },
            "dataIncidents" : {
              "type" : "boolean",
              "description" : "Synchronize the \".data/incidents\" folder."
            },
            "synchronizeFolderWithLocalChanges" : {
              "type" : "boolean",
              "description" : "Synchronize all folders that have local changes. When this field is set to true, there is no need to enable synchronization of single folders because DQOps will decide which folders need synchronization (to be pushed to the cloud)."
            }
          }
        }
      },
      "SynchronizeMultipleFoldersQueueJobResult" : {
        "type" : "object",
        "properties" : {
          "jobId" : {
            "$ref" : "#/components/schemas/DqoQueueJobId",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "status" : {
            "$ref" : "#/components/schemas/DqoJobStatus",
            "exampleSetFlag" : false
          }
        },
        "description" : "Object returned from the operation that queues a \"synchronize multiple folders\" job. The result contains the job id that was started and optionally can also contain the job finish status if the operation was started with wait=true parameter to wait for the \"synchronize multiple folders\" job to finish.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "description" : "Job id that identifies a job that was started on the DQOps job queue.",
              "$ref" : "#/components/schemas/DqoQueueJobId",
              "originalRef" : "#/components/schemas/DqoQueueJobId"
            },
            "status" : {
              "type" : "string",
              "description" : "Job status",
              "enum" : [ "queued", "running", "waiting", "succeeded", "failed", "cancel_requested", "cancelled" ]
            }
          },
          "description" : "Object returned from the operation that queues a \"synchronize multiple folders\" job. The result contains the job id that was started and optionally can also contain the job finish status if the operation was started with wait=true parameter to wait for the \"synchronize multiple folders\" job to finish."
        }
      },
      "SynchronizeRootFolderDqoQueueJobParameters" : {
        "type" : "object",
        "properties" : {
          "synchronizationParameter" : {
            "$ref" : "#/components/schemas/SynchronizeRootFolderParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "synchronizationParameter" : {
              "$ref" : "#/components/schemas/SynchronizeRootFolderParameters",
              "originalRef" : "#/components/schemas/SynchronizeRootFolderParameters"
            }
          }
        }
      },
      "SynchronizeRootFolderParameters" : {
        "type" : "object",
        "properties" : {
          "folder" : {
            "$ref" : "#/components/schemas/DqoRoot",
            "exampleSetFlag" : false
          },
          "direction" : {
            "$ref" : "#/components/schemas/FileSynchronizationDirection",
            "exampleSetFlag" : false
          },
          "forceRefreshNativeTable" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "folder" : {
              "type" : "string",
              "enum" : [ "data_sensor_readouts", "data_check_results", "data_statistics", "data_errors", "data_incidents", "sources", "sensors", "rules", "checks", "settings", "credentials", "_indexes", "_local_settings" ]
            },
            "direction" : {
              "type" : "string",
              "enum" : [ "full", "download", "upload" ]
            },
            "forceRefreshNativeTable" : {
              "type" : "boolean"
            }
          }
        }
      },
      "TableAccuracyDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_total_row_count_match_percent" : {
            "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_total_row_count_match_percent" : {
              "description" : "Verifies the total ow count of a tested table and compares it to a row count of a reference table. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "TableAccuracyMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_total_row_count_match_percent" : {
            "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_total_row_count_match_percent" : {
              "description" : "Verifies the total row count of a tested table and compares it to a row count of a reference table. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "TableAccuracyProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_total_row_count_match_percent" : {
            "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_total_row_count_match_percent" : {
              "description" : "Verifies that the total row count of the tested table matches the total row count of another (reference) table.",
              "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentCheckSpec"
            }
          }
        }
      },
      "TableAccuracyTotalRowCountMatchPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableAccuracyTotalRowCountMatchPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum percentage of difference of row count of a table column and of a row count of another table column that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "TableAccuracyTotalRowCountMatchPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "referenced_table" : {
            "type" : "string",
            "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "referenced_table" : {
              "type" : "string",
              "description" : "This field can be used to define the name of the table to be compared to. In order to define the name of the table, user should write correct name as a String."
            }
          }
        }
      },
      "TableAnomalyDifferencingRowCount30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "TableAnomalyDifferencingRowCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyDifferencingPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "TableAnomalyStationaryPartitionRowCount30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverage30DaysRule01ParametersSpec"
            }
          }
        }
      },
      "TableAnomalyStationaryPartitionRowCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule05ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec",
              "originalRef" : "#/components/schemas/AnomalyStationaryPercentileMovingAverageRule01ParametersSpec"
            }
          }
        }
      },
      "TableAvailabilityCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableAvailabilitySensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxFailuresRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxFailuresRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxFailuresRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Table availability sensor parameters",
              "$ref" : "#/components/schemas/TableAvailabilitySensorParametersSpec",
              "originalRef" : "#/components/schemas/TableAvailabilitySensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxFailuresRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxFailuresRule0ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MaxFailuresRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxFailuresRule5ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxFailuresRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxFailuresRule10ParametersSpec"
            }
          }
        }
      },
      "TableAvailabilityDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_table_availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_table_availability" : {
              "description" : "Verifies availability on table in database using simple row count. Stores the most recent table availability status for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityCheckSpec"
            }
          }
        }
      },
      "TableAvailabilityMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_table_availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_table_availability" : {
              "description" : "Verifies availability on table in database using simple row count. Stores the most recent table availability status for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityCheckSpec"
            }
          }
        }
      },
      "TableAvailabilityProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_table_availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_table_availability" : {
              "description" : "Verifies availability of the table in a database using a simple row count.",
              "$ref" : "#/components/schemas/TableAvailabilityCheckSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityCheckSpec"
            }
          }
        }
      },
      "TableAvailabilitySensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableChangeRowCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercentRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercentRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercentRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercentRule50ParametersSpec"
            }
          }
        }
      },
      "TableChangeRowCountSince30DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent30DaysRule50ParametersSpec"
            }
          }
        }
      },
      "TableChangeRowCountSince7DaysCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent7DaysRule50ParametersSpec"
            }
          }
        }
      },
      "TableChangeRowCountSinceYesterdayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Data quality check parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule10ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a set number of rows with negative value in a column that raises a data quality alert",
              "$ref" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule20ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec",
              "originalRef" : "#/components/schemas/ChangePercent1DayRule50ParametersSpec"
            }
          }
        }
      },
      "TableColumnCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableColumnListOrderedHashSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableColumnListUnorderedHashSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableColumnTypesHashSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableColumnsStatisticsModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "column_statistics" : {
            "type" : "array",
            "description" : "List of collected column level statistics for all columns.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ColumnStatisticsModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "collect_column_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that returns a summary of the column statistics (the basic profiling results) for a single table, showing statistics for all columns.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table" : {
              "description" : "Physical table name including the schema and table names.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "column_statistics" : {
              "type" : "array",
              "description" : "List of collected column level statistics for all columns.",
              "items" : {
                "$ref" : "#/components/schemas/ColumnStatisticsModel",
                "originalRef" : "#/components/schemas/ColumnStatisticsModel"
              }
            },
            "collect_column_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors for all columns on this table.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            }
          },
          "description" : "Model that returns a summary of the column statistics (the basic profiling results) for a single table, showing statistics for all columns."
        }
      },
      "TableComparisonColumnCountMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column count data quality sensor.",
              "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the column count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the column count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the column count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "TableComparisonColumnResultsModel" : {
        "type" : "object",
        "properties" : {
          "column_name" : {
            "type" : "string",
            "description" : "Column name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "column_comparison_results" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ComparisonCheckResultModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "The dictionary of comparison results between the tables for the specific column. The keys for the dictionary are check names. The values are summaries of the most recent comparison on this column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for the specific column. The keys for the dictionary are check names. The values are summaries of the most recent comparison on this column."
            }
          }
        },
        "description" : "The table comparison column results model with the information about the most recent table comparison relating to a single compared column.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "column_name" : {
              "type" : "string",
              "description" : "Column name"
            },
            "column_comparison_results" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for the specific column. The keys for the dictionary are check names. The values are summaries of the most recent comparison on this column.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ComparisonCheckResultModel",
                "originalRef" : "#/definitions/ComparisonCheckResultModel"
              }
            }
          },
          "description" : "The table comparison column results model with the information about the most recent table comparison relating to a single compared column."
        }
      },
      "TableComparisonConfigurationModel" : {
        "type" : "object",
        "properties" : {
          "table_comparison_configuration_name" : {
            "type" : "string",
            "description" : "The name of the table comparison configuration that is defined in the 'table_comparisons' node on the table specification.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compared_connection" : {
            "type" : "string",
            "description" : "Compared connection name - the connection name to the data source that is compared (verified).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compared_table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "reference_connection" : {
            "type" : "string",
            "description" : "Reference connection name - the connection name to the data source that has the reference data to compare to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "grouping_columns" : {
            "type" : "array",
            "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/TableComparisonGroupingColumnPairModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the table comparison.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_compare_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run comparison checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that contains the basic information about a table comparison configuration that specifies how the current table could be compared to another table that is a source of truth for comparison.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "table_comparison_configuration_name" : {
              "type" : "string",
              "description" : "The name of the table comparison configuration that is defined in the 'table_comparisons' node on the table specification."
            },
            "compared_connection" : {
              "type" : "string",
              "description" : "Compared connection name - the connection name to the data source that is compared (verified)."
            },
            "compared_table" : {
              "description" : "The schema and table name of the compared table that is verified.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "reference_connection" : {
              "type" : "string",
              "description" : "Reference connection name - the connection name to the data source that has the reference data to compare to."
            },
            "reference_table" : {
              "description" : "The schema and table name of the reference table that has the expected data.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "check_type" : {
              "type" : "string",
              "description" : "The type of checks (profiling, monitoring, partitioned) that this check comparison configuration is applicable. The default value is 'profiling'.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "time_scale" : {
              "type" : "string",
              "description" : "The time scale that this check comparison configuration is applicable. Supported values are 'daily' and 'monthly' for monitoring and partitioned checks or an empty value for profiling checks.",
              "enum" : [ "daily", "monthly" ]
            },
            "grouping_columns" : {
              "type" : "array",
              "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
              "items" : {
                "$ref" : "#/components/schemas/TableComparisonGroupingColumnPairModel",
                "originalRef" : "#/components/schemas/TableComparisonGroupingColumnPairModel"
              }
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the table comparison."
            },
            "can_run_compare_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run comparison checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Model that contains the basic information about a table comparison configuration that specifies how the current table could be compared to another table that is a source of truth for comparison."
        }
      },
      "TableComparisonConfigurationSpec" : {
        "type" : "object",
        "properties" : {
          "reference_table_connection_name" : {
            "type" : "string",
            "description" : "The name of the connection in DQOp where the reference table (the source of truth) is configured. When the connection name is not provided, DQOps will find the reference table on the connection of the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table_schema_name" : {
            "type" : "string",
            "description" : "The name of the schema where the reference table is imported into DQOps. The reference table's metadata must be imported into DQOps.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table_name" : {
            "type" : "string",
            "description" : "The name of the reference table that is imported into DQOps. The reference table's metadata must be imported into DQOps.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compared_table_filter" : {
            "type" : "string",
            "description" : "Optional custom SQL filter expression that is added to the SQL query that retrieves the data from the compared table. This expression must be a SQL expression that will be added to the WHERE clause when querying the compared table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table_filter" : {
            "type" : "string",
            "description" : "Optional custom SQL filter expression that is added to the SQL query that retrieves the data from the reference table (the source of truth). This expression must be a SQL expression that will be added to the WHERE clause when querying the reference table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "check_type" : {
            "$ref" : "#/components/schemas/CheckType",
            "exampleSetFlag" : false
          },
          "time_scale" : {
            "$ref" : "#/components/schemas/CheckTimeScale",
            "exampleSetFlag" : false
          },
          "grouping_columns" : {
            "type" : "array",
            "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/TableComparisonGroupingColumnsPairSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "reference_table_connection_name" : {
              "type" : "string",
              "description" : "The name of the connection in DQOp where the reference table (the source of truth) is configured. When the connection name is not provided, DQOps will find the reference table on the connection of the parent table."
            },
            "reference_table_schema_name" : {
              "type" : "string",
              "description" : "The name of the schema where the reference table is imported into DQOps. The reference table's metadata must be imported into DQOps."
            },
            "reference_table_name" : {
              "type" : "string",
              "description" : "The name of the reference table that is imported into DQOps. The reference table's metadata must be imported into DQOps."
            },
            "compared_table_filter" : {
              "type" : "string",
              "description" : "Optional custom SQL filter expression that is added to the SQL query that retrieves the data from the compared table. This expression must be a SQL expression that will be added to the WHERE clause when querying the compared table."
            },
            "reference_table_filter" : {
              "type" : "string",
              "description" : "Optional custom SQL filter expression that is added to the SQL query that retrieves the data from the reference table (the source of truth). This expression must be a SQL expression that will be added to the WHERE clause when querying the reference table."
            },
            "check_type" : {
              "type" : "string",
              "description" : "The type of checks (profiling, monitoring, partitioned) that this check comparison configuration is applicable. The default value is 'profiling'.",
              "enum" : [ "profiling", "monitoring", "partitioned" ]
            },
            "time_scale" : {
              "type" : "string",
              "description" : "The time scale that this check comparison configuration is applicable. Supported values are 'daily' and 'monthly' for monitoring and partitioned checks or an empty value for profiling checks.",
              "enum" : [ "daily", "monthly" ]
            },
            "grouping_columns" : {
              "type" : "array",
              "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
              "items" : {
                "$ref" : "#/components/schemas/TableComparisonGroupingColumnsPairSpec",
                "originalRef" : "#/components/schemas/TableComparisonGroupingColumnsPairSpec"
              }
            }
          }
        }
      },
      "TableComparisonDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_row_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_row_count_match" : {
              "description" : "Verifies that the row count of the tested (parent) table matches the row count of the reference table. Compares each group of data with a GROUP BY clause. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec"
            },
            "daily_column_count_match" : {
              "description" : "Verifies that the column count of the tested (parent) table matches the column count of the reference table. Only one comparison result is returned, without data grouping. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec"
            }
          }
        }
      },
      "TableComparisonDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_row_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_row_count_match" : {
              "description" : "Verifies that the row count of the tested (parent) table matches the row count of the reference table. Compares each group of data with a GROUP BY clause on the time period (the daily partition) and all other data grouping columns. Stores the most recent captured value for each daily partition that was analyzed.",
              "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec"
            }
          }
        }
      },
      "TableComparisonGroupingColumnPairModel" : {
        "type" : "object",
        "properties" : {
          "compared_table_column_name" : {
            "type" : "string",
            "description" : "The name of the column on the compared table (the parent table) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the reference table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table_column_name" : {
            "type" : "string",
            "description" : "The name of the column on the reference table (the source of truth) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the compared table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Model that identifies a pair of column names used for grouping the data on both the compared table and the reference table. The groups are then matched (joined) by DQOps to compare aggregated results.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "compared_table_column_name" : {
              "type" : "string",
              "description" : "The name of the column on the compared table (the parent table) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the reference table."
            },
            "reference_table_column_name" : {
              "type" : "string",
              "description" : "The name of the column on the reference table (the source of truth) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the compared table."
            }
          },
          "description" : "Model that identifies a pair of column names used for grouping the data on both the compared table and the reference table. The groups are then matched (joined) by DQOps to compare aggregated results."
        }
      },
      "TableComparisonGroupingColumnsPairSpec" : {
        "type" : "object",
        "properties" : {
          "compared_table_column_name" : {
            "type" : "string",
            "description" : "The name of the column on the compared table (the parent table) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the reference table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table_column_name" : {
            "type" : "string",
            "description" : "The name of the column on the reference table (the source of truth) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the compared table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "compared_table_column_name" : {
              "type" : "string",
              "description" : "The name of the column on the compared table (the parent table) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the reference table."
            },
            "reference_table_column_name" : {
              "type" : "string",
              "description" : "The name of the column on the reference table (the source of truth) that is used in the GROUP BY clause to group rows before compared aggregates (row counts, sums, etc.) are calculated. This column is also used to join (match) results to the compared table."
            }
          }
        }
      },
      "TableComparisonModel" : {
        "type" : "object",
        "properties" : {
          "table_comparison_configuration_name" : {
            "type" : "string",
            "description" : "The name of the table comparison configuration that is defined in the 'table_comparisons' node on the table specification.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compared_connection" : {
            "type" : "string",
            "description" : "Compared connection name - the connection name to the data source that is compared (verified).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "compared_table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "reference_connection" : {
            "type" : "string",
            "description" : "Reference connection name - the connection name to the data source that has the reference data to compare to.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "reference_table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "grouping_columns" : {
            "type" : "array",
            "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/TableComparisonGroupingColumnPairModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "default_compare_thresholds" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_row_count" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_column_count" : {
            "$ref" : "#/components/schemas/CompareThresholdsModel",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "supports_compare_column_count" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if this comparison type supports comparing the column count between tables. Partitioned table comparisons do not support comparing the column counts.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "columns" : {
            "type" : "array",
            "description" : "The list of compared columns, their matching reference column and the enabled comparisons.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/ColumnComparisonModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "compare_table_run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "compare_table_clean_data_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete the table comparison.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_compare_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run comparison checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that contains the all editable information about a table-to-table comparison defined on a compared table.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "table_comparison_configuration_name" : {
              "type" : "string",
              "description" : "The name of the table comparison configuration that is defined in the 'table_comparisons' node on the table specification."
            },
            "compared_connection" : {
              "type" : "string",
              "description" : "Compared connection name - the connection name to the data source that is compared (verified)."
            },
            "compared_table" : {
              "description" : "The schema and table name of the compared table that is verified.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "reference_connection" : {
              "type" : "string",
              "description" : "Reference connection name - the connection name to the data source that has the reference data to compare to."
            },
            "reference_table" : {
              "description" : "The schema and table name of the reference table that has the expected data.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "grouping_columns" : {
              "type" : "array",
              "description" : "List of column pairs from both the compared table and the reference table that are used in a GROUP BY clause  for grouping both the compared table and the reference table (the source of truth). The columns are used in the next of the table comparison to join the results of data groups (row counts, sums of columns) between the compared table and the reference table to compare the differences.",
              "items" : {
                "$ref" : "#/components/schemas/TableComparisonGroupingColumnPairModel",
                "originalRef" : "#/components/schemas/TableComparisonGroupingColumnPairModel"
              }
            },
            "default_compare_thresholds" : {
              "description" : "The template of the compare thresholds that should be applied to all comparisons when the comparison is enabled.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_row_count" : {
              "description" : "The row count comparison configuration.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "compare_column_count" : {
              "description" : "The column count comparison configuration.",
              "$ref" : "#/components/schemas/CompareThresholdsModel",
              "originalRef" : "#/components/schemas/CompareThresholdsModel"
            },
            "supports_compare_column_count" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if this comparison type supports comparing the column count between tables. Partitioned table comparisons do not support comparing the column counts."
            },
            "columns" : {
              "type" : "array",
              "description" : "The list of compared columns, their matching reference column and the enabled comparisons.",
              "items" : {
                "$ref" : "#/components/schemas/ColumnComparisonModel",
                "originalRef" : "#/components/schemas/ColumnComparisonModel"
              }
            },
            "compare_table_run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run the table comparison checks for this table, using checks selected in this model.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "compare_table_clean_data_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored check results for this table comparison.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete the table comparison."
            },
            "can_run_compare_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run comparison checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            }
          },
          "description" : "Model that contains the all editable information about a table-to-table comparison defined on a compared table."
        }
      },
      "TableComparisonMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_row_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_row_count_match" : {
              "description" : "Verifies that the row count of the tested (parent) table matches the row count of the reference table. Compares each group of data with a GROUP BY clause. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec"
            },
            "monthly_column_count_match" : {
              "description" : "Verifies that the column count of the tested (parent) table matches the column count of the reference table. Only one comparison result is returned, without data grouping. Stores the most recent captured value for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec"
            }
          }
        }
      },
      "TableComparisonMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_row_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_row_count_match" : {
              "description" : "Verifies that the row count of the tested (parent) table matches the row count of the reference table, for each monthly partition (grouping rows by the time period, truncated to the month). Compares each group of data with a GROUP BY clause. Stores the most recent captured value for each monthly partition and optionally data groups.",
              "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec"
            }
          }
        }
      },
      "TableComparisonProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_row_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_count_match" : {
            "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_row_count_match" : {
              "description" : "Verifies that the row count of the tested (parent) table matches the row count of the reference table. Compares each group of data with a GROUP BY clause.",
              "$ref" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonRowCountMatchCheckSpec"
            },
            "profile_column_count_match" : {
              "description" : "Verifies that the column count of the tested (parent) table matches the column count of the reference table. Only one comparison result is returned, without data grouping.",
              "$ref" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec",
              "originalRef" : "#/components/schemas/TableComparisonColumnCountMatchCheckSpec"
            }
          }
        }
      },
      "TableComparisonResultsModel" : {
        "type" : "object",
        "properties" : {
          "table_comparison_results" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ComparisonCheckResultModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "The dictionary of comparison results between the tables for table level comparisons (e.g. row count). The keys for the dictionary are the check names. The value in the dictionary is a summary information about the most recent comparison.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for table level comparisons (e.g. row count). The keys for the dictionary are the check names. The value in the dictionary is a summary information about the most recent comparison."
            }
          },
          "column_comparison_results" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonColumnResultsModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "The dictionary of comparison results between the tables for each compared column. The keys for the dictionary are the column names. The values are dictionaries of the data quality check names and their results.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for each compared column. The keys for the dictionary are the column names. The values are dictionaries of the data quality check names and their results."
            }
          }
        },
        "description" : "The table comparison results model with the summary information about the most recent table comparison that was performed.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "table_comparison_results" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for table level comparisons (e.g. row count). The keys for the dictionary are the check names. The value in the dictionary is a summary information about the most recent comparison.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ComparisonCheckResultModel",
                "originalRef" : "#/definitions/ComparisonCheckResultModel"
              }
            },
            "column_comparison_results" : {
              "type" : "object",
              "description" : "The dictionary of comparison results between the tables for each compared column. The keys for the dictionary are the column names. The values are dictionaries of the data quality check names and their results.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonColumnResultsModel",
                "originalRef" : "#/definitions/TableComparisonColumnResultsModel"
              }
            }
          },
          "description" : "The table comparison results model with the summary information about the most recent table comparison that was performed."
        }
      },
      "TableComparisonRowCountMatchCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Row count data quality sensor.",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Warning level threshold to raise a data quality incident with a warning severity level when the row count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule0ParametersSpec"
            },
            "error" : {
              "description" : "Error level threshold to raise a data quality incident with an error severity level when the row count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Fatal level threshold to raise a data quality incident with a fatal severity level when the row count in the parent table and the reference table do not match. The alert is generated for every compared group of rows (when data grouping is enabled).",
              "$ref" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDiffPercentRule5ParametersSpec"
            }
          }
        }
      },
      "TableCurrentDataQualityStatusModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "The connection name in DQOps.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "schema_name" : {
            "type" : "string",
            "description" : "The schema name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_name" : {
            "type" : "string",
            "description" : "The table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "highest_severity_level" : {
            "$ref" : "#/components/schemas/CheckResultStatus",
            "exampleSetFlag" : false
          },
          "last_check_executed_at" : {
            "type" : "integer",
            "description" : "The UTC timestamp when the most recent data quality check was executed on the table.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "executed_checks" : {
            "type" : "integer",
            "description" : "The total number of most recent checks that were executed on the table. Table comparison checks that are comparing groups of data are counted as the number of compared data groups.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "valid_results" : {
            "type" : "integer",
            "description" : "The number of most recent valid data quality checks that passed without raising any issues.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "warnings" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising a warning severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "errors" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising an error severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "fatals" : {
            "type" : "integer",
            "description" : "The number of most recent data quality checks that failed by raising a fatal severity data quality issue.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "execution_errors" : {
            "type" : "integer",
            "description" : "The number of data quality check execution errors that were reported due to access issues to the data source, invalid mapping in DQOps, invalid queries in data quality sensors or invalid python rules. When an execution error is reported, the configuration of a data quality check on a table must be updated.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CheckCurrentDataQualityStatusModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status."
            }
          },
          "columns" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnCurrentDataQualityStatusModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of data statues for all columns that have any known data quality results. The keys in the dictionary are the column names.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of data statues for all columns that have any known data quality results. The keys in the dictionary are the column names."
            }
          }
        },
        "description" : "The table's most recent data quality status. It is a summary of the results of the most recently executed data quality checks on the table. Verify the value of the highest_severity_level to see if there are any data quality issues on the table. The values of severity levels are: 0 - all data quality checks passed, 1 - a warning was detected, 2 - an error was detected, 3 - a fatal data quality issue was detected.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "The connection name in DQOps."
            },
            "schema_name" : {
              "type" : "string",
              "description" : "The schema name."
            },
            "table_name" : {
              "type" : "string",
              "description" : "The table name."
            },
            "highest_severity_level" : {
              "type" : "string",
              "description" : "The severity of the highest identified data quality issue. This field will be null if no data quality checks were executed on the table.",
              "enum" : [ "valid", "warning", "error", "fatal", "execution_error" ]
            },
            "last_check_executed_at" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "The UTC timestamp when the most recent data quality check was executed on the table."
            },
            "executed_checks" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The total number of most recent checks that were executed on the table. Table comparison checks that are comparing groups of data are counted as the number of compared data groups."
            },
            "valid_results" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent valid data quality checks that passed without raising any issues."
            },
            "warnings" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising a warning severity data quality issue."
            },
            "errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising an error severity data quality issue."
            },
            "fatals" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of most recent data quality checks that failed by raising a fatal severity data quality issue."
            },
            "execution_errors" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of data quality check execution errors that were reported due to access issues to the data source, invalid mapping in DQOps, invalid queries in data quality sensors or invalid python rules. When an execution error is reported, the configuration of a data quality check on a table must be updated."
            },
            "checks" : {
              "type" : "object",
              "description" : "The dictionary of statuses for data quality checks. The keys are data quality check names, the values are the current data quality check statuses that describe the most current status.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CheckCurrentDataQualityStatusModel",
                "originalRef" : "#/definitions/CheckCurrentDataQualityStatusModel"
              }
            },
            "columns" : {
              "type" : "object",
              "description" : "Dictionary of data statues for all columns that have any known data quality results. The keys in the dictionary are the column names.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnCurrentDataQualityStatusModel",
                "originalRef" : "#/definitions/ColumnCurrentDataQualityStatusModel"
              }
            }
          },
          "description" : "The table's most recent data quality status. It is a summary of the results of the most recently executed data quality checks on the table. Verify the value of the highest_severity_level to see if there are any data quality issues on the table. The values of severity levels are: 0 - all data quality checks passed, 1 - a warning was detected, 2 - an error was detected, 3 - a fatal data quality issue was detected."
        }
      },
      "TableDailyMonitoringCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timeliness" : {
            "$ref" : "#/components/schemas/TableTimelinessDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/TableAccuracyDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/TableSqlDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/TableSchemaDailyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonDailyMonitoringChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "volume" : {
              "description" : "Daily monitoring volume data quality checks",
              "$ref" : "#/components/schemas/TableVolumeDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableVolumeDailyMonitoringChecksSpec"
            },
            "timeliness" : {
              "description" : "Daily monitoring timeliness checks",
              "$ref" : "#/components/schemas/TableTimelinessDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableTimelinessDailyMonitoringChecksSpec"
            },
            "accuracy" : {
              "description" : "Daily monitoring accuracy checks",
              "$ref" : "#/components/schemas/TableAccuracyDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableAccuracyDailyMonitoringChecksSpec"
            },
            "sql" : {
              "description" : "Daily monitoring custom SQL checks",
              "$ref" : "#/components/schemas/TableSqlDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableSqlDailyMonitoringChecksSpec"
            },
            "availability" : {
              "description" : "Daily monitoring table availability checks",
              "$ref" : "#/components/schemas/TableAvailabilityDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityDailyMonitoringChecksSpec"
            },
            "schema" : {
              "description" : "Daily monitoring table schema checks",
              "$ref" : "#/components/schemas/TableSchemaDailyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableSchemaDailyMonitoringChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonDailyMonitoringChecksSpec",
                "originalRef" : "#/definitions/TableComparisonDailyMonitoringChecksSpec"
              }
            }
          }
        }
      },
      "TableDailyPartitionedCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timeliness" : {
            "$ref" : "#/components/schemas/TableTimelinessDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/TableSqlDailyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonDailyPartitionedChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "volume" : {
              "description" : "Volume daily partitioned data quality checks that verify the quality of every day of data separately",
              "$ref" : "#/components/schemas/TableVolumeDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableVolumeDailyPartitionedChecksSpec"
            },
            "timeliness" : {
              "description" : "Daily partitioned timeliness checks",
              "$ref" : "#/components/schemas/TableTimelinessDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableTimelinessDailyPartitionedChecksSpec"
            },
            "sql" : {
              "description" : "Custom SQL daily partitioned data quality checks that verify the quality of every day of data separately",
              "$ref" : "#/components/schemas/TableSqlDailyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableSqlDailyPartitionedChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonDailyPartitionedChecksSpec",
                "originalRef" : "#/definitions/TableComparisonDailyPartitionedChecksSpec"
              }
            }
          }
        }
      },
      "TableDataFreshnessCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableTimelinessDataFreshnessSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Max days since most recent event sensor parameters",
              "$ref" : "#/components/schemas/TableTimelinessDataFreshnessSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableTimelinessDataFreshnessSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for max days since most recent event that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule7ParametersSpec"
            }
          }
        }
      },
      "TableDataIngestionDelayCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableTimelinessDataIngestionDelaySensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Max number of days between event and ingestion sensor parameters",
              "$ref" : "#/components/schemas/TableTimelinessDataIngestionDelaySensorParametersSpec",
              "originalRef" : "#/components/schemas/TableTimelinessDataIngestionDelaySensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a max number of days between event and ingestion check that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule7ParametersSpec"
            }
          }
        }
      },
      "TableDataStalenessCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableTimelinessDataStalenessSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Min number of days between event and ingestion sensor parameters",
              "$ref" : "#/components/schemas/TableTimelinessDataStalenessSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableTimelinessDataStalenessSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a min number of days between event and ingestion check that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule7ParametersSpec"
            }
          }
        }
      },
      "TableIncidentGroupingSpec" : {
        "type" : "object",
        "properties" : {
          "grouping_level" : {
            "$ref" : "#/components/schemas/IncidentGroupingLevel",
            "exampleSetFlag" : false
          },
          "minimum_severity" : {
            "$ref" : "#/components/schemas/MinimumGroupingSeverityLevel",
            "exampleSetFlag" : false
          },
          "divide_by_data_group" : {
            "type" : "boolean",
            "description" : "Create separate data quality incidents for each data group, creating different incidents for different groups of rows. By default, data groups are ignored for grouping data quality issues into data quality incidents.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables data quality incident creation for failed data quality checks on the table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "grouping_level" : {
              "type" : "string",
              "description" : "Grouping level of failed data quality checks for creating higher level data quality incidents. The default grouping level is by a table, a data quality dimension and a check category (i.e. a datatype data quality incident detected on a table X in the numeric checks category).",
              "enum" : [ "table", "table_dimension", "table_dimension_category", "table_dimension_category_type", "table_dimension_category_name" ]
            },
            "minimum_severity" : {
              "type" : "string",
              "description" : "Minimum severity level of data quality issues that are grouped into incidents. The default minimum severity level is 'warning'. Other supported severity levels are 'error' and 'fatal'.",
              "enum" : [ "warning", "error", "fatal" ]
            },
            "divide_by_data_group" : {
              "type" : "boolean",
              "description" : "Create separate data quality incidents for each data group, creating different incidents for different groups of rows. By default, data groups are ignored for grouping data quality issues into data quality incidents."
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables data quality incident creation for failed data quality checks on the table."
            }
          }
        }
      },
      "TableListModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_hash" : {
            "type" : "integer",
            "description" : "Table hash that identifies the table using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "target" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables all data quality checks on the table. Data quality checks will not be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "stage" : {
            "type" : "string",
            "description" : "Stage name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor queries.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "priority" : {
            "type" : "integer",
            "description" : "Table priority (1, 2, 3, 4, ...). The tables could be assigned a priority level. The table priority is copied into each data quality check result and a sensor result, enabling efficient grouping of more and less important tables during a data quality improvement project, when the data quality issues on higher priority tables are fixed before data quality issues on less important tables.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "owner" : {
            "$ref" : "#/components/schemas/TableOwnerSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profiling_checks_result_truncation" : {
            "$ref" : "#/components/schemas/ProfilingTimePeriod",
            "exampleSetFlag" : false
          },
          "has_any_configured_checks" : {
            "type" : "boolean",
            "description" : "True when the table has any checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_profiling_checks" : {
            "type" : "boolean",
            "description" : "True when the table has any profiling checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_monitoring_checks" : {
            "type" : "boolean",
            "description" : "True when the table has any monitoring checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "has_any_configured_partition_checks" : {
            "type" : "boolean",
            "description" : "True when the table has any partition checks configured.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "partitioning_configuration_missing" : {
            "type" : "boolean",
            "description" : "True when the table has missing configuration of the \"partition_by_column\" column, making any partition checks fail when executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "run_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_profiling_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_monitoring_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "run_partition_checks_job_template" : {
            "$ref" : "#/components/schemas/CheckSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collect_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "data_clean_job_template" : {
            "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_run_checks" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can run checks.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "can_delete_data" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can delete data (results).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Table list model with a subset of parameters, excluding all nested objects.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Table hash that identifies the table using a unique hash code."
            },
            "target" : {
              "description" : "Physical table details (a physical schema name and a physical table name).",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables all data quality checks on the table. Data quality checks will not be executed."
            },
            "stage" : {
              "type" : "string",
              "description" : "Stage name."
            },
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor queries."
            },
            "priority" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Table priority (1, 2, 3, 4, ...). The tables could be assigned a priority level. The table priority is copied into each data quality check result and a sensor result, enabling efficient grouping of more and less important tables during a data quality improvement project, when the data quality issues on higher priority tables are fixed before data quality issues on less important tables."
            },
            "owner" : {
              "description" : "Table owner information like the data steward name or the business application name.",
              "$ref" : "#/components/schemas/TableOwnerSpec",
              "originalRef" : "#/components/schemas/TableOwnerSpec"
            },
            "profiling_checks_result_truncation" : {
              "type" : "string",
              "description" : "Defines how many profiling checks results are stored for the table monthly. By default, DQOps will use the 'one_per_month' configuration and store only the most recent profiling checks result executed during the month. By changing this value, it is possible to store one value per day or even store all profiling checks results.",
              "enum" : [ "one_per_month", "one_per_week", "one_per_day", "one_per_hour", "all_results" ]
            },
            "has_any_configured_checks" : {
              "type" : "boolean",
              "description" : "True when the table has any checks configured."
            },
            "has_any_configured_profiling_checks" : {
              "type" : "boolean",
              "description" : "True when the table has any profiling checks configured."
            },
            "has_any_configured_monitoring_checks" : {
              "type" : "boolean",
              "description" : "True when the table has any monitoring checks configured."
            },
            "has_any_configured_partition_checks" : {
              "type" : "boolean",
              "description" : "True when the table has any partition checks configured."
            },
            "partitioning_configuration_missing" : {
              "type" : "boolean",
              "description" : "True when the table has missing configuration of the \"partition_by_column\" column, making any partition checks fail when executed."
            },
            "run_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run all checks within this table.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_profiling_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run profiling checks within this table.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_monitoring_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run monitoring checks within this table.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "run_partition_checks_job_template" : {
              "description" : "Configured parameters for the \"check run\" job that should be pushed to the job queue in order to run partition partitioned checks within this table.",
              "$ref" : "#/components/schemas/CheckSearchFilters",
              "originalRef" : "#/components/schemas/CheckSearchFilters"
            },
            "collect_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors within this table.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "data_clean_job_template" : {
              "description" : "Configured parameters for the \"data clean\" job that after being supplied with a time range should be pushed to the job queue in order to remove stored results connected with this table.",
              "$ref" : "#/components/schemas/DeleteStoredDataQueueJobParameters",
              "originalRef" : "#/components/schemas/DeleteStoredDataQueueJobParameters"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            },
            "can_run_checks" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can run checks."
            },
            "can_delete_data" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can delete data (results)."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Table list model with a subset of parameters, excluding all nested objects."
        }
      },
      "TableModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table_hash" : {
            "type" : "integer",
            "description" : "Table hash that identifies the table using a unique hash code.",
            "format" : "int64",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "spec" : {
            "$ref" : "#/components/schemas/TableSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "yaml_parsing_error" : {
            "type" : "string",
            "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Full table model, including all nested objects like columns or checks.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table_hash" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Table hash that identifies the table using a unique hash code."
            },
            "spec" : {
              "description" : "Full table specification including all nested information, the table name is inside the 'target' property.",
              "$ref" : "#/components/schemas/TableSpec",
              "originalRef" : "#/components/schemas/TableSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            },
            "yaml_parsing_error" : {
              "type" : "string",
              "description" : "Optional parsing error that was captured when parsing the YAML file. This field is null when the YAML file is valid. If an error was captured, this field returns the file parsing error message and the file location."
            }
          },
          "description" : "Full table model, including all nested objects like columns or checks."
        }
      },
      "TableMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "$ref" : "#/components/schemas/TableDailyMonitoringCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly" : {
            "$ref" : "#/components/schemas/TableMonthlyMonitoringCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily" : {
              "description" : "Configuration of daily monitoring evaluated at a table level.",
              "$ref" : "#/components/schemas/TableDailyMonitoringCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/TableDailyMonitoringCheckCategoriesSpec"
            },
            "monthly" : {
              "description" : "Configuration of monthly monitoring evaluated at a table level.",
              "$ref" : "#/components/schemas/TableMonthlyMonitoringCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/TableMonthlyMonitoringCheckCategoriesSpec"
            }
          }
        }
      },
      "TableMonthlyMonitoringCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timeliness" : {
            "$ref" : "#/components/schemas/TableTimelinessMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/TableAccuracyMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/TableSqlMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/TableSchemaMonthlyMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonMonthlyMonitoringChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "volume" : {
              "description" : "Monthly monitoring of volume data quality checks",
              "$ref" : "#/components/schemas/TableVolumeMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableVolumeMonthlyMonitoringChecksSpec"
            },
            "timeliness" : {
              "description" : "Monthly monitoring of timeliness checks",
              "$ref" : "#/components/schemas/TableTimelinessMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableTimelinessMonthlyMonitoringChecksSpec"
            },
            "accuracy" : {
              "description" : "Monthly monitoring accuracy checks",
              "$ref" : "#/components/schemas/TableAccuracyMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableAccuracyMonthlyMonitoringChecksSpec"
            },
            "sql" : {
              "description" : "Monthly monitoring of custom SQL checks",
              "$ref" : "#/components/schemas/TableSqlMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableSqlMonthlyMonitoringChecksSpec"
            },
            "availability" : {
              "description" : "Daily partitioned availability checks",
              "$ref" : "#/components/schemas/TableAvailabilityMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityMonthlyMonitoringChecksSpec"
            },
            "schema" : {
              "description" : "Monthly monitoring table schema checks",
              "$ref" : "#/components/schemas/TableSchemaMonthlyMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableSchemaMonthlyMonitoringChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonMonthlyMonitoringChecksSpec",
                "originalRef" : "#/definitions/TableComparisonMonthlyMonitoringChecksSpec"
              }
            }
          }
        }
      },
      "TableMonthlyPartitionedCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timeliness" : {
            "$ref" : "#/components/schemas/TableTimelinessMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/TableSqlMonthlyPartitionedChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonMonthlyPartitionedChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "volume" : {
              "description" : "Volume monthly partitioned data quality checks that verify the quality of every month of data separately",
              "$ref" : "#/components/schemas/TableVolumeMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableVolumeMonthlyPartitionedChecksSpec"
            },
            "timeliness" : {
              "description" : "Monthly partitioned timeliness checks",
              "$ref" : "#/components/schemas/TableTimelinessMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableTimelinessMonthlyPartitionedChecksSpec"
            },
            "sql" : {
              "description" : "Custom SQL monthly partitioned data quality checks that verify the quality of every month of data separately",
              "$ref" : "#/components/schemas/TableSqlMonthlyPartitionedChecksSpec",
              "originalRef" : "#/components/schemas/TableSqlMonthlyPartitionedChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonMonthlyPartitionedChecksSpec",
                "originalRef" : "#/definitions/TableComparisonMonthlyPartitionedChecksSpec"
              }
            }
          }
        }
      },
      "TableOwnerSpec" : {
        "type" : "object",
        "properties" : {
          "data_steward" : {
            "type" : "string",
            "description" : "Data steward name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "application" : {
            "type" : "string",
            "description" : "Business application name",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "data_steward" : {
              "type" : "string",
              "description" : "Data steward name"
            },
            "application" : {
              "type" : "string",
              "description" : "Business application name"
            }
          }
        }
      },
      "TablePartitionReloadLagCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableTimelinessPartitionReloadLagSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Partition reload lag sensor parameters",
              "$ref" : "#/components/schemas/TableTimelinessPartitionReloadLagSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableTimelinessPartitionReloadLagSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MaxDaysRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule1ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for partition reload lag that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MaxDaysRule2ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule2ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MaxDaysRule7ParametersSpec",
              "originalRef" : "#/components/schemas/MaxDaysRule7ParametersSpec"
            }
          }
        }
      },
      "TablePartitionedChecksRootSpec" : {
        "type" : "object",
        "properties" : {
          "daily" : {
            "$ref" : "#/components/schemas/TableDailyPartitionedCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly" : {
            "$ref" : "#/components/schemas/TableMonthlyPartitionedCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily" : {
              "description" : "Configuration of day partitioned data quality checks evaluated at a table level.",
              "$ref" : "#/components/schemas/TableDailyPartitionedCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/TableDailyPartitionedCheckCategoriesSpec"
            },
            "monthly" : {
              "description" : "Configuration of monthly partitioned data quality checks evaluated at a table level..",
              "$ref" : "#/components/schemas/TableMonthlyPartitionedCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/TableMonthlyPartitionedCheckCategoriesSpec"
            }
          }
        }
      },
      "TablePartitioningModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "target" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timestamp_columns" : {
            "$ref" : "#/components/schemas/TimestampColumnsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "incremental_time_window" : {
            "$ref" : "#/components/schemas/PartitionIncrementalTimeWindowSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_edit" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can update or delete this object.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Table model with objects that describe the table partitioning.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "target" : {
              "description" : "Physical table details (a physical schema name and a physical table name)",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "timestamp_columns" : {
              "description" : "Column names that store the timestamps that identify the event (transaction) timestamp and the ingestion (inserted / loaded at) timestamps. Also configures the timestamp source for the date/time partitioned data quality checks (event timestamp or ingestion timestamp).",
              "$ref" : "#/components/schemas/TimestampColumnsSpec",
              "originalRef" : "#/components/schemas/TimestampColumnsSpec"
            },
            "incremental_time_window" : {
              "description" : "Configuration of time windows for executing partition checks incrementally, configures the number of recent days to analyze for daily partitioned tables or the number of recent months for monthly partitioned data.",
              "$ref" : "#/components/schemas/PartitionIncrementalTimeWindowSpec",
              "originalRef" : "#/components/schemas/PartitionIncrementalTimeWindowSpec"
            },
            "can_edit" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can update or delete this object."
            }
          },
          "description" : "Table model with objects that describe the table partitioning."
        }
      },
      "TableProfilingCheckCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of custom checks. The keys are check names within this category.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category."
            }
          },
          "result_truncation" : {
            "$ref" : "#/components/schemas/ProfilingTimePeriod",
            "exampleSetFlag" : false
          },
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "timeliness" : {
            "$ref" : "#/components/schemas/TableTimelinessProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "accuracy" : {
            "$ref" : "#/components/schemas/TableAccuracyProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "sql" : {
            "$ref" : "#/components/schemas/TableSqlProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "availability" : {
            "$ref" : "#/components/schemas/TableAvailabilityProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/TableSchemaProfilingChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonProfilingChecksSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table."
            }
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom" : {
              "type" : "object",
              "description" : "Dictionary of custom checks. The keys are check names within this category.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "result_truncation" : {
              "type" : "string",
              "description" : "Defines how many profiling checks results are stored for the table monthly. By default, DQOps will use the 'one_per_month' configuration and store only the most recent profiling checks result executed during the month. By changing this value, it is possible to store one value per day or even store all profiling checks results.",
              "enum" : [ "one_per_month", "one_per_week", "one_per_day", "one_per_hour", "all_results" ]
            },
            "volume" : {
              "description" : "Configuration of volume data quality checks on a table level.",
              "$ref" : "#/components/schemas/TableVolumeProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableVolumeProfilingChecksSpec"
            },
            "timeliness" : {
              "description" : "Configuration of timeliness checks on a table level. Timeliness checks detect anomalies like rapid row count changes.",
              "$ref" : "#/components/schemas/TableTimelinessProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableTimelinessProfilingChecksSpec"
            },
            "accuracy" : {
              "description" : "Configuration of accuracy checks on a table level. Accuracy checks compare the tested table with another reference table.",
              "$ref" : "#/components/schemas/TableAccuracyProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableAccuracyProfilingChecksSpec"
            },
            "sql" : {
              "description" : "Configuration of data quality checks that are evaluating custom SQL conditions and aggregated expressions.",
              "$ref" : "#/components/schemas/TableSqlProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableSqlProfilingChecksSpec"
            },
            "availability" : {
              "description" : "Configuration of the table availability data quality checks on a table level.",
              "$ref" : "#/components/schemas/TableAvailabilityProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableAvailabilityProfilingChecksSpec"
            },
            "schema" : {
              "description" : "Configuration of schema (column count and schema) data quality checks on a table level.",
              "$ref" : "#/components/schemas/TableSchemaProfilingChecksSpec",
              "originalRef" : "#/components/schemas/TableSchemaProfilingChecksSpec"
            },
            "comparisons" : {
              "type" : "object",
              "description" : "Dictionary of configuration of checks for table comparisons. The key that identifies each comparison must match the name of a data comparison that is configured on the parent table.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonProfilingChecksSpec",
                "originalRef" : "#/definitions/TableComparisonProfilingChecksSpec"
              }
            }
          }
        }
      },
      "TableRowCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinCountRule1ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Row count sensor parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/MinCountRuleWarningParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleWarningParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/MinCountRule1ParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRule1ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/MinCountRuleFatalParametersSpec",
              "originalRef" : "#/components/schemas/MinCountRuleFatalParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnCountChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column count sensor parameters",
              "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column count sensor parameters",
              "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsIntegerRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsIntegerRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/EqualsIntegerRuleParametersSpec",
              "originalRef" : "#/components/schemas/EqualsIntegerRuleParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/TableColumnCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnCountSensorParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnListChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnListUnorderedHashSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column list hash sensor parameters",
              "$ref" : "#/components/schemas/TableColumnListUnorderedHashSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnListUnorderedHashSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnListOrOrderChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnListOrderedHashSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column list and order sensor parameters",
              "$ref" : "#/components/schemas/TableColumnListOrderedHashSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnListOrderedHashSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "TableSchemaColumnTypesChangedCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableColumnTypesHashSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/ValueChangedParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Column list and types sensor parameters",
              "$ref" : "#/components/schemas/TableColumnTypesHashSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableColumnTypesHashSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning that is considered as a passed data quality check",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a row count that raises a data quality error (alert)",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue which indicates a serious data quality problem",
              "$ref" : "#/components/schemas/ValueChangedParametersSpec",
              "originalRef" : "#/components/schemas/ValueChangedParametersSpec"
            }
          }
        }
      },
      "TableSchemaDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_column_count" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_count_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_list_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_list_or_order_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_column_types_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_column_count" : {
              "description" : "Detects if the number of column matches an expected number. Retrieves the metadata of the monitored table, counts the number of columns and compares it to an expected value (an expected number of columns). Stores the most recent column count for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountCheckSpec"
            },
            "daily_column_count_changed" : {
              "description" : "Detects if the count of columns has changed since the most recent day. Retrieves the metadata of the monitored table, counts the number of columns and compares it the last known column count that was captured when this data quality check was executed the last time. Stores the most recent column count for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec"
            },
            "daily_column_list_changed" : {
              "description" : "Detects if new columns were added or existing columns were removed since the most recent day. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns.",
              "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec"
            },
            "daily_column_list_or_order_changed" : {
              "description" : "Detects if new columns were added, existing columns were removed or the columns were reordered since the most recent day. Retrieves the metadata of the monitored table and calculates an ordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns or their order.",
              "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec"
            },
            "daily_column_types_changed" : {
              "description" : "Detects if new columns were added, removed or their data types have changed since the most recent day. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names and the data types (including the length, scale, precision, nullability). Compares the current hash to the previously known hash to detect any changes to the list of columns or their types.",
              "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec"
            }
          }
        }
      },
      "TableSchemaMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_column_count" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_count_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_list_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_list_or_order_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_column_types_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_column_count" : {
              "description" : "Detects if the number of column matches an expected number. Retrieves the metadata of the monitored table, counts the number of columns and compares it to an expected value (an expected number of columns). Stores the most recent column count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountCheckSpec"
            },
            "monthly_column_count_changed" : {
              "description" : "Detects if the count of columns has changed since the last month. Retrieves the metadata of the monitored table, counts the number of columns and compares it the last known column count that was captured when this data quality check was executed the last time. Stores the most recent column count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec"
            },
            "monthly_column_list_changed" : {
              "description" : "Detects if new columns were added or existing columns were removed since the last month. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns.",
              "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec"
            },
            "monthly_column_list_or_order_changed" : {
              "description" : "Detects if new columns were added, existing columns were removed or the columns were reordered since the last month. Retrieves the metadata of the monitored table and calculates an ordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns or their order.",
              "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec"
            },
            "monthly_column_types_changed" : {
              "description" : "Detects if new columns were added, removed or their data types have changed since the last month. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names and the data types (including the length, scale, precision, nullability). Compares the current hash to the previously known hash to detect any changes to the list of columns or their types.",
              "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec"
            }
          }
        }
      },
      "TableSchemaProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_column_count" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_count_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_list_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_list_or_order_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_column_types_changed" : {
            "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_column_count" : {
              "description" : "Detects if the number of column matches an expected number. Retrieves the metadata of the monitored table, counts the number of columns and compares it to an expected value (an expected number of columns).",
              "$ref" : "#/components/schemas/TableSchemaColumnCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountCheckSpec"
            },
            "profile_column_count_changed" : {
              "description" : "Detects if the count of columns has changed. Retrieves the metadata of the monitored table, counts the number of columns and compares it the last known column count that was captured when this data quality check was executed the last time.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountChangedCheckSpec"
            },
            "profile_column_list_changed" : {
              "description" : "Detects if new columns were added or existing columns were removed. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns.",
              "$ref" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListChangedCheckSpec"
            },
            "profile_column_list_or_order_changed" : {
              "description" : "Detects if new columns were added, existing columns were removed or the columns were reordered. Retrieves the metadata of the monitored table and calculates an ordered hash of the column names. Compares the current hash to the previously known hash to detect any changes to the list of columns or their order.",
              "$ref" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnListOrOrderChangedCheckSpec"
            },
            "profile_column_types_changed" : {
              "description" : "Detects if new columns were added, removed or their data types have changed. Retrieves the metadata of the monitored table and calculates an unordered hash of the column names and the data types (including the length, scale, precision, nullability). Compares the current hash to the previously known hash to detect any changes to the list of columns or their types.",
              "$ref" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnTypesChangedCheckSpec"
            }
          }
        }
      },
      "TableSchemaStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "column_count" : {
            "$ref" : "#/components/schemas/TableSchemaColumnCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "column_count" : {
              "description" : "Configuration of the column count profiler.",
              "$ref" : "#/components/schemas/TableSchemaColumnCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/TableSchemaColumnCountStatisticsCollectorSpec"
            }
          }
        }
      },
      "TableSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables all data quality checks on the table. Data quality checks will not be executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "stage" : {
            "type" : "string",
            "description" : "Stage name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "priority" : {
            "type" : "integer",
            "description" : "Table priority (1, 2, 3, 4, ...). The tables could be assigned a priority level. The table priority is copied into each data quality check result and a sensor result, enabling efficient grouping of more and less important tables during a data quality improvement project, when the data quality issues on higher priority tables are fixed before data quality issues on less important tables.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor queries. Use replacement tokens {table} to replace the content with the full table name, {alias} to replace the content with the table alias of an analyzed table or {column} to replace the content with the analyzed column name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "timestamp_columns" : {
            "$ref" : "#/components/schemas/TimestampColumnsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "incremental_time_window" : {
            "$ref" : "#/components/schemas/PartitionIncrementalTimeWindowSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "default_grouping_name" : {
            "type" : "string",
            "description" : "The name of the default data grouping configuration that is applied on data quality checks. When a default data grouping is selected, all data quality checks run SQL queries with a GROUP BY clause, calculating separate data quality checks for each group of data. The data groupings are defined in the 'groupings' dictionary (indexed by the data grouping name).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "groupings" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/DataGroupingConfigurationSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Data grouping configurations list. Data grouping configurations are configured in two cases: (1) the data in the table should be analyzed with a GROUP BY condition, to analyze different datasets using separate time series, for example a table contains data from multiple countries and there is a 'country' column used for partitioning. (2) a tag is assigned to a table (within a data grouping level hierarchy), when the data is segmented at a table level (similar tables store the same information, but for different countries, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Data grouping configurations list. Data grouping configurations are configured in two cases: (1) the data in the table should be analyzed with a GROUP BY condition, to analyze different datasets using separate time series, for example a table contains data from multiple countries and there is a 'country' column used for partitioning. (2) a tag is assigned to a table (within a data grouping level hierarchy), when the data is segmented at a table level (similar tables store the same information, but for different countries, etc.)."
            }
          },
          "table_comparisons" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TableComparisonConfigurationSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of data comparison configurations. Data comparison configurations are used for cross data-source comparisons to compare this table (called the compared table) with other reference tables (the source of truth). The reference table's metadata must be imported into DQOps, but the reference table could be located on a different data source. DQOps will compare metrics calculated for groups of rows (using a GROUP BY clause). For each comparison, the user must specify a name of a data grouping. The number of data grouping dimensions on the parent table and the reference table defined in selected data grouping configurations must match. DQOps will run the same data quality sensors on both the parent table (tested table) and the reference table (the source of truth), comparing the measures (sensor readouts) captured from both the tables.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of data comparison configurations. Data comparison configurations are used for cross data-source comparisons to compare this table (called the compared table) with other reference tables (the source of truth). The reference table's metadata must be imported into DQOps, but the reference table could be located on a different data source. DQOps will compare metrics calculated for groups of rows (using a GROUP BY clause). For each comparison, the user must specify a name of a data grouping. The number of data grouping dimensions on the parent table and the reference table defined in selected data grouping configurations must match. DQOps will run the same data quality sensors on both the parent table (tested table) and the reference table (the source of truth), comparing the measures (sensor readouts) captured from both the tables."
            }
          },
          "incident_grouping" : {
            "$ref" : "#/components/schemas/TableIncidentGroupingSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "owner" : {
            "$ref" : "#/components/schemas/TableOwnerSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profiling_checks" : {
            "$ref" : "#/components/schemas/TableProfilingCheckCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monitoring_checks" : {
            "$ref" : "#/components/schemas/TableMonitoringChecksSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "partitioned_checks" : {
            "$ref" : "#/components/schemas/TablePartitionedChecksRootSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statistics" : {
            "$ref" : "#/components/schemas/TableStatisticsCollectorsRootCategoriesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schedules_override" : {
            "$ref" : "#/components/schemas/DefaultSchedulesSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "columns" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ColumnSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of columns, indexed by a physical column name. Column specification contains the expected column data type and a list of column level data quality checks that are enabled for a column.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of columns, indexed by a physical column name. Column specification contains the expected column data type and a list of column level data quality checks that are enabled for a column."
            }
          },
          "labels" : {
            "type" : "array",
            "description" : "Custom labels that were assigned to the table. Labels are used for searching for tables when filtered data quality checks are executed.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "type" : "string",
              "extensions" : { },
              "exampleSetFlag" : false,
              "types" : [ "string" ]
            },
            "types" : [ "array" ]
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments used for change tracking and documenting changes directly in the table data quality specification file.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables all data quality checks on the table. Data quality checks will not be executed."
            },
            "stage" : {
              "type" : "string",
              "description" : "Stage name."
            },
            "priority" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "Table priority (1, 2, 3, 4, ...). The tables could be assigned a priority level. The table priority is copied into each data quality check result and a sensor result, enabling efficient grouping of more and less important tables during a data quality improvement project, when the data quality issues on higher priority tables are fixed before data quality issues on less important tables."
            },
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor queries. Use replacement tokens {table} to replace the content with the full table name, {alias} to replace the content with the table alias of an analyzed table or {column} to replace the content with the analyzed column name."
            },
            "timestamp_columns" : {
              "description" : "Column names that store the timestamps that identify the event (transaction) timestamp and the ingestion (inserted / loaded at) timestamps. Also configures the timestamp source for the date/time partitioned data quality checks (event timestamp or ingestion timestamp).",
              "$ref" : "#/components/schemas/TimestampColumnsSpec",
              "originalRef" : "#/components/schemas/TimestampColumnsSpec"
            },
            "incremental_time_window" : {
              "description" : "Configuration of the time window for analyzing daily or monthly partitions. Specifies the number of recent days and recent months that are analyzed when the partitioned data quality checks are run in an incremental mode (the default mode).",
              "$ref" : "#/components/schemas/PartitionIncrementalTimeWindowSpec",
              "originalRef" : "#/components/schemas/PartitionIncrementalTimeWindowSpec"
            },
            "default_grouping_name" : {
              "type" : "string",
              "description" : "The name of the default data grouping configuration that is applied on data quality checks. When a default data grouping is selected, all data quality checks run SQL queries with a GROUP BY clause, calculating separate data quality checks for each group of data. The data groupings are defined in the 'groupings' dictionary (indexed by the data grouping name)."
            },
            "groupings" : {
              "type" : "object",
              "description" : "Data grouping configurations list. Data grouping configurations are configured in two cases: (1) the data in the table should be analyzed with a GROUP BY condition, to analyze different datasets using separate time series, for example a table contains data from multiple countries and there is a 'country' column used for partitioning. (2) a tag is assigned to a table (within a data grouping level hierarchy), when the data is segmented at a table level (similar tables store the same information, but for different countries, etc.).",
              "additionalProperties" : {
                "$ref" : "#/definitions/DataGroupingConfigurationSpec",
                "originalRef" : "#/definitions/DataGroupingConfigurationSpec"
              }
            },
            "table_comparisons" : {
              "type" : "object",
              "description" : "Dictionary of data comparison configurations. Data comparison configurations are used for cross data-source comparisons to compare this table (called the compared table) with other reference tables (the source of truth). The reference table's metadata must be imported into DQOps, but the reference table could be located on a different data source. DQOps will compare metrics calculated for groups of rows (using a GROUP BY clause). For each comparison, the user must specify a name of a data grouping. The number of data grouping dimensions on the parent table and the reference table defined in selected data grouping configurations must match. DQOps will run the same data quality sensors on both the parent table (tested table) and the reference table (the source of truth), comparing the measures (sensor readouts) captured from both the tables.",
              "additionalProperties" : {
                "$ref" : "#/definitions/TableComparisonConfigurationSpec",
                "originalRef" : "#/definitions/TableComparisonConfigurationSpec"
              }
            },
            "incident_grouping" : {
              "description" : "Incident grouping configuration with the overridden configuration at a table level. The field value in this object that are configured will override the default configuration from the connection level. The incident grouping level could be changed or incident creation could be disabled.",
              "$ref" : "#/components/schemas/TableIncidentGroupingSpec",
              "originalRef" : "#/components/schemas/TableIncidentGroupingSpec"
            },
            "owner" : {
              "description" : "Table owner information like the data steward name or the business application name.",
              "$ref" : "#/components/schemas/TableOwnerSpec",
              "originalRef" : "#/components/schemas/TableOwnerSpec"
            },
            "profiling_checks" : {
              "description" : "Configuration of data quality profiling checks that are enabled. Pick a check from a category, apply the parameters and rules to enable it.",
              "$ref" : "#/components/schemas/TableProfilingCheckCategoriesSpec",
              "originalRef" : "#/components/schemas/TableProfilingCheckCategoriesSpec"
            },
            "monitoring_checks" : {
              "description" : "Configuration of table level monitoring checks. Monitoring checks are data quality checks that are evaluated for each period of time (daily, weekly, monthly, etc.). A monitoring check stores only the most recent data quality check result for each period of time.",
              "$ref" : "#/components/schemas/TableMonitoringChecksSpec",
              "originalRef" : "#/components/schemas/TableMonitoringChecksSpec"
            },
            "partitioned_checks" : {
              "description" : "Configuration of table level date/time partitioned checks. Partitioned data quality checks are evaluated for each partition separately, raising separate alerts at a partition level. The table does not need to be physically partitioned by date, it is possible to run data quality checks for each day or month of data separately.",
              "$ref" : "#/components/schemas/TablePartitionedChecksRootSpec",
              "originalRef" : "#/components/schemas/TablePartitionedChecksRootSpec"
            },
            "statistics" : {
              "description" : "Configuration of table level data statistics collector (a basic profiler). Configures which statistics collectors are enabled and how they are configured.",
              "$ref" : "#/components/schemas/TableStatisticsCollectorsRootCategoriesSpec",
              "originalRef" : "#/components/schemas/TableStatisticsCollectorsRootCategoriesSpec"
            },
            "schedules_override" : {
              "description" : "Configuration of the job scheduler that runs data quality checks. The scheduler configuration is divided into types of checks that have different schedules.",
              "$ref" : "#/components/schemas/DefaultSchedulesSpec",
              "originalRef" : "#/components/schemas/DefaultSchedulesSpec"
            },
            "columns" : {
              "type" : "object",
              "description" : "Dictionary of columns, indexed by a physical column name. Column specification contains the expected column data type and a list of column level data quality checks that are enabled for a column.",
              "additionalProperties" : {
                "$ref" : "#/definitions/ColumnSpec",
                "originalRef" : "#/definitions/ColumnSpec"
              }
            },
            "labels" : {
              "type" : "array",
              "description" : "Custom labels that were assigned to the table. Labels are used for searching for tables when filtered data quality checks are executed.",
              "items" : {
                "type" : "string"
              }
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments used for change tracking and documenting changes directly in the table data quality specification file.",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            }
          }
        }
      },
      "TableSqlAggregateExprCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableSqlAggregatedExpressionSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL aggregate expression that is evaluated on a table",
              "$ref" : "#/components/schemas/TableSqlAggregatedExpressionSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregatedExpressionSensorParametersSpec"
            },
            "warning" : {
              "description" : "Default alerting threshold for warnings raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for errors raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            },
            "fatal" : {
              "description" : "Default alerting threshold for fatal data quality issues raised when the aggregated value is above the maximum accepted value.",
              "$ref" : "#/components/schemas/MaxValueRuleParametersSpec",
              "originalRef" : "#/components/schemas/MaxValueRuleParametersSpec"
            }
          }
        }
      },
      "TableSqlAggregatedExpressionSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_expression" : {
            "type" : "string",
            "description" : "SQL aggregate expression that returns a numeric value calculated from rows. The expression is evaluated on a whole table or withing a GROUP BY clause for daily partitions and/or data groups. The expression can use {table} placeholder that is replaced with a full table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_expression" : {
              "type" : "string",
              "description" : "SQL aggregate expression that returns a numeric value calculated from rows. The expression is evaluated on a whole table or withing a GROUP BY clause for daily partitions and/or data groups. The expression can use {table} placeholder that is replaced with a full table name."
            }
          }
        }
      },
      "TableSqlConditionFailedCountCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL condition (an expression that returns true/false) which is evaluated on a each row",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when a given number of rows failed the custom SQL condition (expression). The warning is considered as a passed data quality check.",
              "$ref" : "#/components/schemas/MaxCountRule15ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule15ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a maximum number of rows failing the custom SQL condition (expression) that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MaxCountRule10ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule10ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue when a given number of rows failed the custom SQL condition (expression). A fatal issue indicates a serious data quality problem that should result in stopping the data pipelines.",
              "$ref" : "#/components/schemas/MaxCountRule0ParametersSpec",
              "originalRef" : "#/components/schemas/MaxCountRule0ParametersSpec"
            }
          }
        }
      },
      "TableSqlConditionFailedCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_condition" : {
            "type" : "string",
            "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} placeholder that is replaced with a full table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_condition" : {
              "type" : "string",
              "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} placeholder that is replaced with a full table name."
            }
          }
        }
      },
      "TableSqlConditionPassedPercentCheckSpec" : {
        "type" : "object",
        "properties" : {
          "schedule_override" : {
            "$ref" : "#/components/schemas/MonitoringScheduleSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "comments" : {
            "type" : "array",
            "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/CommentSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "exclude_from_kpi" : {
            "type" : "boolean",
            "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "include_in_sla" : {
            "type" : "boolean",
            "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "quality_dimension" : {
            "type" : "string",
            "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "display_name" : {
            "type" : "string",
            "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "data_grouping" : {
            "type" : "string",
            "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "warning" : {
            "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "error" : {
            "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "fatal" : {
            "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "schedule_override" : {
              "description" : "Run check scheduling configuration. Specifies the schedule (a cron expression) when the data quality checks are executed by the scheduler.",
              "$ref" : "#/components/schemas/MonitoringScheduleSpec",
              "originalRef" : "#/components/schemas/MonitoringScheduleSpec"
            },
            "comments" : {
              "type" : "array",
              "description" : "Comments for change tracking. Please put comments in this collection because YAML comments may be removed when the YAML file is modified by the tool (serialization and deserialization will remove non tracked comments).",
              "items" : {
                "$ref" : "#/components/schemas/CommentSpec",
                "originalRef" : "#/components/schemas/CommentSpec"
              }
            },
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables the data quality check. Only enabled data quality checks and monitorings are executed. The check should be disabled if it should not work, but the configuration of the sensor and rules should be preserved in the configuration."
            },
            "exclude_from_kpi" : {
              "type" : "boolean",
              "description" : "Data quality check results (alerts) are included in the data quality KPI calculation by default. Set this field to true in order to exclude this data quality check from the data quality KPI calculation."
            },
            "include_in_sla" : {
              "type" : "boolean",
              "description" : "Marks the data quality check as part of a data quality SLA. The data quality SLA is a set of critical data quality checks that must always pass and are considered as a data contract for the dataset."
            },
            "quality_dimension" : {
              "type" : "string",
              "description" : "Configures a custom data quality dimension name that is different than the built-in dimensions (Timeliness, Validity, etc.)."
            },
            "display_name" : {
              "type" : "string",
              "description" : "Data quality check display name that could be assigned to the check, otherwise the check_display_name stored in the parquet result files is the check_name."
            },
            "data_grouping" : {
              "type" : "string",
              "description" : "Data grouping configuration name that should be applied to this data quality check. The data grouping is used to group the check's result by a GROUP BY clause in SQL, evaluating the data quality check for each group of rows. Use the name of one of data grouping configurations defined on the parent table."
            },
            "parameters" : {
              "description" : "Sensor parameters with the custom SQL condition (an expression that returns true/false) which is evaluated on a each row",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentSensorParametersSpec"
            },
            "warning" : {
              "description" : "Alerting threshold that raises a data quality warning when a minimum acceptable percentage of rows did not pass the custom SQL condition (expression). The warning is considered as a passed data quality check.",
              "$ref" : "#/components/schemas/MinPercentRule100ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule100ParametersSpec"
            },
            "error" : {
              "description" : "Default alerting threshold for a minimum acceptable percentage of rows passing the custom SQL condition (expression) that raises a data quality error (alert).",
              "$ref" : "#/components/schemas/MinPercentRule99ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule99ParametersSpec"
            },
            "fatal" : {
              "description" : "Alerting threshold that raises a fatal data quality issue when a minimum acceptable percentage of rows did not pass the custom SQL condition (expression). A fatal issue indicates a serious data quality problem that should result in stopping the data pipelines.",
              "$ref" : "#/components/schemas/MinPercentRule95ParametersSpec",
              "originalRef" : "#/components/schemas/MinPercentRule95ParametersSpec"
            }
          }
        }
      },
      "TableSqlConditionPassedPercentSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "sql_condition" : {
            "type" : "string",
            "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} placeholder that is replaced with a full table name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            },
            "sql_condition" : {
              "type" : "string",
              "description" : "SQL condition (expression) that returns true or false. The condition is evaluated for each row. The expression can use {table} placeholder that is replaced with a full table name."
            }
          }
        }
      },
      "TableSqlDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sql_condition_failed_count_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_sql_aggregate_expr_table" : {
            "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "min_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_sql_condition_passed_percent_on_table" : {
              "description" : "Verifies that a set percentage of rows passed a custom SQL condition (expression). Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            },
            "daily_sql_condition_failed_count_on_table" : {
              "description" : "Verifies that a set number of rows failed a custom SQL condition (expression). Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec"
            },
            "daily_sql_aggregate_expr_table" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Stores the most recent captured value for each day when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregateExprCheckSpec"
            },
            "min_sql_condition_passed_percent_on_table" : {
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            }
          }
        }
      },
      "TableSqlDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sql_condition_failed_count_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_sql_aggregate_expr_table" : {
            "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "min_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_sql_condition_passed_percent_on_table" : {
              "description" : "Verifies that a set percentage of rows passed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            },
            "daily_partition_sql_condition_failed_count_on_table" : {
              "description" : "Verifies that a set number of rows failed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec"
            },
            "daily_partition_sql_aggregate_expr_table" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Creates a separate data quality check (and an alert) for each daily partition.",
              "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregateExprCheckSpec"
            },
            "min_sql_condition_passed_percent_on_table" : {
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            }
          }
        }
      },
      "TableSqlMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sql_condition_failed_count_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_sql_aggregate_expr_table" : {
            "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "min_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_sql_condition_passed_percent_on_table" : {
              "description" : "Verifies that a set percentage of rows passed a custom SQL condition (expression). Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            },
            "monthly_sql_condition_failed_count_on_table" : {
              "description" : "Verifies that a set number of rows failed a custom SQL condition (expression). Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec"
            },
            "monthly_sql_aggregate_expr_table" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Stores the most recent row count for each month when the data quality check was evaluated.",
              "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregateExprCheckSpec"
            },
            "min_sql_condition_passed_percent_on_table" : {
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            }
          }
        }
      },
      "TableSqlMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sql_condition_failed_count_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_sql_aggregate_expr_table" : {
            "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "min_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_sql_condition_passed_percent_on_table" : {
              "description" : "Verifies that a set percentage of rows passed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            },
            "monthly_partition_sql_condition_failed_count_on_table" : {
              "description" : "Verifies that a set number of rows failed a custom SQL condition (expression). Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec"
            },
            "monthly_partition_sql_aggregate_expr_table" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range. Creates a separate data quality check (and an alert) for each monthly partition.",
              "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregateExprCheckSpec"
            },
            "min_sql_condition_passed_percent_on_table" : {
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            }
          }
        }
      },
      "TableSqlProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_sql_condition_passed_percent_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sql_condition_failed_count_on_table" : {
            "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_sql_aggregate_expr_table" : {
            "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_sql_condition_passed_percent_on_table" : {
              "description" : "Verifies that a set percentage of rows passed a custom SQL condition (expression).",
              "$ref" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionPassedPercentCheckSpec"
            },
            "profile_sql_condition_failed_count_on_table" : {
              "description" : "Verifies that a set number of rows failed a custom SQL condition (expression).",
              "$ref" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlConditionFailedCountCheckSpec"
            },
            "profile_sql_aggregate_expr_table" : {
              "description" : "Verifies that a custom aggregated SQL expression (MIN, MAX, etc.) is not outside the set range.",
              "$ref" : "#/components/schemas/TableSqlAggregateExprCheckSpec",
              "originalRef" : "#/components/schemas/TableSqlAggregateExprCheckSpec"
            }
          }
        }
      },
      "TableStatisticsCollectorsRootCategoriesSpec" : {
        "type" : "object",
        "properties" : {
          "volume" : {
            "$ref" : "#/components/schemas/TableVolumeStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "schema" : {
            "$ref" : "#/components/schemas/TableSchemaStatisticsCollectorsSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "volume" : {
              "description" : "Configuration of volume statistics collectors on a table level.",
              "$ref" : "#/components/schemas/TableVolumeStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/TableVolumeStatisticsCollectorsSpec"
            },
            "schema" : {
              "$ref" : "#/components/schemas/TableSchemaStatisticsCollectorsSpec",
              "originalRef" : "#/components/schemas/TableSchemaStatisticsCollectorsSpec"
            }
          }
        }
      },
      "TableStatisticsModel" : {
        "type" : "object",
        "properties" : {
          "connection_name" : {
            "type" : "string",
            "description" : "Connection name.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "table" : {
            "$ref" : "#/components/schemas/PhysicalTableName",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "statistics" : {
            "type" : "array",
            "description" : "List of collected table level statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "items" : {
              "$ref" : "#/components/schemas/StatisticsMetricModel",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "types" : [ "array" ]
          },
          "collect_table_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "collect_table_and_column_statistics_job_template" : {
            "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "can_collect_statistics" : {
            "type" : "boolean",
            "description" : "Boolean flag that decides if the current user can collect statistics.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "description" : "Model that returns a summary of the table level statistics (the basic profiling results).",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "connection_name" : {
              "type" : "string",
              "description" : "Connection name."
            },
            "table" : {
              "description" : "Physical table name including the schema and table names.",
              "$ref" : "#/components/schemas/PhysicalTableName",
              "originalRef" : "#/components/schemas/PhysicalTableName"
            },
            "statistics" : {
              "type" : "array",
              "description" : "List of collected table level statistics.",
              "items" : {
                "$ref" : "#/components/schemas/StatisticsMetricModel",
                "originalRef" : "#/components/schemas/StatisticsMetricModel"
              }
            },
            "collect_table_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors within this table, limited only to the table level statistics (row count, etc).",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "collect_table_and_column_statistics_job_template" : {
              "description" : "Configured parameters for the \"collect statistics\" job that should be pushed to the job queue in order to run all statistics collectors within this table, including statistics for all columns.",
              "$ref" : "#/components/schemas/StatisticsCollectorSearchFilters",
              "originalRef" : "#/components/schemas/StatisticsCollectorSearchFilters"
            },
            "can_collect_statistics" : {
              "type" : "boolean",
              "description" : "Boolean flag that decides if the current user can collect statistics."
            }
          },
          "description" : "Model that returns a summary of the table level statistics (the basic profiling results)."
        }
      },
      "TableTimelinessDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_data_freshness" : {
            "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_data_staleness" : {
            "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_data_ingestion_delay" : {
            "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_data_freshness" : {
              "description" : "Daily  calculating the number of days since the most recent event timestamp (freshness)",
              "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataFreshnessCheckSpec"
            },
            "daily_data_staleness" : {
              "description" : "Daily  calculating the time difference in days between the current date and the most recent data ingestion timestamp (staleness)",
              "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataStalenessCheckSpec"
            },
            "daily_data_ingestion_delay" : {
              "description" : "Daily  calculating the time difference in days between the most recent event timestamp and the most recent ingestion timestamp",
              "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
              "originalRef" : "#/components/schemas/TableDataIngestionDelayCheckSpec"
            }
          }
        }
      },
      "TableTimelinessDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_data_freshness" : {
            "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_data_staleness" : {
            "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_data_ingestion_delay" : {
            "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_reload_lag" : {
            "$ref" : "#/components/schemas/TablePartitionReloadLagCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_data_freshness" : {
              "description" : "Daily partitioned check calculating the number of days since the most recent event timestamp (freshness)",
              "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataFreshnessCheckSpec"
            },
            "daily_partition_data_staleness" : {
              "description" : "Daily partitioned check calculating the time difference in days between the current date and the most recent data ingestion timestamp (staleness)",
              "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataStalenessCheckSpec"
            },
            "daily_partition_data_ingestion_delay" : {
              "description" : "Daily partitioned check calculating the time difference in days between the most recent event timestamp and the most recent ingestion timestamp",
              "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
              "originalRef" : "#/components/schemas/TableDataIngestionDelayCheckSpec"
            },
            "daily_partition_reload_lag" : {
              "description" : "Daily partitioned check calculating the longest time a row waited to be load",
              "$ref" : "#/components/schemas/TablePartitionReloadLagCheckSpec",
              "originalRef" : "#/components/schemas/TablePartitionReloadLagCheckSpec"
            }
          }
        }
      },
      "TableTimelinessDataFreshnessSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableTimelinessDataIngestionDelaySensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableTimelinessDataStalenessSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableTimelinessMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_data_freshness" : {
            "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_data_staleness" : {
            "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_data_ingestion_delay" : {
            "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_data_freshness" : {
              "description" : "Monthly monitoring calculating the number of days since the most recent event timestamp (freshness)",
              "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataFreshnessCheckSpec"
            },
            "monthly_data_staleness" : {
              "description" : "Monthly monitoring calculating the time difference in days between the current date and the most recent data ingestion timestamp (staleness)",
              "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataStalenessCheckSpec"
            },
            "monthly_data_ingestion_delay" : {
              "description" : "Monthly monitoring calculating the time difference in days between the most recent event timestamp and the most recent ingestion timestamp",
              "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
              "originalRef" : "#/components/schemas/TableDataIngestionDelayCheckSpec"
            }
          }
        }
      },
      "TableTimelinessMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_data_freshness" : {
            "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_data_staleness" : {
            "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_data_ingestion_delay" : {
            "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_reload_lag" : {
            "$ref" : "#/components/schemas/TablePartitionReloadLagCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_data_freshness" : {
              "description" : "Monthly partitioned check calculating the number of days since the most recent event (freshness)",
              "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataFreshnessCheckSpec"
            },
            "monthly_partition_data_staleness" : {
              "description" : "Monthly partitioned check calculating the time difference in days between the current date and the most recent data data ingestion timestamp (staleness)",
              "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataStalenessCheckSpec"
            },
            "monthly_partition_data_ingestion_delay" : {
              "description" : "Monthly partitioned check calculating the time difference in days between the most recent event timestamp and the most recent ingestion timestamp",
              "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
              "originalRef" : "#/components/schemas/TableDataIngestionDelayCheckSpec"
            },
            "monthly_partition_reload_lag" : {
              "description" : "Monthly partitioned check calculating the longest time a row waited to be load",
              "$ref" : "#/components/schemas/TablePartitionReloadLagCheckSpec",
              "originalRef" : "#/components/schemas/TablePartitionReloadLagCheckSpec"
            }
          }
        }
      },
      "TableTimelinessPartitionReloadLagSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableTimelinessProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_data_freshness" : {
            "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_data_staleness" : {
            "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_data_ingestion_delay" : {
            "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_data_freshness" : {
              "description" : "Calculates the number of days since the most recent event timestamp (freshness)",
              "$ref" : "#/components/schemas/TableDataFreshnessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataFreshnessCheckSpec"
            },
            "profile_data_staleness" : {
              "description" : "Calculates the time difference in days between the current date and the most recent data ingestion timestamp (staleness)",
              "$ref" : "#/components/schemas/TableDataStalenessCheckSpec",
              "originalRef" : "#/components/schemas/TableDataStalenessCheckSpec"
            },
            "profile_data_ingestion_delay" : {
              "description" : "Calculates the time difference in days between the most recent event timestamp and the most recent ingestion timestamp",
              "$ref" : "#/components/schemas/TableDataIngestionDelayCheckSpec",
              "originalRef" : "#/components/schemas/TableDataIngestionDelayCheckSpec"
            }
          }
        }
      },
      "TableVolumeDailyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_row_count" : {
            "$ref" : "#/components/schemas/TableRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_change" : {
            "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_change_yesterday" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_anomaly_differencing_30_days" : {
            "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_anomaly_differencing" : {
            "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_change_7_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_row_count_change_30_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_row_count" : {
              "description" : "Verifies that the tested table has at least a minimum accepted number of rows. The default configuration of the warning, error and fatal severity rules verifies a minimum row count of one row, which checks if the table is not empty. When the data grouping is configured, this check will count rows using a GROUP BY clause and verify that each data grouping has an expected minimum number of rows.Stores the most recent captured row count value for each day when the row count was evaluated.",
              "$ref" : "#/components/schemas/TableRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableRowCountCheckSpec"
            },
            "daily_row_count_change" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last day with a row count captured.",
              "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountCheckSpec"
            },
            "daily_row_count_change_yesterday" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from yesterday. Allows for exact match to readouts from yesterday or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec"
            },
            "daily_row_count_anomaly_differencing_30_days" : {
              "description" : "Verifies that the total row count of the tested table changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec"
            },
            "daily_row_count_anomaly_differencing" : {
              "description" : "Verifies that the total row count of the tested table changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec"
            },
            "daily_row_count_change_7_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last week. Allows for exact match to readouts from 7 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec"
            },
            "daily_row_count_change_30_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last month. Allows for exact match to readouts from 30 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec"
            }
          }
        }
      },
      "TableVolumeDailyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "daily_partition_row_count" : {
            "$ref" : "#/components/schemas/TableRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_change" : {
            "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_change_yesterday" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_anomaly_stationary_30_days" : {
            "$ref" : "#/components/schemas/TableAnomalyStationaryPartitionRowCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_anomaly_stationary" : {
            "$ref" : "#/components/schemas/TableAnomalyStationaryPartitionRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_change_7_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "daily_partition_row_count_change_30_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "daily_partition_row_count" : {
              "description" : "Verifies that each daily partition in the tested table has at least a minimum accepted number of rows. The default configuration of the warning, error and fatal severity rules verifies a minimum row count of one row, which checks if the partition is not empty. When the data grouping is configured, this check will count rows using a GROUP BY clause and verify that each data grouping has an expected minimum number of rows.",
              "$ref" : "#/components/schemas/TableRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableRowCountCheckSpec"
            },
            "daily_partition_row_count_change" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountCheckSpec"
            },
            "daily_partition_row_count_change_yesterday" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from yesterday. Allows for exact match to readouts from yesterday or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec"
            },
            "daily_partition_row_count_anomaly_stationary_30_days" : {
              "description" : "Verifies that the total row count of the tested table is within a percentile from measurements made during the last 30 days.",
              "$ref" : "#/components/schemas/TableAnomalyStationaryPartitionRowCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyStationaryPartitionRowCount30DaysCheckSpec"
            },
            "daily_partition_row_count_anomaly_stationary" : {
              "description" : "Verifies that the total row count of the tested table is within a percentile from measurements made during the last 90 days.",
              "$ref" : "#/components/schemas/TableAnomalyStationaryPartitionRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyStationaryPartitionRowCountCheckSpec"
            },
            "daily_partition_row_count_change_7_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last week. Allows for exact match to readouts from 7 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec"
            },
            "daily_partition_row_count_change_30_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last month. Allows for exact match to readouts from 30 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec"
            }
          }
        }
      },
      "TableVolumeMonthlyMonitoringChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_row_count" : {
            "$ref" : "#/components/schemas/TableRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_row_count_change" : {
            "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_row_count" : {
              "description" : "Verifies that the tested table has at least a minimum accepted number of rows. The default configuration of the warning, error and fatal severity rules verifies a minimum row count of one row, which checks if the table is not empty. When the data grouping is configured, this check will count rows using a GROUP BY clause and verify that each data grouping has an expected minimum number of rows.Stores the most recent captured row count value for each month when the row count was evaluated.",
              "$ref" : "#/components/schemas/TableRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableRowCountCheckSpec"
            },
            "monthly_row_count_change" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last month.",
              "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountCheckSpec"
            }
          }
        }
      },
      "TableVolumeMonthlyPartitionedChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "monthly_partition_row_count" : {
            "$ref" : "#/components/schemas/TableRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "monthly_partition_row_count_change" : {
            "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "monthly_partition_row_count" : {
              "description" : "Verifies that each monthly partition in the tested table has at least a minimum accepted number of rows. The default configuration of the warning, error and fatal severity rules verifies a minimum row count of one row, which checks if the partition is not empty. When the data grouping is configured, this check will count rows using a GROUP BY clause and verify that each data grouping has an expected minimum number of rows.",
              "$ref" : "#/components/schemas/TableRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableRowCountCheckSpec"
            },
            "monthly_partition_row_count_change" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountCheckSpec"
            }
          }
        }
      },
      "TableVolumeProfilingChecksSpec" : {
        "type" : "object",
        "properties" : {
          "custom_checks" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CustomCheckSpec",
              "extensions" : { },
              "exampleSetFlag" : false
            },
            "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "object" ],
            "jsonSchema" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check."
            }
          },
          "profile_row_count" : {
            "$ref" : "#/components/schemas/TableRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_change" : {
            "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_change_yesterday" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_anomaly_differencing_30_days" : {
            "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_anomaly_differencing" : {
            "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_change_7_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "profile_row_count_change_30_days" : {
            "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "custom_checks" : {
              "type" : "object",
              "description" : "Dictionary of additional custom checks within this category. The keys are check names defined in the definition section. The sensor parameters and rules should match the type of the configured sensor and rule for the custom check.",
              "additionalProperties" : {
                "$ref" : "#/definitions/CustomCheckSpec",
                "originalRef" : "#/definitions/CustomCheckSpec"
              }
            },
            "profile_row_count" : {
              "description" : "Verifies that the tested table has at least a minimum accepted number of rows. The default configuration of the warning, error and fatal severity rules verifies a minimum row count of one row, which checks if the table is not empty. When the data grouping is configured, this check will count rows using a GROUP BY clause and verify that each data grouping has an expected minimum number of rows.",
              "$ref" : "#/components/schemas/TableRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableRowCountCheckSpec"
            },
            "profile_row_count_change" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout.",
              "$ref" : "#/components/schemas/TableChangeRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountCheckSpec"
            },
            "profile_row_count_change_yesterday" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from yesterday. Allows for exact match to readouts from yesterday or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSinceYesterdayCheckSpec"
            },
            "profile_row_count_anomaly_differencing_30_days" : {
              "description" : "Verifies that the total row count of the tested table changes in a rate within a percentile boundary during last 30 days.",
              "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyDifferencingRowCount30DaysCheckSpec"
            },
            "profile_row_count_anomaly_differencing" : {
              "description" : "Verifies that the total row count of the tested table changes in a rate within a percentile boundary during last 90 days.",
              "$ref" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec",
              "originalRef" : "#/components/schemas/TableAnomalyDifferencingRowCountCheckSpec"
            },
            "profile_row_count_change_7_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last week. Allows for exact match to readouts from 7 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince7DaysCheckSpec"
            },
            "profile_row_count_change_30_days" : {
              "description" : "Verifies that the total row count of the tested table has changed by a fixed rate since the last readout from last month. Allows for exact match to readouts from 30 days ago or past readouts lookup.",
              "$ref" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec",
              "originalRef" : "#/components/schemas/TableChangeRowCountSince30DaysCheckSpec"
            }
          }
        }
      },
      "TableVolumeRowCountSensorParametersSpec" : {
        "type" : "object",
        "properties" : {
          "filter" : {
            "type" : "string",
            "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "filter" : {
              "type" : "string",
              "description" : "SQL WHERE clause added to the sensor query. Both the table level filter and a sensor query filter are added, separated by an AND operator."
            }
          }
        }
      },
      "TableVolumeRowCountStatisticsCollectorSpec" : {
        "type" : "object",
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "parameters" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "disabled" : {
              "type" : "boolean",
              "description" : "Disables this profiler. Only enabled profilers are executed during a profiling process."
            },
            "parameters" : {
              "description" : "Profiler parameters",
              "$ref" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountSensorParametersSpec"
            }
          }
        }
      },
      "TableVolumeStatisticsCollectorsSpec" : {
        "type" : "object",
        "properties" : {
          "row_count" : {
            "$ref" : "#/components/schemas/TableVolumeRowCountStatisticsCollectorSpec",
            "extensions" : { },
            "exampleSetFlag" : false
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "row_count" : {
              "description" : "Configuration of the row count profiler.",
              "$ref" : "#/components/schemas/TableVolumeRowCountStatisticsCollectorSpec",
              "originalRef" : "#/components/schemas/TableVolumeRowCountStatisticsCollectorSpec"
            }
          }
        }
      },
      "TemporalUnit" : {
        "type" : "object",
        "properties" : {
          "dateBased" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "timeBased" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "duration" : {
            "$ref" : "#/components/schemas/Duration",
            "extensions" : { },
            "exampleSetFlag" : false
          },
          "durationEstimated" : {
            "type" : "boolean",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "dateBased" : {
              "type" : "boolean"
            },
            "timeBased" : {
              "type" : "boolean"
            },
            "duration" : {
              "$ref" : "#/components/schemas/Duration",
              "originalRef" : "#/components/schemas/Duration"
            },
            "durationEstimated" : {
              "type" : "boolean"
            }
          }
        }
      },
      "TimeWindowFilterParameters" : {
        "type" : "object",
        "properties" : {
          "daily_partitioning_recent_days" : {
            "type" : "integer",
            "description" : "The number of recent days to analyze incrementally by daily partitioned data quality checks.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "daily_partitioning_include_today" : {
            "type" : "boolean",
            "description" : "Analyze also today and later days when running daily partitioned checks. By default, daily partitioned checks will not analyze today and future dates. Setting true will disable filtering the end dates.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "monthly_partitioning_recent_months" : {
            "type" : "integer",
            "description" : "The number of recent months to analyze incrementally by monthly partitioned data quality checks.",
            "format" : "int32",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "integer" ]
          },
          "monthly_partitioning_include_current_month" : {
            "type" : "boolean",
            "description" : "Analyze also the current month and later months when running monthly partitioned checks. By default, monthly partitioned checks will not analyze the current month and future months. Setting true will disable filtering the end dates.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "boolean" ]
          },
          "from_date" : {
            "type" : "string",
            "description" : "Analyze the data since the given date (inclusive). The date should be an ISO 8601 date (yyyy-MM-dd). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date overrides recent days and recent months.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "from_date_time" : {
            "type" : "string",
            "description" : "Analyze the data since the given date and time (inclusive). The date and time should be an ISO 8601 local date and time without the time zone (yyyy-MM-dd HH:mm:ss). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date and time overrides recent days and recent months.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "from_date_time_offset" : {
            "type" : "string",
            "description" : "Analyze the data since the given date and time with a time zone offset (inclusive). The date and time should be an ISO 8601 date and time followed by a time zone offset (yyyy-MM-dd HH:mm:ss). For example: 2023-02-20 14:10:00+02. The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date and time overrides recent days and recent months.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "to_date" : {
            "type" : "string",
            "description" : "Analyze the data until the given date (exclusive, the given date and the following dates are not analyzed). The date should be an ISO 8601 date (YYYY-MM-DD). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date overrides the parameters to disable analyzing today or the current month.",
            "format" : "date",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "to_date_time" : {
            "type" : "string",
            "description" : "Analyze the data until the given date and time (exclusive). The date should be an ISO 8601 date (yyyy-MM-dd). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date and time overrides the parameters to disable analyzing today or the current month.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "to_date_time_offset" : {
            "type" : "string",
            "description" : "Analyze the data until the given date and time with a time zone offset (exclusive). The date and time should be an ISO 8601 date and time followed by a time zone offset (yyyy-MM-dd HH:mm:ss). For example: 2023-02-20 14:10:00+02. The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date and time overrides the parameters to disable analyzing today or the current month.",
            "format" : "date-time",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "description" : "Time window configuration for partitioned checks (the number of recent days or months to analyze in an incremental mode) or an absolute time range to analyze.",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "daily_partitioning_recent_days" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of recent days to analyze incrementally by daily partitioned data quality checks."
            },
            "daily_partitioning_include_today" : {
              "type" : "boolean",
              "description" : "Analyze also today and later days when running daily partitioned checks. By default, daily partitioned checks will not analyze today and future dates. Setting true will disable filtering the end dates."
            },
            "monthly_partitioning_recent_months" : {
              "type" : "integer",
              "format" : "int32",
              "description" : "The number of recent months to analyze incrementally by monthly partitioned data quality checks."
            },
            "monthly_partitioning_include_current_month" : {
              "type" : "boolean",
              "description" : "Analyze also the current month and later months when running monthly partitioned checks. By default, monthly partitioned checks will not analyze the current month and future months. Setting true will disable filtering the end dates."
            },
            "from_date" : {
              "type" : "string",
              "format" : "date",
              "description" : "Analyze the data since the given date (inclusive). The date should be an ISO 8601 date (yyyy-MM-dd). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date overrides recent days and recent months."
            },
            "from_date_time" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Analyze the data since the given date and time (inclusive). The date and time should be an ISO 8601 local date and time without the time zone (yyyy-MM-dd HH:mm:ss). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date and time overrides recent days and recent months."
            },
            "from_date_time_offset" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Analyze the data since the given date and time with a time zone offset (inclusive). The date and time should be an ISO 8601 date and time followed by a time zone offset (yyyy-MM-dd HH:mm:ss). For example: 2023-02-20 14:10:00+02. The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the beginning date and time overrides recent days and recent months."
            },
            "to_date" : {
              "type" : "string",
              "format" : "date",
              "description" : "Analyze the data until the given date (exclusive, the given date and the following dates are not analyzed). The date should be an ISO 8601 date (YYYY-MM-DD). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date overrides the parameters to disable analyzing today or the current month."
            },
            "to_date_time" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Analyze the data until the given date and time (exclusive). The date should be an ISO 8601 date (yyyy-MM-dd). The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date and time overrides the parameters to disable analyzing today or the current month."
            },
            "to_date_time_offset" : {
              "type" : "string",
              "format" : "date-time",
              "description" : "Analyze the data until the given date and time with a time zone offset (exclusive). The date and time should be an ISO 8601 date and time followed by a time zone offset (yyyy-MM-dd HH:mm:ss). For example: 2023-02-20 14:10:00+02. The analyzed table must have the timestamp column properly configured, it is the column that is used for filtering the date and time ranges. Setting the end date and time overrides the parameters to disable analyzing today or the current month."
            }
          },
          "description" : "Time window configuration for partitioned checks (the number of recent days or months to analyze in an incremental mode) or an absolute time range to analyze."
        }
      },
      "TimestampColumnsSpec" : {
        "type" : "object",
        "properties" : {
          "event_timestamp_column" : {
            "type" : "string",
            "description" : "Column name that identifies an event timestamp (date/time), such as a transaction timestamp, impression timestamp, event timestamp.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "ingestion_timestamp_column" : {
            "type" : "string",
            "description" : "Column name that contains the timestamp (or date/time) when the row was ingested (loaded, inserted) into the table. Use a column that is filled by the data pipeline or ETL process at the time of the data loading.",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          },
          "partition_by_column" : {
            "type" : "string",
            "description" : "Column name that contains the date, datetime or timestamp column for date/time partitioned data. Partition checks (daily partition checks and monthly partition checks) use this column in a GROUP BY clause in order to detect data quality issues in each partition separately. It should be a DATE type, DATETIME type (using a local server time zone) or a TIMESTAMP type (a UTC absolute time).",
            "extensions" : { },
            "exampleSetFlag" : false,
            "types" : [ "string" ]
          }
        },
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object",
          "properties" : {
            "event_timestamp_column" : {
              "type" : "string",
              "description" : "Column name that identifies an event timestamp (date/time), such as a transaction timestamp, impression timestamp, event timestamp."
            },
            "ingestion_timestamp_column" : {
              "type" : "string",
              "description" : "Column name that contains the timestamp (or date/time) when the row was ingested (loaded, inserted) into the table. Use a column that is filled by the data pipeline or ETL process at the time of the data loading."
            },
            "partition_by_column" : {
              "type" : "string",
              "description" : "Column name that contains the date, datetime or timestamp column for date/time partitioned data. Partition checks (daily partition checks and monthly partition checks) use this column in a GROUP BY clause in order to detect data quality issues in each partition separately. It should be a DATE type, DATETIME type (using a local server time zone) or a TIMESTAMP type (a UTC absolute time)."
            }
          }
        }
      },
      "ValueChangedParametersSpec" : {
        "type" : "object",
        "exampleSetFlag" : false,
        "types" : [ "object" ],
        "jsonSchema" : {
          "type" : "object"
        }
      },
      "CheckRunScheduleGroup" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "monitoring_monthly", "profiling", "partitioned_daily", "monitoring_daily", "partitioned_monthly" ]
      },
      "CheckTimeScale" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "daily", "monthly" ]
      },
      "CheckTarget" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "column", "table" ]
      },
      "CheckType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "profiling", "partitioned", "monitoring" ]
      },
      "IncidentSortOrder" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "dataGroup", "lastSeen", "firstSeen", "tablePriority", "qualityDimension", "checkName", "failedChecksCount", "table", "highestSeverity" ]
      },
      "SortDirection" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "asc", "desc" ]
      },
      "CheckResultSortOrder" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "checkType", "severity", "executedAt", "sensorName", "checkDisplayName", "actualValue", "checkCategory", "checkHash", "checkName", "dataGroup", "expectedValue", "timePeriod", "qualityDimension", "timeGradient", "columnName" ]
      },
      "IncidentStatus" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "acknowledged", "muted", "open", "resolved" ]
      },
      "BigQueryJobsCreateProject" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "create_jobs_in_default_project_from_credentials", "create_jobs_in_source_project", "create_jobs_in_selected_billing_project_id" ]
      },
      "BigQueryAuthenticationMode" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "json_key_content", "json_key_path", "google_application_credentials" ]
      },
      "ScheduleEnabledStatusModel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "not_configured", "disabled", "overridden_by_checks", "enabled" ]
      },
      "CheckResultStatus" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "valid", "warning", "execution_error", "error", "fatal" ]
      },
      "RuleSeverityLevel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "valid", "warning", "error", "fatal" ]
      },
      "CheckTargetModel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "column", "table" ]
      },
      "FolderSynchronizationStatus" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "synchronizing", "unchanged", "changed" ]
      },
      "StatisticsDataScope" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "data_group", "table" ]
      },
      "DqoJobStatus" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "running", "waiting", "queued", "cancelled", "cancel_requested", "failed", "succeeded" ]
      },
      "DatetimeBuiltInDateFormats" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "YYYY-MM-DD", "DD/MM/YYYY", "DD.MM.YYYY", "DD-MM-YYYY" ]
      },
      "StringsBuiltInDateFormats" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "YYYY-MM-DD", "Month D, YYYY", "MM/DD/YYYY", "YYYY/MM/DD", "DD/MM/YYYY" ]
      },
      "IncidentGroupingLevel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "table_dimension_category_name", "table_dimension", "table_dimension_category_type", "table", "table_dimension_category" ]
      },
      "MinimumGroupingSeverityLevel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "warning", "error", "fatal" ]
      },
      "ProviderType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "snowflake", "oracle", "postgresql", "redshift", "sqlserver", "mysql", "bigquery" ]
      },
      "ConnectionTestStatus" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "SUCCESS", "CONNECTION_ALREADY_EXISTS", "FAILURE" ]
      },
      "DataGroupingDimensionSource" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "tag", "column_value" ]
      },
      "DqoUserRole" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "editor", "viewer", "admin", "none", "operator" ]
      },
      "DqoJobType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "delete_stored_data", "import_schema", "repair_stored_data", "run_scheduled_checks_cron", "synchronize_folder", "run_checks_on_table", "run_checks", "collect_statistics", "synchronize_multiple_folders", "queue_thread_shutdown", "collect_statistics_on_table", "import_tables" ]
      },
      "EffectiveScheduleLevelModel" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "check_override", "connection", "table_override" ]
      },
      "MySqlSslMode" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "DISABLED", "PREFERRED", "VERIFY_IDENTITY", "VERIFY_CA", "REQUIRED" ]
      },
      "ParameterDataType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "date", "datetime", "boolean", "integer_list", "string", "double", "column_name", "string_list", "integer", "long", "enum", "object" ]
      },
      "DisplayHint" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "textarea" ]
      },
      "PostgresqlSslMode" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "allow", "prefer", "disable", "verify-ca", "require", "verify-full" ]
      },
      "ProviderSensorRunnerType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "sql_template", "java_class" ]
      },
      "RuleRunnerType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "python", "java_class" ]
      },
      "RuleTimeWindowMode" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "previous_readouts", "current_value" ]
      },
      "HistoricDataPointsGrouping" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "week", "month", "hour", "year", "last_n_readouts", "day", "quarter" ]
      },
      "CredentialType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "binary", "text" ]
      },
      "StatisticsCollectorTarget" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "column", "table" ]
      },
      "StatisticsResultDataType" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "date", "datetime", "boolean", "null", "string", "integer", "time", "float", "instant" ]
      },
      "FileSynchronizationDirection" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "download", "upload", "full" ]
      },
      "DqoRoot" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "settings", "_indexes", "data_errors", "sources", "data_incidents", "credentials", "rules", "data_sensor_readouts", "data_statistics", "sensors", "checks", "data_check_results", "_local_settings" ]
      },
      "ProfilingTimePeriod" : {
        "type" : "string",
        "exampleSetFlag" : false,
        "enum" : [ "one_per_week", "all_results", "one_per_hour", "one_per_month", "one_per_day" ]
      }
    },
    "securitySchemes" : {
      "authorization_bearer_api_key" : {
        "type" : "APIKEY",
        "description" : "API Key passed as \"Bearer <api_key>\". Two types of API Keys are supported. The first type is an API Key issued by DQOps Cloud for single user instances. The second type is a locally issued API Key that is signed by this DQOps instance. Issue the API Key from the user's profile screen.",
        "name" : "Authorization",
        "in" : "HEADER",
        "extensions" : { }
      }
    }
  },
  "extensions" : {
    "x-original-swagger-version" : "2.0"
  }
}