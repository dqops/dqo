# {{replace primaryCheckName "_" " "}} data quality checks
{{#if checkSpecClassJavaDoc}}
{{checkSpecClassJavaDoc}}
{{else}}
{{/if}}

___
The **{{replace primaryCheckName "_" " "}}** data quality check has the following variants for each
[type of data quality](/docs/dqo-concepts/definition-of-data-quality-checks/index.md#types-of-checks) checks supported by DQOps.

{{#each allChecks}}
## {{replace checkName  "_" " "}}


**Check description**

{{checkHelp}}

|Data quality check name|Category|Check type|Time scale|Quality dimension|Sensor definition|Quality rule|Standard|
|-----------------------|--------|----------|----------|-----------------|-----------------|------------|--------|
|<span class="no-wrap-code">`{{checkName}}`</span>|[{{category}}](../../../dqo-concepts/categories-of-data-quality-checks/{{categoryPageName}})|[{{checkType}}](../../../dqo-concepts/definition-of-data-quality-checks/{{checkTypeConceptPage}})|{{#if timeScale}}{{timeScale}}{{else}} {{/if}}|{{qualityDimension}}|[*{{sensor.sensorName}}*](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})|[*{{rule.ruleName}}*](../../../reference/rules/{{capitalizeFirst rule.category}}.md#{{replace rule.ruleName "_" "-"}})|{{checkmark standard}}|

**Command-line examples**

Please expand the section below to see the [DQOps command-line](../../../dqo-concepts/command-line-interface.md) examples to run or activate the {{replace checkName  "_" " "}} data quality check.

??? example "Managing {{replace checkName  "_" " "}} check from DQOps shell"

    === "Activate the check with a warning rule"

        Activate this data quality using the [check activate](../../../command-line-interface/check.md#dqo-check-activate) CLI command,
        providing the connection name, table name, check name, and all other filters. Activates the warning rule with the default parameters.

        ```
        dqo> check activate -c=connection_name -t=schema_name.table_name {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-warning
        ```

        You can also use patterns to activate the check on all matching tables and columns.

        ```
        dqo> check activate -c=connection_name -t=schema_prefix*.fact_* {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-warning
        ```
        {{#if rule.firstRuleParameterName}}
        Additional rule parameters are passed using the *-Wrule_parameter_name=value*.

        ```
        dqo> check activate -c=connection_name -t=schema_prefix*.fact_* {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-warning
                            -W{{rule.firstRuleParameterName}}=value
        ```{{/if}}


    === "Activate the check with an error rule"

        Activate this data quality using the [check activate](../../../command-line-interface/check.md#dqo-check-activate) CLI command,
        providing the connection name, table name, check name, and all other filters. Activates the error rule with the default parameters.

        ```
        dqo> check activate -c=connection_name -t=schema_name.table_name {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-error
        ```

        You can also use patterns to activate the check on all matching tables and columns.

        ```
        dqo> check activate -c=connection_name -t=schema_prefix*.fact_* {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-error
        ```
        {{#if rule.firstRuleParameterName}}
        Additional rule parameters are passed using the *-Erule_parameter_name=value*.

        ```
        dqo> check activate -c=connection_name -t=schema_prefix*.fact_* {{#if (eq target "column")}}-col=column_name{{/if}} -ch={{checkName}} --enable-error
                            -E{{rule.firstRuleParameterName}}=value
        ```{{/if}}


    === "Run all configured checks"

        Run this data quality check using the [check run](../../../command-line-interface/check.md#dqo-check-run) CLI command by providing the check name and all other targeting filters.
        The following example shows how to run the *{{checkName}}* check on all tables{{#if (eq target "column")}} and columns{{/if}} on a single data source.

        ```
        dqo> check run -c=data_source_name -ch={{checkName}}
        ```

        It is also possible to run this check on a specific connection and table. In order to do this, use the connection name and the full table name parameters.

        ```
        dqo> check run -c=connection_name -t=schema_name.table_name -ch={{checkName}}
        ```

        You can also run this check on all tables {{#if (eq target "column")}}(and columns) {{/if}} on which the *{{checkName}}* check is enabled
        using patterns to find tables.

        ```
        dqo> check run -c=connection_name -t=schema_prefix*.fact_* {{#if (eq target "column")}}-col=column_name_*{{/if}} -ch={{checkName}}
        ```


**YAML configuration**

The sample *schema_name.table_name.dqotable.yaml* file with the check configured is shown below.


```yaml hl_lines="{{checkSampleBeginLine}}-{{checkSampleEndLine}}"
{{{sampleYaml}}}
```

??? info "Samples of generated SQL queries for each data source type"

    Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
    [{{sensor.sensorName}}](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})
    [data quality sensor](../../../dqo-concepts/definition-of-data-quality-sensors.md).

    {{#each providerTemplates~}}

    ??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

        === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"

            ```sql+jinja
            {{#each listOfJinjaTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
        === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"

            ```sql
            {{#each listOfRenderedTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
    {{/each~}}

{{#if splitSampleYamlWithDataStreams}}

Expand the *Configure with data grouping* section to see additional examples for configuring this data quality checks to use data grouping (GROUP BY).

??? info "Configuration with data grouping"

    **Sample configuration with data grouping enabled (YAML)**
    The sample below shows how to configure the data grouping and how it affects the generated SQL query.

    ```yaml hl_lines="{{firstSectionBeginMarker}}-{{firstSectionEndMarker}} {{secondSectionBeginMarker}}-{{secondSectionEndMarker}}"
    {{#each splitSampleYamlWithDataStreams~}}
    {{{this}}}
    {{/each~}}
    ```

    Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
    [{{sensor.sensorName}}](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})
    [sensor](../../../dqo-concepts/definition-of-data-quality-sensors.md).

    {{#each providerTemplatesDataStreams~}}

    ??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

        === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql+jinja
            {{#each listOfJinjaTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
        === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql
            {{#each listOfRenderedTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
    {{/each~}}
{{/if}}
___

{{/each}}

## What's next
- Learn how to [configure data quality checks](../../../dqo-concepts/configuring-data-quality-checks-and-rules.md) in DQOps
- Look at the examples of [running data quality checks](../../../dqo-concepts/running-data-quality-checks.md), targeting tables and columns
