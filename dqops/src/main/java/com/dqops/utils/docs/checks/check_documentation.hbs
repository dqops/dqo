**{{replace primaryCheckName "_" " "}}** checks{{#with "  "}}{{.}}{{/with}}
{{#if checkSpecClassJavaDoc}}
**Description**{{#with "  "}}{{.}}{{/with}}
{{checkSpecClassJavaDoc}}
{{else}}
{{/if}}
___
{{#each allChecks}}
## **{{replace checkName  "_" " "}}**{{#with "  "}}{{.}}{{/with}}
{{#with "  "}}{{.}}{{/with}}
**Check description**{{#with "  "}}{{.}}{{/with}}
{{checkHelp}}{{#with "  "}}{{.}}{{/with}}
{{#with "  "}}{{.}}{{/with}}
|Check name|Check type|Time scale|Quality dimension|Sensor definition|Quality rule|
|----------|----------|----------|-----------------|-----------------|------------|
|{{checkName}}|{{checkType}}|{{#if timeScale}}{{timeScale}}{{else}} {{/if}}|{{qualityDimension}}|[{{sensor.sensorName}}](../../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors/#{{replace sensor.sensorName "_" "-"}})|[{{rule.ruleName}}](../../../../reference/rules/{{capitalizeFirst rule.category}}/#{{replace rule.ruleName "_" "-"}})|
{{#with "  "}}{{.}}{{/with}}
**Activate check (Shell)**{{#with "  "}}{{.}}{{/with}}
Activate this data quality using the [check activate](../../../../command-line-interface/check/#dqo-check-activate) CLI command, providing the connection name, check name, and all other filters.

```
dqo> check activate -c=connection_name -ch={{checkName}}
```

**Run check (Shell)**{{#with "  "}}{{.}}{{/with}}
Run this data quality check using the [check run](../../../../command-line-interface/check/#dqo-check-run) CLI command by providing the check name and all other targeting filters.

```
dqo> check run -ch={{checkName}}
```

It is also possible to run this check on a specific connection. In order to do this, add the connection name to the below

```
dqo> check run -c=connection_name -ch={{checkName}}
```

It is additionally feasible to run this check on a specific table. In order to do this, add the table name to the below

```
dqo> check run -c=connection_name -t=schema_name.table_name -ch={{checkName}}
```

**Check structure (YAML)**
```yaml
{{#each checkSample~}}
{{{this}}}
{{/each~}}
```
**Sample configuration (YAML)**{{#with "  "}}{{.}}{{/with}}
The sample *schema_name.table_name.dqotable.yaml* file with the check configured is shown below.
{{#with "  "}}{{.}}{{/with}}
```yaml hl_lines="{{checkSampleBeginLine}}-{{checkSampleEndLine}}"
{{{sampleYaml}}}
```

Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
[{{sensor.sensorName}}](../../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors/#{{replace sensor.sensorName "_" "-"}})
[sensor](../../../dqo-concepts/sensors/sensors.md).

{{#each providerTemplates~}}

??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

    === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"

        ```sql+jinja
        {{#each listOfJinjaTemplate~}}
        {{{this}}}
        {{/each~}}
        ```
    === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"

        ```sql
        {{#each listOfRenderedTemplate~}}
        {{{this}}}
        {{/each~}}
        ```
{{/each~}}
{{#if splitSampleYamlWithDataStreams}}
{{#with "  "}}{{.}}{{/with}}
Expand the *Configure with data grouping* section to see additional examples for configuring this data quality checks to use data grouping (GROUP BY).

??? info "Configuration with data grouping"
    {{#with "  "}}{{.}}{{/with}}
    **Sample configuration with data grouping enabled (YAML)**{{#with "  "}}{{.}}{{/with}}
    The sample below shows how to configure the data grouping and how it affects the generated SQL query.

    ```yaml hl_lines="{{firstSectionBeginMarker}}-{{firstSectionEndMarker}} {{secondSectionBeginMarker}}-{{secondSectionEndMarker}}"
    {{#each splitSampleYamlWithDataStreams~}}
    {{{this}}}
    {{/each~}}
    ```

    Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
    [{{sensor.sensorName}}](../../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors/#{{replace sensor.sensorName "_" "-"}})
    [sensor](../../../dqo-concepts/sensors/sensors.md).

    {{#each providerTemplatesDataStreams~}}

    ??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

        === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql+jinja
            {{#each listOfJinjaTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
        === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql
            {{#each listOfRenderedTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
    {{/each~}}
{{/if}}
{{#if runOnConnectionCliCommand}}
**CLI command to run check on connection**{{#with "  "}}{{.}}{{/with}}
```
{{runOnConnectionCliCommand}}
```
{{else}}
{{/if}}
{{#if runOnTableCliCommand}}
**CLI command to run check on table**{{#with "  "}}{{.}}{{/with}}
```
{{runOnTableCliCommand}}
```
{{else}}
{{/if}}
{{#if runOnColumnCliCommand}}
**CLI command to run check on column**{{#with "  "}}{{.}}{{/with}}
```
{{runOnColumnCliCommand}}
```
{{else}}
{{/if}}
___
{{/each}}