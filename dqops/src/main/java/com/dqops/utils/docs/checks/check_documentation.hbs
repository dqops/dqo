**{{replace primaryCheckName "_" " "}}** checks
{{#if checkSpecClassJavaDoc}}
**Description**
{{checkSpecClassJavaDoc}}
{{else}}
{{/if}}
___
{{#each allChecks}}
## **{{replace checkName  "_" " "}}**


**Check description**
{{checkHelp}}

|Check name|Check type|Time scale|Quality dimension|Sensor definition|Quality rule|
|----------|----------|----------|-----------------|-----------------|------------|
|{{checkName}}|{{checkType}}|{{#if timeScale}}{{timeScale}}{{else}} {{/if}}|{{qualityDimension}}|[{{sensor.sensorName}}](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})|[{{rule.ruleName}}](../../../reference/rules/{{capitalizeFirst rule.category}}.md#{{replace rule.ruleName "_" "-"}})|

??? example "Managing {{replace checkName  "_" " "}} check from DQOps shell"

    === "Activate check"

        Activate this data quality using the [check activate](../../../command-line-interface/check.md#dqo-check-activate) CLI command, providing the connection name, check name, and all other filters.

        ```
        dqo> check activate -c=connection_name -ch={{checkName}}
        ```

    === "Run check on connection"

        Run this data quality check using the [check run](../../../command-line-interface/check.md#dqo-check-run) CLI command by providing the check name and all other targeting filters.

        ```
        dqo> check run -c=connection_name -ch={{checkName}}
        ```

    === "Run check on table"

        It is also possible to run this check on a specific connection and table. In order to do this, use the connection name and the full table name parameters

        ```
        dqo> check run -c=connection_name -t=schema_name.table_name -ch={{checkName}}
        ```

**Sample configuration (YAML)**
The sample *schema_name.table_name.dqotable.yaml* file with the check configured is shown below.


```yaml hl_lines="{{checkSampleBeginLine}}-{{checkSampleEndLine}}"
{{{sampleYaml}}}
```

??? info "Samples of generated SQL queries for each data source type"

    Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
    [{{sensor.sensorName}}](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})
    [sensor](../../../dqo-concepts/sensors/sensors.md).

    {{#each providerTemplates~}}

    ??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

        === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"

            ```sql+jinja
            {{#each listOfJinjaTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
        === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"

            ```sql
            {{#each listOfRenderedTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
    {{/each~}}

{{#if splitSampleYamlWithDataStreams}}

Expand the *Configure with data grouping* section to see additional examples for configuring this data quality checks to use data grouping (GROUP BY).

??? info "Configuration with data grouping"

    **Sample configuration with data grouping enabled (YAML)**
    The sample below shows how to configure the data grouping and how it affects the generated SQL query.

    ```yaml hl_lines="{{firstSectionBeginMarker}}-{{firstSectionEndMarker}} {{secondSectionBeginMarker}}-{{secondSectionEndMarker}}"
    {{#each splitSampleYamlWithDataStreams~}}
    {{{this}}}
    {{/each~}}
    ```

    Please expand the database engine name section to see the SQL query rendered by a Jinja2 template for the
    [{{sensor.sensorName}}](../../../reference/sensors/{{target}}/{{sensor.category}}-{{target}}-sensors.md#{{replace sensor.sensorName "_" "-"}})
    [sensor](../../../dqo-concepts/sensors/sensors.md).

    {{#each providerTemplatesDataStreams~}}

    ??? example "{{{providerTypeModel.providerTypeDisplayName}}}"

        === "Sensor template for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql+jinja
            {{#each listOfJinjaTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
        === "Rendered SQL for {{{providerTypeModel.providerTypeDisplayName}}}"
            ```sql
            {{#each listOfRenderedTemplate~}}
            {{{this}}}
            {{/each~}}
            ```
    {{/each~}}
{{/if}}
{{#if runOnConnectionCliCommand}}
**CLI command to run check on connection**
```
{{runOnConnectionCliCommand}}
```
{{else}}
{{/if}}
{{#if runOnTableCliCommand}}
**CLI command to run check on table**
```
{{runOnTableCliCommand}}
```
{{else}}
{{/if}}
{{#if runOnColumnCliCommand}}
**CLI command to run check on column**
```
{{runOnColumnCliCommand}}
```
{{else}}
{{/if}}
___
{{/each}}