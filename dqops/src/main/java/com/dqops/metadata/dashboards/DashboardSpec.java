/*
 * Copyright Â© 2021-Present DQOps, Documati sp. z o.o. (support@dqops.com)
 *
 * This file is licensed under the Business Source License 1.1,
 * which can be found in the root directory of this repository.
 *
 * Change Date: This file will be licensed under the Apache License, Version 2.0,
 * four (4) years from its last modification date.
 */
package com.dqops.metadata.dashboards;

import com.dqops.metadata.basespecs.AbstractSpec;
import com.dqops.metadata.id.*;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.annotation.JsonNaming;
import lombok.EqualsAndHashCode;

import java.util.*;

/**
 * Description of a single dashboard that is available in the platform.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
@EqualsAndHashCode(callSuper = true)
public class DashboardSpec extends AbstractSpec implements Cloneable {
    private static final ChildHierarchyNodeFieldMapImpl<DashboardSpec> FIELDS = new ChildHierarchyNodeFieldMapImpl<>(AbstractSpec.FIELDS) {
        {
        }
    };

    @JsonPropertyDescription("Dashboard name")
    private String dashboardName;

    @JsonPropertyDescription("Dashboard url")
    private String url;

    @JsonPropertyDescription("Dashboard width (px)")
    private Integer width;

    @JsonPropertyDescription("Dashboard height (px)")
    private Integer height;

    @JsonPropertyDescription("Shows the dashboard always in the data quality dashboard section. The dashboards that are not 'standard' are advanced dashboards, hidden initially.")
    @JsonInclude(JsonInclude.Include.NON_DEFAULT)
    private boolean standard;

    @JsonPropertyDescription("Disables showing a thumbnail. A thumbnail url for Looker Studio dashboards is generated by adding /thumbnail to the end of the dashboard's url. It is a Google generated thumbnail of the dashboard.")
    @JsonInclude(JsonInclude.Include.NON_DEFAULT)
    private boolean disableThumbnail;

    @JsonPropertyDescription("Key/value dictionary of additional parameters to be passed to the dashboard")
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    private Map<String, String> parameters;

    /**
     * Returns the name of the dashboard.
     * @return Dashboard name.
     */
    public String getDashboardName() {
        return dashboardName;
    }

    /**
     * Sets the name of the dashboard.
     * @param dashboardName Dashboard name.
     */
    public void setDashboardName(String dashboardName) {
        this.setDirtyIf(!Objects.equals(this.dashboardName, dashboardName));
        this.dashboardName = dashboardName;
    }

    /**
     * Returns the url of the dashboard.
     * @return Url of the dashboard.
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the url to the dashboard.
     * @param url Url of the dashboard.
     */
    public void setUrl(String url) {
        this.setDirtyIf(!Objects.equals(this.url, url));
        this.url = url;
    }

    /**
     * Returns the dashboard width in pixels.
     * @return Dashboard width.
     */
    public Integer getWidth() {
        return width;
    }

    /**
     * Sets the dashboard width in pixels.
     * @param width Dashboard width.
     */
    public void setWidth(Integer width) {
        this.setDirtyIf(!Objects.equals(this.width, width));
        this.width = width;
    }

    /**
     * Returns the dashboard height in pixels.
     * @return Dashboard height.
     */
    public Integer getHeight() {
        return height;
    }

    /**
     * Sets the dashboard height in pixels.
     * @param height Dashboard height.
     */
    public void setHeight(Integer height) {
        this.setDirtyIf(!Objects.equals(this.height, height));
        this.height = height;
    }

    /**
     * Returns true if it is a standard dashboard that should be always shown in the data quality dashboards section.
     * @return True when it is a standard dashboard.
     */
    public boolean isStandard() {
        return standard;
    }

    /**
     * Sets the flag to show the dashboard as a standard dashboard - shown always.
     * @param standard True when it is a standard dashboard.
     */
    public void setStandard(boolean standard) {
        this.setDirtyIf(this.standard != standard);
        this.standard = standard;
    }

    /**
     * When true, thumbnail preview is disabled.
     * @return True when thumbnails should not be shown.
     */
    public boolean isDisableThumbnail() {
        return disableThumbnail;
    }

    /**
     * Sets a flag to disable showing dashboard thumbnails.
     * @param disableThumbnail Disable showing dashboard thumbnails.
     */
    public void setDisableThumbnail(boolean disableThumbnail) {
        this.setDirtyIf(this.disableThumbnail != disableThumbnail);
        this.disableThumbnail = disableThumbnail;
    }

    /**
     * Returns a key/value map of additional parameters passed to the dashboard in an url.
     * @return Key/value dictionary of additional dashboard parameters.
     */
    public Map<String, String> getParameters() {
        return parameters;
    }

    /**
     * Sets a dictionary of additional parameters passed to the dashboard.
     * @param parameters Key/value dictionary with extra parameters.
     */
    public void setParameters(Map<String, String> parameters) {
        setDirtyIf(!Objects.equals(this.parameters, parameters));
        this.parameters = parameters != null ? Collections.unmodifiableMap(parameters) : null;
    }

    /**
     * Retrieves the folder path to this dashboard.
     * @param rootNode Root node, used to find folder nodes to retrieve their names.
     * @return Folder path to this dashboard.
     */
    @JsonIgnore
    public List<String> getFolderPath(HierarchyNode rootNode) {
        List<String> folderPath = new ArrayList<>();
        HierarchyId hierarchyId = this.getHierarchyId();
        HierarchyNode[] nodesOnPath = hierarchyId.getNodesOnPath(rootNode);

        for (HierarchyNode nodeOnPath : nodesOnPath) {
            if (nodeOnPath instanceof DashboardsFolderSpec) {
                DashboardsFolderSpec folderSpec = (DashboardsFolderSpec) nodeOnPath;
                folderPath.add(folderSpec.getFolderName());
            }
        }

        return folderPath;
    }

    /**
     * Returns the child map on the spec class with all fields.
     *
     * @return Return the field map.
     */
    @Override
    protected ChildHierarchyNodeFieldMap getChildMap() {
        return FIELDS;
    }

    /**
     * Calls a visitor (using a visitor design pattern) that returns a result.
     *
     * @param visitor   Visitor instance.
     * @param parameter Additional parameter that will be passed back to the visitor.
     */
    @Override
    public <P, R> R visit(HierarchyNodeResultVisitor<P, R> visitor, P parameter) {
        return visitor.accept(this, parameter);
    }

    /**
     * Creates and returns a deep clone (copy) of this object.
     */
    @Override
    public DashboardSpec deepClone() {
        return (DashboardSpec) super.deepClone();
    }
}
