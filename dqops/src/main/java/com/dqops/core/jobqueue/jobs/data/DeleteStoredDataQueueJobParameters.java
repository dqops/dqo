/*
 * Copyright Â© 2021 DQOps (support@dqops.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dqops.core.jobqueue.jobs.data;

import com.dqops.metadata.search.CheckSearchFilters;
import com.dqops.utils.docs.SampleValueFactory;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.time.LocalDate;
import java.util.List;

/**
 * Parameters for the "delete stored data* queue job that deletes data from parquet files stored in DQOps user home's *.data* directory.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Data
@EqualsAndHashCode(callSuper = false)
public class DeleteStoredDataQueueJobParameters implements Cloneable {
    // @NotNull  // should be NotNull, but there are errors in TypeScript (CheckTableHeader.tsx)
    @JsonPropertyDescription("The connection name.")
    private String connectionName;

    @JsonPropertyDescription("The schema and table name. It is provided as *<schema_name>.<table_name>*, for example *public.fact_sales*. This filter does not support patterns.")
    private String schemaTableName;

    @JsonPropertyDescription("The start date (inclusive) to delete the data, based on the *time_period* column in Parquet files.")
    private LocalDate dateStart;

    @JsonPropertyDescription("The end date (inclusive) to delete the data, based on the *time_period* column in Parquet files.")
    private LocalDate dateEnd;

    @JsonPropertyDescription("Delete the data from the [errors](../../reference/parquetfiles/errors.md) table. " +
            "Because the default value is *false*, this parameter must be set to *true* to delete the errors.")
    private boolean deleteErrors = false;

    @JsonPropertyDescription("Delete the data from the [statistics](../../reference/parquetfiles/statistics.md) table. " +
            "Because the default value is *false*, this parameter must be set to *true* to delete the statistics.")
    private boolean deleteStatistics = false;

    @JsonPropertyDescription("Delete the data from the [check_results](../../reference/parquetfiles/check_results.md) table. " +
            "Because the default value is *false*, this parameter must be set to *true* to delete the check results.")
    private boolean deleteCheckResults = false;

    @JsonPropertyDescription("Delete the data from the [sensor_readouts](../../reference/parquetfiles/sensor_readouts.md) table. " +
            "Because the default value is *false*, this parameter must be set to *true* to delete the sensor readouts.")
    private boolean deleteSensorReadouts = false;

    @JsonPropertyDescription("The list of column names to delete the data for column level results or errors only for selected columns.")
    private List<String> columnNames;

    @JsonPropertyDescription("The check category name, for example *volume* or *anomaly*.")
    private String checkCategory;

    @JsonPropertyDescription("The name of a table comparison configuration. Deletes only table comparison results (and errors) for a given comparison.")
    private String tableComparisonName;

    @JsonPropertyDescription("The name of a data quality check. Uses the short check name, for example *daily_row_count*.")
    private String checkName;

    @JsonPropertyDescription("The type of checks whose results and errors should be deleted. For example, use *monitoring* to delete only monitoring checks data.")
    private String checkType;

    @JsonPropertyDescription("The full sensor name whose results, checks based on the sensor, statistics and errors generated by the sensor sound be deleted. Uses a full sensor name, for example: *table/volume/row_count*.")
    private String sensorName;

    @JsonPropertyDescription("The names of data groups in any of the *grouping_level_1*...*grouping_level_9* columns in the Parquet tables. Enables deleting data tagged for one data source or a subset of results " +
           "when the group level is captured from a column in a monitored table.")
    private String dataGroupTag;

    @JsonPropertyDescription("The data quality dimension name, for example *Timeliness* or *Completeness*.")
    private String qualityDimension;

    @JsonPropertyDescription("The time gradient (time scale) of the sensor and check results that are captured.")
    private String timeGradient;

    @JsonPropertyDescription("The statistics collector category when statistics should be deleted. A statistics category is a group of statistics, for example *sampling* for the column value samples.")
    private String collectorCategory;

    @JsonPropertyDescription("The statistics collector name when only statistics are deleted for a selected collector, for example *sample_values*.")
    private String collectorName;

    @JsonPropertyDescription("The type of the target object for which the basic statistics are deleted. Supported values are *table* and *column*.")
    private String collectorTarget;

    public DeleteStoredDataQueueJobParameters() {
    }

    /**
     * Creates parameters for a delete stored data job.
     * @param connectionName  Connection name.
     * @param schemaTableName Schema.table name.
     * @param dateStart       Beginning of the period marked for deletion (only year and month considered by default).
     * @param dateEnd         End of the period marked for deletion (only year and month considered by default).
     */
    public DeleteStoredDataQueueJobParameters(String connectionName,
                                              String schemaTableName,
                                              LocalDate dateStart,
                                              LocalDate dateEnd) {
        this.connectionName = connectionName;
        this.schemaTableName = schemaTableName;
        this.dateStart = dateStart;
        this.dateEnd = dateEnd;
    }

    /**
     * Creates a job parameters object by relying on info provided in CheckSearchFilters.
     * @param checkSearchFilters Check search filters object providing the basis for the job parameters.
     * @return Delete stored data job parameters based on the filters.
     */
    public static DeleteStoredDataQueueJobParameters fromCheckSearchFilters(CheckSearchFilters checkSearchFilters) {
        if (checkSearchFilters == null) {
            return null;
        }

        return new DeleteStoredDataQueueJobParameters() {{
            setConnectionName(checkSearchFilters.getConnectionName());
            setSchemaTableName(checkSearchFilters.getSchemaTableName());
            setColumnNames(checkSearchFilters.getColumnName() != null ? List.of(checkSearchFilters.getColumnName()) : null);
            setCheckType(checkSearchFilters.getCheckType() != null ? checkSearchFilters.getCheckType().getDisplayName() : null);
            setTimeGradient(checkSearchFilters.getTimeScale() != null ? checkSearchFilters.getTimeScale().toTimeSeriesGradient().name() : null);
            setCheckName(checkSearchFilters.getCheckName());
            setSensorName(checkSearchFilters.getSensorName());
            setCheckCategory(checkSearchFilters.getCheckCategory());
            setTableComparisonName(checkSearchFilters.getTableComparisonName());

            setDeleteCheckResults(true);
            setDeleteErrors(true);
            setDeleteStatistics(true);
            setDeleteSensorReadouts(true);
        }};
    }

    @Override
    public DeleteStoredDataQueueJobParameters clone() {
        try {
            DeleteStoredDataQueueJobParameters clone = (DeleteStoredDataQueueJobParameters) super.clone();
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
    }

    public static class DeleteStoredDataQueueJobParametersSampleFactory implements SampleValueFactory<DeleteStoredDataQueueJobParameters> {
        @Override
        public DeleteStoredDataQueueJobParameters createSample() {
            return fromCheckSearchFilters(new CheckSearchFilters.CheckSearchFiltersSampleFactory().createSample());
        }
    }
}
