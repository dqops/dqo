/*
 * Copyright Â© 2021-Present DQOps, Documati sp. z o.o. (support@dqops.com)
 *
 * This file is licensed under the Business Source License 1.1,
 * which can be found in the root directory of this repository.
 *
 * Change Date: This file will be licensed under the Apache License, Version 2.0,
 * four (4) years from its last modification date.
 */
package com.dqops.rest.server.openapi;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Post processes files generated by OpenApi generator to fix invalid enum names.
 */
public class OpenApiTypescriptGeneratorPostProcessor {
    /**
     * Reads a list of entries and fixes invalid lines with enum entries.
     * @param originalFileLines List of lines loaded from a text file.
     * @return A list of new file lines if changes were applied to the content of the file or null when no changes are necessary.
     */
    public static List<String> fixEnumEntries(List<String> originalFileLines) {
        ArrayList<String> newLines = new ArrayList<>();

        boolean fileModified = false;
        boolean insideEnumType = false;

        for (int i = 0; i < originalFileLines.size(); i++) {
            String currentLine = originalFileLines.get(i);
            int indexOfColon = currentLine.indexOf(':');

            if (insideEnumType && indexOfColon > 0) {
                String enumValueConstant = currentLine.substring(indexOfColon + 2);
                if (enumValueConstant.startsWith("'") && (enumValueConstant.endsWith("'") || enumValueConstant.endsWith("',"))) {
                    // enum string line to fix like:      YyyyMmDd: 'YYYY-MM-DD',
                    String enumValue = enumValueConstant.substring(1, enumValueConstant.endsWith("'") ? enumValueConstant.length() - 1 :
                            enumValueConstant.length() - 2);

                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("    ");
                    for (char enumChar : enumValue.toCharArray()) {
                        if (Character.isLetter(enumChar) || enumChar == '_') {
                            stringBuilder.append(enumChar);
                        }
                        else if (Character.isDigit(enumChar)) {
                            if (stringBuilder.length() <= 4) {
                                stringBuilder.append('D'); // cannot start a variable with a char
                            }
                            stringBuilder.append(enumChar);
                        }
                        else {
                            // any other character
                            stringBuilder.append('x');
                            stringBuilder.append(Integer.toHexString((int)enumChar));
                        }
                    }

                    stringBuilder.append(": ");
                    stringBuilder.append(enumValueConstant);

//                    System.out.println("Fixing line: " + currentLine);
                    currentLine = stringBuilder.toString();
//                    System.out.println("To new line: " + currentLine);

                    fileModified = true;
                }
            }
            else {
                if (currentLine.startsWith("export const ") && currentLine.endsWith(" = {")) {
                    insideEnumType = true;
                }
                else if (currentLine.startsWith("} as const;")) {
                    insideEnumType = false;
                }
            }

            newLines.add(currentLine);
        }

        if (fileModified) {
            return newLines;
        }

        return null; // no changes
    }

    /**
     * Main method of the openapi generator fix utility that fixes wrong enum names for typescript.
     * @param args Command line arguments.
     * @throws Exception
     */
    public static void main(String[] args) throws Exception {
        if (args.length == 0) {
            System.out.println("OpenAPI generator for typescript fix utility");
            System.out.println("Missing required parameter: <path to the typescript folder generated by OpenAPI generator>");
            return;
        }

        Stream<Path> filesStream = Files.list(Path.of(args[0]));
        List<Path> fileList = filesStream.collect(Collectors.toList());
        filesStream.close();

        for (Path pathToFile : fileList) {
            if (Files.isDirectory(pathToFile)) {
                continue;
            }

            List<String> originalFileLines = Files.readAllLines(pathToFile);
            List<String> fixedFileLines = fixEnumEntries(originalFileLines);

            if (fixedFileLines != null) {
                Files.write(pathToFile, fixedFileLines, StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING);
                System.out.println("File " + pathToFile.toString() + " was rewritten to fix invalid enum declarations.");
            }
        }
    }
}
