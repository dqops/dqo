{% set macro_project_name =  connection.bigquery.source_project_id -%}
{% set macro_schema_name = target_table.schema_name -%}
{% set macro_table_name = target_table.table_name -%}
{% set time_series = effective_time_series | default(none, true) -%}
{% set time_window_filter = effective_time_window_filter | default(none, true) -%}
{% set timestamp_column_data_type = table.columns[time_series.timestamp_column].type_snapshot.column_type | upper | default(none, true) -%}
{% set data_groupings = effective_data_groupings | default(none, true) -%}
{% set target_column_data_type = table.columns[column_name].type_snapshot.column_type | default(none, true) -%}
{% set calculated_column_expression = table.columns[column_name].sql_expression | default('', true) -%}

{% macro quote_identifier(name) -%}
    {{ dialect_settings.quote_begin }}{{ name | replace(dialect_settings.quote_end, dialect_settings.quote_escape) }}{{ dialect_settings.quote_end }}
{%- endmacro %}

{% macro make_text_constant(string) -%}
    {{ '\'' }}{{ string | replace('\'', '\'\'') }}{{ '\'' }}
{%- endmacro %}

{% macro eol() -%}
{{ '' }}
{% endmacro %}

{%- macro render_target_table() -%}
    {{ quote_identifier(macro_project_name) }}.{{ quote_identifier(macro_schema_name) }}.{{ quote_identifier(macro_table_name) }}
{%- endmacro %}

{%- macro render_target_column(table_alias_prefix = 'analyzed_table') -%}
    {%- if calculated_column_expression != '' -%}
        ({{ calculated_column_expression | replace('{column}', table_alias_prefix ~ '.' ~ quote_identifier(column_name)) | replace('{table}', render_target_table()) | replace('{alias}', table_alias_prefix) }})
    {%- else -%}
        {{ table_alias_prefix }}.{{ quote_identifier(column_name) }}
    {%- endif -%}
{%- endmacro %}

{%- macro render_column(column_name, table_alias_prefix = 'analyzed_table') -%}
    {%- if table.columns[column_name].sql_expression | default('', true) != '' -%}
        ({{ table.columns[column_name].sql_expression | replace('{table}', render_target_table()) | replace('{alias}', table_alias_prefix) }})
    {%- else -%}
        {%- if table_alias_prefix != '' -%}
            {{ table_alias_prefix }}.{{ quote_identifier(column_name) }}
        {%- else -%}
            {{ quote_identifier(column_name) }}
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}

{%- macro is_local_date(data_type) -%}
    {#-
    Check if a given parameter is a date.

    :param param: The parameter to check
    :type param: str
    :return: True if the parameter is a valid date, False otherwise
    :rtype: bool
    -#}
    {%- if data_type == 'DATE' -%}
        {{ 'true' }}
    {%- else -%}
        {{ 'false' }}
    {%- endif -%}
{% endmacro %}

{% macro is_local_time(data_type) -%}
  {#-
  Check if a given parameter is a local-time.

  :param param: The parameter to check
  :type param: str
  :return: True if the parameter is a valid local-time, False otherwise
  :rtype: bool
  -#}
   {% if data_type == 'TIME' -%}
       {{- 'true' -}}
   {%- else -%}
       {{- 'false' -}}
   {%- endif -%}
{% endmacro %}

{% macro is_local_date_time(data_type) -%}
  {#-
  Check if a given parameter is a local-date-time.

  :param param: The parameter to check
  :type param: str
  :return: True if the parameter is a valid local-date-time, False otherwise
  :rtype: bool
  -#}
   {% if data_type == 'DATETIME' -%}
       {{- 'true' -}}
   {%- else -%}
       {{- 'false' -}}
   {%- endif -%}
{% endmacro %}

{% macro is_instant(data_type) -%}
  {#-
  Check if a given parameter is a instant.

  :param param: The parameter to check
  :type param: str
  :return: True if the parameter is a valid instant, False otherwise
  :rtype: bool
  -#}
   {% if data_type == 'TIMESTAMP' -%}
       {{- 'true' -}}
   {%- else -%}
       {{- 'false' -}}
   {%- endif -%}
{% endmacro %}

{% macro date_trunc(value, part='day', datatype=none) %}
    {%- if part == 'year' -%}
        DATE_TRUNC(CAST({{value}} AS DATE), YEAR)
    {%- elif part == 'quarter' -%}
        DATE_TRUNC(CAST({{value}} AS DATE), QUARTER)
    {%- elif part == 'month' -%}
        DATE_TRUNC(CAST({{value}} AS DATE), MONTH)
    {%- elif part == 'week' -%}
        DATE_TRUNC(CAST({{value}} AS DATE), WEEK)
    {%- elif part == 'day' -%}
        {%- if datatype | upper == 'DATE' -%}
            {{value}}
        {%- else -%}
            CAST({{value}} AS DATE)
        {%- endif -%}
    {%- elif part == 'hour' -%}
        DATETIME_TRUNC(CAST({{value}} AS DATETIME), HOUR)
    {%- elif part == 'millisecond' -%}
        CAST({{value}} AS DATETIME)
    {%- else -%}
        CAST({{value}} AS DATE)
    {%- endif -%}
{% endmacro %}

{% macro render_time_dimension_expression(table_alias_prefix = 'analyzed_table') %}
    {%- if time_series is not none-%}
        {%- if time_series.mode == 'current_time' -%}
            {%- if time_series.time_gradient is defined and time_series.time_gradient != 'millisecond' -%}
                {{ date_trunc('CURRENT_TIMESTAMP()', time_series.time_gradient, 'DATETIME') }}
            {%- else -%}
                CURRENT_TIMESTAMP()
            {%- endif -%}
        {%- elif time_series.mode == 'timestamp_column' -%}
            {{ date_trunc(render_column(time_series.timestamp_column, table_alias_prefix), time_series.time_gradient, timestamp_column_data_type) }}
        {%- else -%}
            <INVALID TIME SERIES MODE: {{time_series.mode}}>
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{% macro render_data_grouping_projections(table_alias_prefix = 'analyzed_table', indentation = '    ') %}
    {%- if data_groupings is not none and (data_groupings | length()) > 0 -%}
        {%- for attribute in data_groupings -%}
            {{ ',' }}
            {%- with data_grouping_level = data_groupings[attribute] -%}
                {%- if data_grouping_level.source == 'tag' -%}
                    {{ eol() }}{{ indentation }}{{ make_text_constant(data_grouping_level.tag) }}
                {%- elif data_grouping_level.source == 'column_value' -%}
                    {{ eol() }}{{ indentation }}{{ render_column(data_grouping_level.column, table_alias_prefix) }}
                {%- endif -%}
            {%- endwith %} AS grouping_{{ attribute }}
        {%- endfor -%}
    {%- endif -%}
{% endmacro %}

{% macro render_time_dimension_projection(table_alias_prefix = 'analyzed_table', indentation = '    ') %}
    {%- if time_series is not none -%}
        {{ ',' -}}{{- eol() -}}
        {{ indentation }}{{ render_time_dimension_expression(table_alias_prefix) }} AS time_period,{{ eol() -}}
        {{ indentation }}TIMESTAMP({{ render_time_dimension_expression(table_alias_prefix) }}) AS time_period_utc
    {%- endif -%}
{% endmacro %}

{% macro render_end_date_filter(prefix_to_render = none, table_alias_prefix = 'analyzed_table') %}
    {%- if time_window_filter is not none -%}
        {%- if time_window_filter.to_date_time_offset | default(none, true) is not none -%}
            {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} < {{ make_text_constant(time_window_filter.to_date_time_offset) -}}
        {%- elif time_window_filter.to_date_time is defined and is_local_time(time_window_filter.to_date_time) -%}
            {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} < {{ make_text_constant(time_window_filter.to_date_time) -}}
        {%- elif time_window_filter.to_date is defined and is_local_date(time_window_filter.to_date) -%}
            {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} < {{ make_text_constant(time_window_filter.to_date) -}}
        {%- elif time_window_filter.daily_partitioning_include_today is false -%}
            {{ prefix_to_render -}}
            {%- if is_instant(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                CAST(CURRENT_DATE() AS TIMESTAMP)
            {%- elif is_local_date(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                CURRENT_DATE()
            {%- elif is_local_date_time(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                CAST(CURRENT_DATE() AS DATETIME)
            {%- else -%}
                CAST({{ render_column(time_series.timestamp_column, table_alias_prefix) }} AS DATE){{- ' < ' -}}
                CURRENT_DATE()
            {%- endif -%}
        {%- elif time_window_filter.monthly_partitioning_include_current_month is false -%}
            {{ prefix_to_render -}}
            {%- if is_instant(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                CAST({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }} AS TIMESTAMP)
            {%- elif is_local_date(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                {{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}
            {%- elif is_local_date_time(timestamp_column_data_type) == 'true' -%}
                {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' < ' -}}
                CAST({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }} AS DATETIME)
            {%- else -%}
                CAST({{ render_column(time_series.timestamp_column, table_alias_prefix) }} AS DATE){{- ' < ' -}}
                {{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{% macro render_date_range_filters(prefix_to_render = none, table_alias_prefix = 'analyzed_table', indentation = '      ') %}
    {%- if time_window_filter is not none -%}
        {%- if (time_series.timestamp_column | default(none, true)) is not none -%}
            {%- if time_window_filter.from_date_time_offset | default(none, true) is not none -%}
                 {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} >= {{ make_text_constant(time_window_filter.from_date_time_offset) -}}
                 {{- render_end_date_filter(eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif time_window_filter.from_date_time | default(none, true) is not none -%}
                {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} >= {{ make_text_constant(time_window_filter.from_date_time) -}}
                {{- render_end_date_filter(eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif time_window_filter.from_date | default(none, true) is not none -%}
                {{ prefix_to_render -}}{{ render_column(time_series.timestamp_column, table_alias_prefix) }} >= {{ make_text_constant(time_window_filter.from_date) -}}
                {{- render_end_date_filter(eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif time_window_filter.daily_partitioning_recent_days | default(none, true) is not none -%}
                {{ prefix_to_render -}}
                {%- if is_instant(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     CAST(DATE_ADD(CURRENT_DATE(), INTERVAL -{{time_window_filter.daily_partitioning_recent_days}} DAY) AS TIMESTAMP)
                {%- elif is_local_date(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     DATE_ADD(CURRENT_DATE(), INTERVAL -{{time_window_filter.daily_partitioning_recent_days}} DAY)
                {%- elif is_local_date_time(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     CAST(DATE_ADD(CURRENT_DATE(), INTERVAL -{{time_window_filter.daily_partitioning_recent_days}} DAY) AS DATETIME)
                {%- else -%}
                     CAST({{ render_column(time_series.timestamp_column, table_alias_prefix) }} AS DATE){{- ' >= ' -}}
                     DATE_ADD(CURRENT_DATE(), INTERVAL -{{time_window_filter.daily_partitioning_recent_days}} DAY)
                {%- endif -%}
                {{- render_end_date_filter(eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif time_window_filter.monthly_partitioning_recent_months | default(none, true) is not none -%}
                {{ prefix_to_render -}}
                {%- if is_instant(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     CAST(DATE_ADD({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}, INTERVAL -{{time_window_filter.monthly_partitioning_recent_months}} MONTH) AS TIMESTAMP)
                {%- elif is_local_date(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     DATE_ADD({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}, INTERVAL -{{time_window_filter.monthly_partitioning_recent_months}} MONTH)
                {%- elif is_local_date_time(timestamp_column_data_type) == 'true' -%}
                     {{ render_column(time_series.timestamp_column, table_alias_prefix) -}}{{- ' >= ' -}}
                     CAST(DATE_ADD({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}, INTERVAL -{{time_window_filter.monthly_partitioning_recent_months}} MONTH) AS DATETIME)
                {%- else -%}
                     CAST({{ render_column(time_series.timestamp_column, table_alias_prefix) }} AS DATE){{- ' >= ' -}}
                     DATE_ADD({{ date_trunc('CURRENT_DATE()', 'month', timestamp_column_data_type) }}, INTERVAL -{{time_window_filter.monthly_partitioning_recent_months}} MONTH)
                {%- endif -%}
                {{- render_end_date_filter(eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- else -%}
                {{- render_end_date_filter(prefix_to_render, table_alias_prefix) -}}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{% macro render_where_clause(extra_filter = none, table_alias_prefix = 'analyzed_table', indentation = '') %}
    {%- with filters = ([table.filter|default(none, true), parameters.filter|default(none, true), extra_filter|default(none, true)] | reject('none') | list) + (additional_filters | list) -%}
        {%- if (filters | length) > 0 %}
{{ indentation ~ 'WHERE ' -}}
            {%- for filter in filters -%}
                {%- if not loop.first -%}
                    {{ eol() ~ indentation ~ '      AND ' }}
                {%- endif -%}
                {{ filter | replace('{column}', render_target_column('analyzed_table')) | replace('{table}', render_target_table()) | replace('{alias}', table_alias_prefix) }}
            {%- endfor -%}
            {{ render_date_range_filters(eol() ~ indentation ~ '      AND ', table_alias_prefix, indentation ~ '      ') }}
        {%- else -%}
            {{ render_date_range_filters(eol() ~ indentation ~ 'WHERE ', table_alias_prefix, indentation ~ '      ') }}
        {%- endif -%}
    {%- endwith -%}
{% endmacro %}

{% macro render_grouping_column_names() %}
    {%- if (data_groupings is not none and (data_groupings | length()) > 0) -%}
        {%- for attribute in data_groupings -%}
            {%- if not loop.first -%}
                {{ ', ' }}
            {%- endif -%}
                grouping_{{ attribute }}
        {%- endfor -%}
    {%- endif -%}
    {%- if time_series is not none -%}
        {%- if (data_groupings is not none and (data_groupings | length()) > 0) -%}
            {{ ', ' }}
        {%- endif -%}
            {{ 'time_period' }}, {{ 'time_period_utc' }}
    {%- endif -%}
{% endmacro %}

{% macro render_group_by(indentation = '') %}
    {%- if (data_groupings is not none and (data_groupings | length()) > 0) or time_series is not none %}
{{ indentation }}GROUP BY {{ render_grouping_column_names() }}
    {%- endif -%}
{% endmacro %}

{% macro render_order_by(indentation = '') %}
    {%- if (data_groupings is not none and (data_groupings | length()) > 0) or time_series is not none %}
{{ indentation }}ORDER BY {{ render_grouping_column_names() }}
    {%- endif -%}
{% endmacro %}

{% macro render_error_sampler(wrap_condition = '') %}
    {%- if (data_groupings is not none and (data_groupings | length()) > 0)  -%}
WITH error_samples AS (
    SELECT
        {{ render_target_column('analyzed_table') }} AS sample_value
        {{ render_data_grouping_projections(table_alias_prefix = 'analyzed_table', indentation = '        ') }}
        {%- if (error_sampling.id_columns is not none and (error_sampling.id_columns | length()) > 0) -%}
            {%- for id_column in error_sampling.id_columns -%}
                {{ ',' }}
        {{ render_column(id_column, 'analyzed_table') }} AS id_{{ loop.counter }}
        {%- endfor -%}
    {%- endif -%},
        ROW_NUMBER() OVER (
            PARTITION BY
                {%- for attribute in data_groupings -%}
                    {%- if not loop.first -%}
                        {{ ', ' }}
                    {%- endif -%}
                    {%- with data_grouping_level = data_groupings[attribute] -%}
                        {%- if data_grouping_level.source == 'tag' -%}
                            {{ eol() }}{{ indentation }}{{ make_text_constant(data_grouping_level.tag) }}
                        {%- elif data_grouping_level.source == 'column_value' -%}
                            {{ eol() }}{{ indentation }}{{ render_column(data_grouping_level.column, 'analyzed_table') }}
                        {%- endif -%}
                    {%- endwith %}
                {%- endfor -%}
                {%- if (error_sampling.id_columns is not none and (error_sampling.id_columns | length()) > 0) -%}
                    {%- for id_column in error_sampling.id_columns -%}
                        {{ ',' }}
                        {{- render_column(id_column, 'analyzed_table') }} AS id_{{ loop.counter }}
                    {%- endfor %}
                {%- endif %}
            ORDER BY
                {%- if (error_sampling.id_columns is not none and (error_sampling.id_columns | length()) > 0) -%}
                    {%- for id_column in error_sampling.id_columns -%}
                        {{ ',' }}
                        {{- render_column(id_column, 'analyzed_table') }} ASC
                    {%- endfor %}
                {%- else %}
                {{ render_target_column('analyzed_table') }} ASC
                {%- endif %}
        ) AS sample_index
    FROM
        {{ render_target_table() }} AS analyzed_table
        {{- eol() }}{{ render_where_clause(extra_filter = wrap_condition ~ '(' ~ caller() ~ ')', table_alias_prefix = 'analyzed_table', indentation = '        ') }}
)
SELECT
    sample_table.sample_value AS actual_value,
    sample_table.sample_index AS sample_index
    {%- for attribute in data_groupings -%}
        {{ ', ' }}
    sample_table.grouping_{{ attribute }} AS grouping_{{ attribute }}
    {%- endfor -%}
    {%- if (error_sampling.id_columns is not none and (error_sampling.id_columns | length()) > 0) -%}
        {%- for id_column in error_sampling.id_columns -%}
            {{ ',' }}
    sample_table.id_{{ loop.counter }} AS id_{{ loop.counter }}
        {%- endfor -%}
    {%- endif %}
FROM error_samples AS sample_table
WHERE sample_table.sample_index <= {{ error_sampling.samples_limit }}
LIMIT {{ error_sampling.total_samples_limit }}
    {%- else -%}
SELECT
    {{ render_target_column('analyzed_table') }} as actual_value
    {%- if (error_sampling.id_columns is not none and (error_sampling.id_columns | length()) > 0) -%}
        {%- for id_column in error_sampling.id_columns -%}
            {{ ',' }}
    {{ render_column(id_column) }} AS id_{{ loop.counter }}
        {%- endfor -%}
    {%- endif -%}
FROM
    {{ render_target_table() }} AS analyzed_table
    {{- eol() }}{{ render_where_clause(wrap_condition ~ '(' ~ caller() ~ ')') }}
LIMIT {{ error_sampling.samples_limit }}
    {%- endif -%}
{%- endmacro %}
