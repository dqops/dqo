{% import '/dialects/mysql.sql.jinja2' as lib with context -%}

{%- macro extract_in_list(values_list) -%}
    {%- for i in values_list -%}
        {%- if not loop.last -%}
            {{lib.make_text_constant(i)}}{{", "}}
        {%- else -%}
            {{lib.make_text_constant(i)}}
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro render_from_subquery() -%}
FROM
(
    SELECT
        top_col_values.top_value as top_value,
        top_col_values.time_period as time_period,
        top_col_values.time_period_utc as time_period_utc,
        RANK() OVER(PARTITION BY top_col_values.time_period
        {{- render_data_stream('top_col_values') }}
        ORDER BY top_col_values.total_values) as top_values_rank
        {{- render_data_stream('top_col_values') }}
    FROM
    (
        SELECT
        {{ lib.render_target_column('analyzed_table') }} AS top_value,
        COUNT(*) AS total_values
        {{- lib.render_data_stream_projections('analyzed_table') }}
        {{- lib.render_time_dimension_projection('analyzed_table') }}
        FROM {{ lib.render_target_table() }} AS analyzed_table
        {{- lib.render_where_clause() }}
        {{- lib.render_group_by() }}, top_value
        {{- lib.render_order_by() }}, total_values
    ) AS top_col_values
) AS top_values
WHERE top_values_rank <= {{ parameters.top }}
{%- endmacro -%}

{%- macro render_data_stream(table_alias_prefix = '') -%}
    {%- if lib.data_streams is not none and (lib.data_streams | length()) > 0 -%}
        {%- for attribute in lib.data_streams -%}
            {{ ', ' }}
            {%- with data_stream_level = lib.data_streams[attribute] -%}
                {%- if data_stream_level.source == 'tag' -%}
                    {{ lib.make_text_constant(data_stream_level.tag) }}
                {%- elif data_stream_level.source == 'column_value' -%}
                    {{ table_alias_prefix }}.stream_{{ attribute }}
                {%- endif -%}
            {%- endwith %}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro -%}

SELECT
{%- if 'expected_values' not in parameters or parameters.expected_values|length == 0 %}
    NULL AS actual_value,
    MAX(0) AS expected_value
    {{- lib.render_data_stream_projections('analyzed_table') }}
    {{- lib.render_time_dimension_projection('analyzed_table') }}
FROM {{ lib.render_target_table() }} AS analyzed_table
    {%- else %}
    COUNT(DISTINCT
        CASE
            WHEN top_values.top_value IN ({{ extract_in_list(parameters.expected_values) }}) THEN top_values.top_value
            ELSE NULL
        END
    ) AS actual_value,
    MAX({{ parameters.expected_values | length }}) AS expected_value,
    top_values.time_period,
    top_values.time_period_utc
{{ render_from_subquery() }}
{%- endif -%}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}