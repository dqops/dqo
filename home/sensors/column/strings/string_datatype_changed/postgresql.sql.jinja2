{% import '/dialects/postgresql.sql.jinja2' as lib with context -%}

SELECT
    actual_value,
    time_period,
    time_period_utc
FROM (
    SELECT
        CASE
            WHEN COUNT(*) = SUM(matches_bool) AND COUNT(*) > 0 THEN 1
            WHEN COUNT(*) = SUM(matches_date) AND COUNT(*) > 0 THEN 2
	        WHEN COUNT(CASE WHEN matches_int > 0 AND matches_float = 0 AND matches_string = 0 AND matches_date = 0 AND matches_bool = 0 THEN 1 END) = COUNT(*) THEN 3
	        WHEN COUNT(CASE WHEN matches_int = 0 AND matches_float > 0 AND matches_string = 0 AND matches_date = 0 AND matches_bool = 0 THEN 1 END) = COUNT(*) THEN 4
	        WHEN COUNT(CASE WHEN matches_int = 0 AND matches_float = 0 AND matches_string > 0 AND matches_date = 0 AND matches_bool = 0 THEN 1 END) = COUNT(*) THEN 5
	        ELSE 0 END AS actual_value
        {{- lib.render_data_stream_projections('analyzed_table') }}
        {{- lib.render_time_dimension_projection('analyzed_table') }}
    FROM (
        SELECT
            (SELECT COUNT(*) FROM regexp_matches(CAST({{ lib.render_target_column('analyzed_table') }} AS TEXT), '^[+-]?\d+$', 'g')) AS matches_int,
            (SELECT COUNT(*) FROM regexp_matches(CAST({{ lib.render_target_column('analyzed_table') }} AS TEXT), '^[+-]?\d+\.\d+$', 'g')) AS matches_float,
            (SELECT COUNT(*) FROM regexp_matches(CAST({{ lib.render_target_column('analyzed_table') }} AS TEXT), '^[^0-9]*$', 'g')) AS matches_string,
            (SELECT COUNT(*) FROM regexp_matches(CAST({{ lib.render_target_column('analyzed_table') }} AS TEXT), '^((20|21|22)\d{2})([\/\-\.])((0?[1-9]|1[012])([\/\-\.])(0?[1-9]|[12][0-9]|3[01])|((0?[1-9]|[12][0-9]|3[01])([\/\-\.])(0?[1-9]|1[012])))(\s(0?[0-9]|1[0-9]|2[0-3]):([0-5][0-9])(:([0-5][0-9]))?)?$|(?:\d{4}[./-]\d{2}[./-]\d{2}(?: \d{2}:\d{2}:\d{2})?|\d{2}[./-]\d{2}[./-]\d{4}(?: \d{2}:\d{2}(?::\d{2})?)?)$|^(\d{4})[-./](\d{2})[-./](\d{2})([ T]\d{2}:\d{2}:\d{2})?$|^(\d{2})[-./](\d{2})[-./](\d{2})$', 'g')) AS matches_date,
            (SELECT COUNT(*) FROM regexp_matches(CAST({{ lib.render_target_column('analyzed_table') }} AS TEXT), '^(1|0|true|false|TRUE|FALSE|yes|no|YES|NO|y|n|Y|N|t|f|T|F)$', 'g')) AS matches_bool
        {{- lib.render_data_stream_projections('analyzed_table') }}
        {{- lib.render_time_dimension_projection('analyzed_table') }}
        FROM {{ lib.render_target_table() }} AS analyzed_table
    ) AS data_type_counts
    {{- lib.render_where_clause() -}}
    {{- lib.render_group_by() -}}
) AS result
{{- lib.render_order_by() -}}