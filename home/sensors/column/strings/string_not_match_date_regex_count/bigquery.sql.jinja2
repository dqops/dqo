{% import '/dialects/bigquery.sql.jinja2' as lib with context -%}

{% macro render_date_format(named_date_format) %}
    {%- if named_date_format == 'ISO8601'-%}
        '%Y-%m-%d'
    {%- elif named_date_format == 'MonthSlashDaySlashYear' -%}
        '%m/%d/%Y'
    {%- elif named_date_format == 'MonthDotDayDotYear' -%}
            '%m.%d.%Y'
    {%- elif named_date_format == 'MonthDashDayDashYear' -%}
            '%m-%d-%Y'
    {%- elif named_date_format == 'DaySlashMonthSlashYear' -%}
        '%d/%m/%Y'
    {%- elif named_date_format == 'DayDotMonthDotYear' -%}
            '%d.%m.%Y'
    {%- elif named_date_format == 'DayDashMonthDashYear' -%}
            '%d-%m-%Y'
    {%- elif named_date_format == 'YearSlashMonthSlashDay'-%}
        '%Y/%m/%d'
    {%- elif named_date_format == 'YearDotMonthDotDay'-%}
        '%Y.%m.%d'
    {%- elif named_date_format == 'YearDashMonthDashDay'-%}
        '%Y-%m-%d'
    {%- elif named_date_format == 'MonthNameSpaceDaySpaceYear'-%}
        '%b %d %Y'
    {%- elif named_date_format == 'DaySpaceMonthNameSlashYear'-%}
        '%d %b/%Y'
    {%- elif named_date_format == 'DaySpaceMonthNameDotYear'-%}
        '%d %b.%Y'
    {%- elif named_date_format == 'DaySpaceMonthNameDashYear'-%}
        '%d %b-%Y'
    {%- elif named_date_format == 'DaySpaceMonthNameSpaceYear'-%}
        '%d %b %Y'
    {%- elif named_date_format == 'YearSpaceMonthNameSlashDay'-%}
        '%Y %b/%d'
    {%- elif named_date_format == 'YearSpaceMonthNameDotDay'-%}
        '%Y %b.%d'
    {%- elif named_date_format == 'YearSpaceMonthNameDashDay'-%}
        '%Y %b-%d'
    {%- elif named_date_format == 'YearSpaceMonthNameSpaceDay'-%}
        '%Y %b %d'
    {%- endif -%}
{% endmacro -%}

SELECT
CASE
 WHEN COUNT({{ lib.render_target_column('analyzed_table') }}) = 0 THEN NULL
ELSE
 SUM(
    CASE WHEN SAFE.PARSE_DATE({{ lib.render_date_format(parameters.named_date_format) }}, SAFE_CAST({{ lib.render_target_column('analyzed_table') }} AS STRING))
    IS NULL THEN 1
    ELSE 0
END
) END AS actual_value
    {{- lib.render_data_stream_projections('analyzed_table') }}
    {{- lib.render_time_dimension_projection('analyzed_table') }}
FROM {{ lib.render_target_table() }} AS analyzed_table
{{- lib.render_where_clause() -}}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}