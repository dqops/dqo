{% import '/dialects/postgresql.sql.jinja2' as lib with context -%}

{% macro render_value_in_future() -%}
    {%- if lib.is_instant(table.columns[column_name].type_snapshot.column_typ) == 'true' -%}
            CASE
                WHEN {{ lib.render_target_column('analyzed_table') }} > CURRENT_TIMESTAMP
                    THEN 1
                ELSE 0
            END
    {%- elif lib.is_local_date(table.columns[column_name].type_snapshot.column_type) == 'true' -%}
            CASE
                WHEN {{ lib.render_target_column('analyzed_table') }} > CURRENT_DATE
                    THEN 1
                ELSE 0
            END
    {%- elif lib.is_local_date_time(table.columns[column_name].type_snapshot.column_type) == 'true' -%}
            CASE
                WHEN {{ lib.render_target_column('analyzed_table') }} > CURRENT_DATETIME
                    THEN 1
                ELSE 0
            END
    {%- else -%}
            CASE
                WHEN ({{ lib.render_target_column('analyzed_table') }})::TIMESTAMP > CURRENT_TIMESTAMP
                    THEN 1
                ELSE 0
            END
    {%- endif -%}
{%- endmacro -%}

SELECT
    CASE
        WHEN COUNT({{ lib.render_target_column('analyzed_table') }}) = 0 THEN 0.0
        ELSE 100.0 * SUM(
            {{ render_value_in_future() }}
        ) / COUNT({{ lib.render_target_column('analyzed_table') }})
    END AS actual_value
    {{- lib.render_data_grouping_projections('analyzed_table') }}
    {{- lib.render_time_dimension_projection('analyzed_table') }}
FROM {{ lib.render_target_table() }} AS analyzed_table
{{- lib.render_where_clause() -}}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}