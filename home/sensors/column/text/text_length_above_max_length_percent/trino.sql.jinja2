{% import '/dialects/trino.sql.jinja2' as lib with context -%}

{% macro render_column_cast_to_string(analyzed_table_to_render) -%}
    {%- if (lib.target_column_data_type == 'STRING') -%}
        {{ lib.render_target_column(analyzed_table_to_render) }}
    {%- elif (lib.target_column_data_type == 'BIGNUMERIC') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'DECIMAL') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'BIGDECIMAL') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'FLOAT64') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'INT64') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'NUMERIC') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'INT') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'SMALLINT') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'INTEGER') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'BIGINT') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'TINYINT') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'BYTEINT') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'DATE') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'DATETIME') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'TIME') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'TIMESTAMP') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- elif (lib.target_column_data_type == 'BOOLEAN') -%}
        TRY_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS STRING)
    {%- else -%}
        {{ lib.render_target_column(analyzed_table_to_render) }}
    {%- endif -%}
{% endmacro -%}

SELECT
    CASE
        WHEN COUNT({{ lib.render_target_column('analyzed_table') }}) = 0 THEN 0.0
        ELSE CAST(100.0 * SUM(
            CASE
                WHEN LENGTH({{ render_column_cast_to_string('analyzed_table')}}) > {{(parameters.max_length)}}
                    THEN 1
                ELSE 0
            END
        ) AS DOUBLE) / COUNT({{ lib.render_target_column('analyzed_table') }})
    END AS actual_value
    {{- lib.render_data_grouping_projections_reference('analyzed_table') }}
    {{- lib.render_time_dimension_projection_reference('analyzed_table') }}
FROM (
    SELECT
        original_table.*
        {{- lib.render_data_grouping_projections('original_table') }}
        {{- lib.render_time_dimension_projection('original_table') }}
    FROM {{ lib.render_target_table() }} original_table
    {{- lib.render_where_clause(table_alias_prefix='original_table') }}
) analyzed_table
{{- lib.render_where_clause() -}}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}