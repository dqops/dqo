{% import '/dialects/presto.sql.jinja2' as lib with context -%}

{% macro render_column_cast_to_string(analyzed_table_to_render) -%}
    {%- if (lib.target_column_data_type == 'STRING') -%}
        {{ lib.render_target_column(analyzed_table_to_render) }}
    {%- elif (lib.target_column_data_type == 'BIGNUMERIC') -%}
        SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'DECIMAL') -%}
            SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'BIGDECIMAL') -%}
            SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'FLOAT64') -%}
            SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'INT64') -%}
            SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'NUMERIC') -%}
            SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'INT') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'SMALLINT') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'INTEGER') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'BIGINT') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'TINYINT') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'BYTEINT') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'DATE') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'DATETIME') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'TIME') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'TIMESTAMP') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- elif (lib.target_column_data_type == 'BOOLEAN') -%}
                SAFE_CAST({{ lib.render_target_column(analyzed_table_to_render) }} AS VARCHAR)
    {%- else -%}
        {{ lib.render_target_column(analyzed_table_to_render) }}
    {%- endif -%}
{% endmacro -%}

SELECT
    CASE
        WHEN COUNT({{ lib.render_target_column('analyzed_table') }}) = 0 THEN 100.0
        ELSE CAST(100.0 * SUM(
            CASE
                WHEN UPPER({{ render_column_cast_to_string('analyzed_table')}}) IN ('ALL',	'AFN',	'ARS',	'AWG',	'AUD',	'AZN',	'BSD',	'BBD',	'BYN',	'BZD',	'BMD',	'BOB',	'BAM',	'BWP',	'BGN',	'BRL',	'BND',	'KHR',	'CAD',	'KYD',	'CLP',	'CNY',	'COP',	'CRC',	'HRK',	'CUP',	'CZK',	'DKK',	'DOP',	'XCD',	'EGP',	'SVC',	'EUR',	'FKP',	'FJD',	'GHS',	'GIP',	'GTQ',	'GGP',	'GYD',	'HNL',	'HKD',	'HUF',	'ISK',	'INR',	'IDR',	'IRR',	'IMP',	'ILS',	'JMD',	'JPY',	'JEP',	'KZT',	'KPW',	'KRW',	'KGS',	'LAK',	'LBP',	'LRD',	'MKD',	'MYR',	'MUR',	'MXN',	'MNT',	'MZN',	'NAD',	'NPR',	'ANG',	'NZD',	'NIO',	'NGN',	'NOK',	'OMR',	'PKR',	'PAB',	'PYG',	'PEN',	'PHP',	'PLN',	'QAR',	'RON',	'RUB',	'SHP',	'SAR',	'RSD',	'SCR',	'SGD',	'SBD',	'SOS',	'ZAR',	'LKR',	'SEK',	'CHF',	'SRD',	'SYP',	'TWD',	'THB',	'TTD',	'TRY',	'TVD',	'UAH',	'AED',	'GBP',	'USD',	'UYU',	'UZS',	'VEF',	'VND',	'YER',	'ZWD',	'LEK',	'؋',	'$',	'Ƒ',	'₼',	'BR',	'BZ$',	'$B',	'KM',	'P',	'ЛВ',	'R$',	'៛',	'¥',	'₡',	'KN',	'₱',	'KČ',	'KR',	'RD$', '£',	'€',	'¢',	'Q',	'L',	'FT',	'₹',	'RP',	'﷼',	'₪',	'J$',	'₩',	'₭',	'ДЕН',	'RM',	'₨',	'₮',	'د.إ',	'MT',	'C$',	'₦',	'B/.',	'GS',	'S/.', 'ZŁ',	'LEI',	'ДИН.',	'S',	'R',	'NT$',	'฿',	'TT$',	'₺',	'₴',	'$U',	'BS',	'₫', 'Z$')
                    THEN 1
                ELSE 0
            END
        ) AS DOUBLE) / COUNT({{ lib.render_target_column('analyzed_table') }})
    END AS actual_value
    {{- lib.render_data_grouping_projections_reference('analyzed_table') }}
    {{- lib.render_time_dimension_projection_reference('analyzed_table') }}
FROM (
    SELECT
        original_table.*
        {{- lib.render_data_grouping_projections('original_table') }}
        {{- lib.render_time_dimension_projection('original_table') }}
    FROM {{ lib.render_target_table() }} original_table
    {{- lib.render_where_clause(table_alias_prefix='original_table') }}
) analyzed_table
{{- lib.render_where_clause() -}}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}