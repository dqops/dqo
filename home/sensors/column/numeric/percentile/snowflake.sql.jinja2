{% import '/dialects/snowflake.sql.jinja2' as lib with context -%}

{%- macro render_time_dimension_projection_grouping(table_alias_prefix = 'analyzed_table', indentation = '    ') -%}
    {%- if lib.time_series is not none -%}
        {{ ',' -}}{{- lib.eol() -}}
        {{ indentation }}{{ indentation }}{{ lib.render_time_dimension_expression(table_alias_prefix) }} AS date,
        TO_TIMESTAMP({{ lib.render_time_dimension_expression(table_alias_prefix) }}) AS time_period_utc
    {%- endif -%}
{%- endmacro -%}

{%- macro render_time_dimension_projection(table_alias_prefix = 'analyzed_table', indentation = '    ') -%}
    {%- if lib.time_series is not none -%}
        {{ ',' -}}{{- lib.eol() -}}
        {{ indentation }}{{ indentation }}{{ render_time_dimension_expression(table_alias_prefix) }} AS date,
        TO_TIMESTAMP({{ render_time_dimension_expression(table_alias_prefix) }}) AS time_period_utc
    {%- endif -%}
{%- endmacro -%}

{% macro render_time_dimension_expression(table_alias_prefix = 'analyzed_table') %}
    {%- if lib.time_series is not none-%}
        {%- if lib.time_series.mode == 'current_time' -%}
            {%- if lib.time_series.time_gradient is defined and lib.time_series.time_gradient != 'millisecond' -%}
                {{ lib.date_trunc('TO_TIMESTAMP_NTZ(LOCALTIMESTAMP())', lib.time_series.time_gradient, 'TIMESTAMP_NTZ') }}
            {%- else -%}
                TO_TIMESTAMP_NTZ(LOCALTIMESTAMP())
            {%- endif -%}
        {%- elif lib.time_series.mode == 'timestamp_column' -%}
            {{ lib.date_trunc(table_alias_prefix ~ '.' ~ lib.time_series.timestamp_column, lib.time_series.time_gradient, lib.timestamp_column_data_type) }}
        {%- else -%}
            <INVALID TIME SERIES MODE: {{lib.time_series.mode}}>
        {%- endif -%}
    {%- endif -%}
{% endmacro %}

{%- macro render_group_by() -%}
    {%- if (lib.data_streams is not none and (lib.data_streams | length()) > 0) or lib.time_series is not none %}
GROUP BY {{ render_grouping_column_names() }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_order_by() -%}
    {%- if (lib.data_streams is not none and (lib.data_streams | length()) > 0) or lib.time_series is not none %}
ORDER BY {{ render_grouping_column_names() }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_grouping_column_names() -%}
    {%- if (data_streams is not none and (data_streams | length()) > 0) -%}
        {%- for attribute in data_streams -%}
            {%- if not loop.first -%}
                {{ ', ' }}
            {%- endif -%}
                stream_{{ attribute }}
        {%- endfor -%}
    {%- endif -%}
    {%- if lib.time_series is not none -%}
        {%- if (data_streams is not none and (data_streams | length()) > 0) -%}
            {{ ', ' }}
        {%- endif -%}
            {{ 'date' }}, {{ 'time_period_utc' }}
    {%- endif -%}
{%- endmacro -%}

{%- macro render_where_clause(extra_filter = none, table_alias_prefix = 'analyzed_table', indentation = '') -%}
    {%- with filters = [table.filter|default(none, true), parameters.filter|default(none, true), extra_filter|default(none, true)] | reject('none') | list -%}
        {%- if (filters | length) > 0 %}
{{ indentation ~ 'WHERE ' -}}
            {%- for filter in filters -%}
                {%- if not loop.first -%}
                    {{ lib.eol() ~ indentation ~ '      AND ' }}
                {%- endif -%}
                {{ filter | replace('{column}', lib.render_target_column('analyzed_table')) | replace('{table}', lib.render_target_table()) | replace('{alias}', table_alias_prefix) }}
            {%- endfor -%}
            {{ render_date_range_filters(lib.eol() ~ indentation ~ '      AND ', table_alias_prefix, indentation ~ '      ') }}
        {%- else -%}
            {{ render_date_range_filters(lib.eol() ~ indentation ~ 'WHERE ', table_alias_prefix, indentation ~ '      ') }}
        {%- endif -%}
    {%- endwith -%}
{%- endmacro -%}

{%- macro render_date_range_filters(prefix_to_render = none, table_alias_prefix = 'analyzed_table', indentation = '      ') -%}
    {%- if lib.time_window_filter is not none -%}
        {%- if (lib.time_series.timestamp_column | default(none, true)) is not none -%}
            {%- if lib.time_window_filter.from_date_time_offset | default(none, true) is not none -%}
                 {{ prefix_to_render -}}{{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) }} >= {{ make_text_constant(lib.time_window_filter.from_date_time_offset) -}}
                 {{- lib.render_end_date_filter(lib.eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif lib.time_window_filter.from_date_time | default(none, true) is not none -%}
                {{ prefix_to_render -}}{{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) }} >= {{ make_text_constant(lib.time_window_filter.from_date_time) -}}
                {{- lib.render_end_date_filter(lib.eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif lib.time_window_filter.from_date | default(none, true) is not none -%}
                {{ prefix_to_render -}}{{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) }} >= {{ make_text_constant(lib.time_window_filter.from_date) -}}
                {{- lib.render_end_date_filter(lib.eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
            {%- elif lib.time_window_filter.daily_partitioning_recent_days | default(none, true) is not none -%}
                {{ prefix_to_render -}}
                {%- if lib.timestamp_column_data_type == 'TIMESTAMP WITH TIME ZONE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST(CAST(LOCALTIMESTAMP AS DATE) -{{lib.time_window_filter.daily_partitioning_recent_days}} AS TIMESTAMP WITH TIME ZONE)
                {%- elif lib.timestamp_column_data_type == 'DATE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST(LOCALTIMESTAMP AS DATE) -{{lib.time_window_filter.daily_partitioning_recent_days}}
                {%- elif lib.timestamp_column_data_type == 'TIMESTAMP WITHOUT TIME ZONE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST(CAST(LOCALTIMESTAMP AS DATE) -{{lib.time_window_filter.daily_partitioning_recent_days}} AS TIMESTAMP WITHOUT TIME ZONE)
                {%- else -%}
                     CAST({{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) }} AS DATE){{- ' >= ' -}}
                     CAST(LOCALTIMESTAMP AS DATE) -{{lib.time_window_filter.daily_partitioning_recent_days}}
                {%- endif -%}
                {{- lib.render_end_date_filter(lib.eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
                GROUP BY {{ render_grouping_column_names() }}
            {%- elif lib.time_window_filter.monthly_partitioning_recent_months | default(none, true) is not none -%}
                {{ prefix_to_render -}}
                {%- if lib.timestamp_column_data_type == 'TIMESTAMP WITH TIME ZONE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST({{ lib.date_trunc('LOCALTIMESTAMP', 'month', lib.timestamp_column_data_type) }} - interval '{{lib.time_window_filter.monthly_partitioning_recent_months}} months' AS TIMESTAMP WITH TIME ZONE)
                {%- elif lib.timestamp_column_data_type == 'DATE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST({{ lib.date_trunc('LOCALTIMESTAMP', 'month', lib.timestamp_column_data_type) }} - interval '{{lib.time_window_filter.monthly_partitioning_recent_months}} months' AS DATE)
                {%- elif lib.timestamp_column_data_type == 'TIMESTAMP WITHOUT TIME ZONE' -%}
                     {{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) -}}{{- ' >= ' -}}
                     CAST({{ lib.date_trunc('LOCALTIMESTAMP', 'month', lib.timestamp_column_data_type) }} - interval '{{lib.time_window_filter.monthly_partitioning_recent_months}} months' AS TIMESTAMP WITHOUT TIME ZONE)
                {%- else -%}
                     CAST({{ table_alias_prefix ~ '.' ~ lib.quote_identifier(lib.time_series.timestamp_column) }} AS DATE){{- ' >= ' -}}
                     CAST({{ lib.date_trunc('LOCALTIMESTAMP', 'month', lib.timestamp_column_data_type) }} - interval '{{lib.time_window_filter.monthly_partitioning_recent_months}} months' AS DATE)
                {%- endif -%}
                {{- lib.render_end_date_filter(lib.eol() ~ indentation ~ 'AND ', table_alias_prefix) -}}
                GROUP BY {{ render_grouping_column_names() }}
            {%- else -%}
                {{- lib.render_end_date_filter(prefix_to_render, table_alias_prefix) -}}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

SELECT
    MAX(actual_value) AS actual_value
    {{- lib.render_data_stream_projections('nested_table') }}
    {{- render_time_dimension_projection('nested_table') }}
FROM(
    SELECT
        PERCENTILE_CONT({{ parameters.percentile_value }}) WITHIN GROUP (ORDER BY {{ lib.render_target_column('analyzed_table')}}) AS actual_value
        {{- lib.render_data_stream_projections('analyzed_table') }}
        {{- render_time_dimension_projection_grouping('analyzed_table') }}
    FROM {{ lib.render_target_table() }} AS analyzed_table
    {{- render_where_clause(indentation = '    ') -}}) AS nested_table
{{- render_group_by() -}}
{{- render_order_by() -}}