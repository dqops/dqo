{% import '/dialects/db2.sql.jinja2' as lib with context -%}

{%- macro extract_in_list(values_list) -%}
    {%- for i in values_list -%}
        {%- if not loop.last -%}
            {{lib.make_text_constant(i)}}{{", "}}
        {%- else -%}
            {{lib.make_text_constant(i)}}
        {%- endif -%}
    {%- endfor -%}
{%- endmacro -%}

{%- macro render_from_subquery() -%}
FROM
(
    SELECT
        top_col_values.top_value top_value,
        {% if lib.time_series is not none -%}
        top_col_values.time_period time_period,
        top_col_values.time_period_utc time_period_utc,
        {% endif -%}
        RANK() OVER({{- render_data_grouping('top_col_values', indentation = ' ', partition_by_enabled=true) }}
            ORDER BY top_col_values.total_values DESC) top_values_rank {{- render_data_grouping('top_col_values', indentation = ' ') }}
    FROM
    (
        SELECT
            {{ lib.render_target_column('analyzed_table') }} top_value,
            COUNT(*) total_values
            {{- lib.render_data_grouping_projections_reference('analyzed_table', indentation = '            ') }}
            {{- lib.render_time_dimension_projection_reference('analyzed_table', indentation = '            ') }}
        FROM
        (
            SELECT
            additional_table.*,
            {{ lib.render_target_column('additional_table') }} top_value
            {{- lib.render_data_grouping_projections('additional_table', indentation = '            ') }}
            {{- lib.render_time_dimension_projection('additional_table', indentation = '            ') }}
            FROM {{ lib.render_target_table() }} additional_table) analyzed_table
        {{- lib.render_where_clause(extra_filter = lib.render_target_column('analyzed_table') ~ ' IS NOT NULL', indentation = '        ') }}
        GROUP BY {{ render_grouping_columns() -}} top_value
        ORDER BY {{ render_grouping_columns() -}} total_values DESC
    ) top_col_values
) top_values
WHERE top_values_rank <= {{ parameters.top }}
{%- endmacro -%}

{% macro render_grouping_columns() %}
    {%- if (lib.data_groupings is not none and (lib.data_groupings | length()) > 0) or lib.time_series is not none -%}
        {{ lib.render_grouping_column_names() }} {{- ', ' -}}
    {%- endif -%}
{% endmacro %}

{%- macro render_data_grouping(table_alias_prefix = '', indentation = '', partition_by_enabled = false) -%}

    {%- if partition_by_enabled == true -%}PARTITION BY
        {%- if lib.time_series is not none -%}
            {{" "}}top_col_values.time_period
        {%- elif lib.data_groupings is none -%}
            {{" "}}NULL
        {%- endif -%}
    {%- endif -%}

    {%- if lib.data_groupings is not none and (lib.data_groupings | length()) > 0 -%}
        {%- for attribute in lib.data_groupings -%}
            {{- "" if loop.first and lib.time_series is none and partition_by_enabled else "," -}}
            {%- with data_grouping_level = lib.data_groupings[attribute] -%}
                {%- if data_grouping_level.source == 'tag' -%}
                    {{ indentation }}{{ lib.make_text_constant(data_grouping_level.tag) }}
                {%- elif data_grouping_level.source == 'column_value' -%}
                    {{ indentation }}{{ table_alias_prefix }}.grouping_{{ attribute }}
                {%- endif -%}
            {%- endwith %}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro -%}

SELECT
{%- if 'expected_values' not in parameters or parameters.expected_values|length == 0 %}
    NULL actual_value,
    MAX(0) expected_value
    {{- lib.render_data_grouping_projections_reference('analyzed_table') }}
    {{- lib.render_time_dimension_projection_reference('analyzed_table') }}
FROM(
    SELECT
        original_table.*
        {{- lib.render_data_grouping_projections('original_table') }}
        {{- lib.render_time_dimension_projection('original_table') }}
    FROM {{ lib.render_target_table() }} original_table
    {{- lib.render_where_clause(table_alias_prefix='original_table') }}) analyzed_table
{%- else %}
    COUNT(DISTINCT
        CASE
            WHEN top_values.top_value IN ({{ extract_in_list(parameters.expected_values) }}) THEN top_values.top_value
            ELSE NULL
        END
    ) actual_value,
    MAX({{ parameters.expected_values | length }}) expected_value
    {%- if lib.time_series is not none -%} {{- "," }}
    top_values.time_period,
    top_values.time_period_utc
    {%- endif -%}
    {{- render_data_grouping('top_values', indentation = lib.eol() ~ '    ') }}
{{ render_from_subquery() }}
{%- endif -%}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}