{% import '/dialects/questdb.sql.jinja2' as lib with context -%}

{%- macro extract_in_list(values_list) -%}
    {%- for i in values_list -%}
        {%- if not loop.last -%}
            {{lib.make_text_constant(i)}}{{", "}}
        {%- else -%}
            {{lib.make_text_constant(i)}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro -%}

{%- macro render_else() -%}
    {%- if parameters.expected_values|length == 0 -%}
    0
    {%- else -%}
    COUNT_DISTINCT(
        CASE
            WHEN {{ lib.render_target_column('analyzed_table') }} IN ({{ extract_in_list(parameters.expected_values) }})
                THEN {{ lib.render_target_column('analyzed_table') }}
            ELSE NULL
        END
    )
    {%- endif -%}
{% endmacro -%}

WITH aggregation_table AS (
  SELECT COUNT() as count_value
  FROM {{ lib.render_target_table() }} original_table
)
, values_table AS (
  SELECT DISTINCT original_table."strings_with_numbers"
  {{- lib.render_data_grouping_projections('original_table') }}
  {{- lib.render_time_dimension_projection('original_table') }}
  FROM {{ lib.render_target_table() }} original_table
  {{- lib.render_where_clause() -}}
)
, calculated_table AS (
  SELECT COUNT(CASE
       WHEN {{ lib.render_target_column('analyzed_table') }} IN ({{ extract_in_list(parameters.expected_values) }})
           THEN {{ lib.render_target_column('analyzed_table') }}
        ELSE NULL
    END) as actual_value
    FROM values_table
)
SELECT
    CASE
        WHEN aggregation_table.count_value = 0 THEN NULL
        ELSE calculated_table.actual_value
    END AS actual_value,
    MAX(6) AS expected_value
FROM calculated_table
CROSS JOIN aggregation_table


SELECT
    CASE
        WHEN COUNT() = 0 THEN NULL
        ELSE {{render_else()}}
    END AS actual_value,
    MAX({{ parameters.expected_values | length }}) AS expected_value
    {{- lib.render_data_grouping_projections_reference('analyzed_table') }}
    {{- lib.render_time_dimension_projection_reference('analyzed_table') }}
FROM(
    SELECT
        original_table.*
        {{- lib.render_data_grouping_projections('original_table') }}
        {{- lib.render_time_dimension_projection('original_table') }}
    FROM {{ lib.render_target_table() }} original_table
) analyzed_table
{{- lib.render_where_clause() -}}
{{- lib.render_group_by() -}}
{{- lib.render_order_by() -}}